[INFO ] 2019-06-19T09:33:38,628Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:38,650Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:38,687Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:38,823Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:39,779Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:39,852Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:39,853Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:40,026Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:45,078Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:45,082Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:45,082Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:45,087Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:45,169Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:45,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,226Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,900Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:47,904Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,904Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,152Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,226Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:48,326Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:48,345Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,345Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,597Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,607Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:48,607Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:48,612Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:48,762Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:48,825Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:48,843Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[WARN ] 2019-06-19T09:33:48,854Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:33:48,869Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:48,931Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:48,936Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:33:48,939Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:33:48,968Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:49,019Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:49,390Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:49,427Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:33:49,428Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:49,428Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:49,459Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:49,528Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:49,551Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:49,552Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:49,555Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:50,093Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:50,096Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:50,096Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:50,099Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:50,101Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,101Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,157Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,173Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:50,175Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,175Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,244Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,254Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:50,286Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:50,289Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,289Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,403Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,404Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:50,425Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:50,425Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,427Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,434Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,442Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:50,445Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[WARN ] 2019-06-19T09:33:50,446Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:33:50,450Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,506Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:50,509Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:50,509Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:50,517Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:50,522Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,533Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:50,575Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:50,608Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:50,627Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:50,628Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:50,631Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:51,040Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:51,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:51,043Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:51,045Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:51,048Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,048Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,101Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,115Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:51,117Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,117Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,187Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,197Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:51,226Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:51,227Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,227Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,336Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,337Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:51,355Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:51,355Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,357Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,364Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,372Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:51,375Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[WARN ] 2019-06-19T09:33:51,378Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:33:51,380Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,432Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:51,435Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:51,435Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:51,441Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,444Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:51,445Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,454Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,455Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,464Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:51,465Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:51,515Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:51,547Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:51,566Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:51,566Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:51,571Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:52,099Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:52,101Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:52,101Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:52,104Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:52,106Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,107Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,173Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:52,175Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,235Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,242Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:52,270Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:52,271Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,272Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,377Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:52,395Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:52,396Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,399Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,407Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,415Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:52,418Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[WARN ] 2019-06-19T09:33:52,422Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:33:52,423Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,475Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:52,478Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:52,478Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:52,485Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,488Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:52,489Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,498Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,499Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,509Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:52,511Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,523Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,525Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,538Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:52,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,552Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,554Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,571Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:52,577Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:52,577Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:53,143Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySDRZZD5G73vsSeJEdQdWUgdGZV76uDM4iG1igjonRaYN {}
[INFO ] 2019-06-19T09:33:53,354Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:53,354Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:53,355Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:53,384Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:53,419Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:53,425Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:53,425Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:53,432Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:53,904Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:53,907Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:53,907Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:53,912Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:53,915Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,915Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,999Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:54,002Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,002Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,088Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,098Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:54,159Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:54,166Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,166Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,256Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,261Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:54,262Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,264Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:54,279Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,291Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:54,295Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[WARN ] 2019-06-19T09:33:54,299Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:33:54,301Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,351Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:54,353Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:33:54,353Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:33:54,354Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:54,354Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:54,360Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,363Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,369Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:33:54,370Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:54,370Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:54,429Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:54,459Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:54,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:54,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:54,480Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:54,854Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:54,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:54,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:54,859Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:54,861Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,862Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,915Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,929Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:54,931Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,931Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,993Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,999Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:55,024Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:55,025Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,025Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,125Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,126Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:55,143Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:55,143Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,145Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,150Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,156Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:55,159Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[WARN ] 2019-06-19T09:33:55,160Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:33:55,165Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,212Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:55,214Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:55,215Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:55,220Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:55,224Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,231Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,232Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:55,271Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:55,299Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:55,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:55,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:55,318Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:55,697Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:55,699Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:55,699Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:55,701Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:55,703Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,746Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,757Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:55,758Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,759Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,814Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,820Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:55,843Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:55,845Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,929Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,930Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:55,946Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:55,946Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:55,947Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,952Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:55,958Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:55,961Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[WARN ] 2019-06-19T09:33:55,962Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:33:55,965Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,023Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:56,026Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:56,026Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:56,032Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:56,037Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,045Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,046Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:56,055Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,063Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,064Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,080Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:33:56,081Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:56,081Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:56,107Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:56,137Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:56,153Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:56,154Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:56,157Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:56,557Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:56,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:56,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:56,564Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:56,567Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,567Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,614Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,626Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:56,628Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,629Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,709Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:56,787Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:56,788Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,788Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,883Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,883Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:56,900Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:56,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,902Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,907Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,912Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:56,915Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[WARN ] 2019-06-19T09:33:56,917Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:33:56,919Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,967Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:56,968Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:56,969Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:56,973Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,975Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:56,976Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,983Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,985Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,991Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:56,992Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,999Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,999Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,005Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:57,006Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,013Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:57,024Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:33:57,024Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:33:57,027Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:33:57,027Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:33:57,098Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608}
[WARN ] 2019-06-19T09:33:57,098Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608}
[INFO ] 2019-06-19T09:33:58,458Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,458Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,539Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,539Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,634Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: C5F3D04A42E8191A70E6E26E176D6FF658A326D1A033F6064E20A620BC03C08B to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,635Z [Mock node 1 thread] corda.flow.call - Generating spend for: ad144815-c4ab-4dc2-8611-5b07486784dd {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[WARN ] 2019-06-19T09:33:59,000Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 055E844F1C4EE1EF125255E2752A3B30EEC0D285B0D0FC4DAD0422F240D00D94, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,004Z [Mock node 1 thread] corda.flow.call - Signing transaction for: ad144815-c4ab-4dc2-8611-5b07486784dd {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,101Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,131Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,336Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,337Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,378Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,378Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,379Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,396Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyHUNh3vz2d9aMSKmG5tuRxW6gqdouZBHbFX5EzzhQiFti {}
[INFO ] 2019-06-19T09:33:59,445Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyHUNh3vz2d9aMSKmG5tuRxW6gqdouZBHbFX5EzzhQiFti {fiber-id=10000007, flow-id=e10ad136-aa0e-4600-8dae-b53b939839c9, invocation_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, invocation_timestamp=2019-06-19T09:33:59.427Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, session_timestamp=2019-06-19T09:33:59.427Z, thread-id=629}
[INFO ] 2019-06-19T09:33:59,479Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: C5F3D04A42E8191A70E6E26E176D6FF658A326D1A033F6064E20A620BC03C08B to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000007, flow-id=e10ad136-aa0e-4600-8dae-b53b939839c9, invocation_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, invocation_timestamp=2019-06-19T09:33:59.427Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, session_timestamp=2019-06-19T09:33:59.427Z, thread-id=629}
[INFO ] 2019-06-19T09:33:59,548Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:59,549Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:59,549Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:59,575Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:59,605Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:59,609Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:59,609Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:59,613Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:59,983Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:59,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:59,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:59,987Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:59,989Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:59,989Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,034Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,045Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:00,046Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,108Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,114Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:00,158Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:00,165Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,165Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,249Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,253Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:00,253Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,255Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:00,265Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,272Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:00,276Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[WARN ] 2019-06-19T09:34:00,277Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:00,279Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,324Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:00,326Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:00,327Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:00,327Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:00,328Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:00,332Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,334Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:00,365Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:00,395Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:00,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:00,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:00,414Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:00,754Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:00,756Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:00,756Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:00,759Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:00,761Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,761Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,810Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,821Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:00,824Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,825Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,874Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,879Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:00,900Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:00,901Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,901Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,976Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,977Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:00,992Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:00,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:00,994Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:00,998Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,003Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:01,005Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[WARN ] 2019-06-19T09:34:01,006Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:01,008Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,054Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:01,056Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:01,056Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:01,060Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,062Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:01,063Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,068Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,069Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,079Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:01,080Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:01,080Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,105Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,132Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:01,147Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,147Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,149Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:01,503Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:01,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:01,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:01,506Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:01,508Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,508Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,546Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,556Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:01,557Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,557Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,607Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,612Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:01,630Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:01,631Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,631Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,720Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,721Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:01,737Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:01,737Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,744Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,748Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:01,751Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[WARN ] 2019-06-19T09:34:01,753Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:01,755Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,806Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:01,808Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:01,808Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:01,812Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,814Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:01,815Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,820Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,821Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,828Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,834Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,870Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,900Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:01,914Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,914Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,917Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:02,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:02,243Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:02,243Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:02,245Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:02,246Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,246Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,284Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,295Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:02,297Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,297Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,349Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,354Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:02,376Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:02,377Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,377Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,448Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,449Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:02,463Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:02,463Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,465Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,469Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,473Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:02,476Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[WARN ] 2019-06-19T09:34:02,477Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:02,478Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,528Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:02,530Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:02,530Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:02,534Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,535Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:02,536Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,543Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:02,550Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:02,562Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,568Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,569Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:03,117Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,117Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,131Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,131Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,171Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 24463E4260CD014E8A20CCA0F12D3FBF4F8A6062291CD65A2A8171FC966E2F9A to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,172Z [Mock node 3 thread] corda.flow.call - Generating spend for: 1c983a6d-5800-4411-819a-e2cb16856856 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[WARN ] 2019-06-19T09:34:03,179Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6014D6FF66F63AD4844DBC851606194EDD031C5C7E94CEC674402C14F17078C8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,181Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 1c983a6d-5800-4411-819a-e2cb16856856 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,194Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,211Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,276Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,277Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,295Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 24463E4260CD014E8A20CCA0F12D3FBF4F8A6062291CD65A2A8171FC966E2F9A to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fe1a76f9-23c4-430e-a0bb-a04e2f03be22, invocation_id=3caf0dc4-4d1a-4332-95e6-c1c3458e277e, invocation_timestamp=2019-06-19T09:34:03.291Z, origin=Only For Testing, session_id=3caf0dc4-4d1a-4332-95e6-c1c3458e277e, session_timestamp=2019-06-19T09:34:03.291Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,325Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 95FAB1DC8A01BF61215051AB29745954C9EBA71666A4C8108421CCFF940C6368 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,325Z [Mock node 3 thread] corda.flow.call - Generating spend for: b59adc6e-2d2d-4116-9beb-96f6ecdf4e53 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[WARN ] 2019-06-19T09:34:03,332Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6014D6FF66F63AD4844DBC851606194EDD031C5C7E94CEC674402C14F17078C8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,333Z [Mock node 3 thread] corda.flow.call - Signing transaction for: b59adc6e-2d2d-4116-9beb-96f6ecdf4e53 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,342Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,355Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,400Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {fiber-id=10000015, flow-id=59b87a0f-26ac-4ed2-99ff-6acc407b8cc9, invocation_id=5aaf2d87-2e32-4d10-860e-53ad9dc7208a, invocation_timestamp=2019-06-19T09:34:03.361Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=5aaf2d87-2e32-4d10-860e-53ad9dc7208a, session_timestamp=2019-06-19T09:34:03.361Z, thread-id=924}
[INFO ] 2019-06-19T09:34:03,412Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,413Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,418Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,428Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,478Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {}
[INFO ] 2019-06-19T09:34:03,492Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,500Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,508Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[WARN ] 2019-06-19T09:34:03,508Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,509Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,511Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,511Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,512Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,512Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,536Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,537Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,541Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,555Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,565Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,567Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-9124130210210132774--4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))]), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@2c6c5e46, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38) {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,569Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,570Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,592Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] errored, dumping all transitions:

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    SignalFlowHasStarted(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-0-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), maySkipCheckpoint=false, fiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), frozenFiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
checkpoint.flowState.frozenFiber.hash: 
    0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-2-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
checkpoint.flowState.frozenFiber.hash: 
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], sessionId=SessionId(toLong=9124130210210132774))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
    81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.552Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=9124130210210132774), initiationEntropy=-4566457154872016394, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-9124130210210132774--4566457154872016394-4-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))])
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-9124130210210132774--4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=9124130210210132774), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774).rejectionError: 
    null
    FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.572Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.575Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[WARN ] 2019-06-19T09:34:03,592Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,594Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,640Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,640Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@d62cd26, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,641Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,641Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] errored, dumping all transitions:

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    SignalFlowHasStarted(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], sessionId=SessionId(toLong=1953014859611848863))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.519Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.525Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=1953014859611848863), initiationEntropy=-6406797140790486523, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-1-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), maySkipCheckpoint=false, fiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), frozenFiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
checkpoint.flowState.frozenFiber.hash: 
    0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-2-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), maySkipCheckpoint=false, fiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.flowState.frozenFiber.hash: 
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
    9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ErrorSessionMessage(flowException=null, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).errors: 
    []
    [FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,649Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] errored, dumping all transitions:

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    SignalFlowHasStarted(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-0-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), maySkipCheckpoint=false, fiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), frozenFiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
checkpoint.flowState.frozenFiber.hash: 
    0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-2-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
checkpoint.flowState.frozenFiber.hash: 
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], sessionId=SessionId(toLong=9124130210210132774))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
    81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.552Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=9124130210210132774), initiationEntropy=-4566457154872016394, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-9124130210210132774--4566457154872016394-4-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))])
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-9124130210210132774--4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=9124130210210132774), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774).rejectionError: 
    null
    FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.572Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.575Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.643Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8846550760029296164)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)], senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38)
    CreateTransaction
    RemoveCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf])
    ReleaseSoftLocks(uuid=4f15496f-7e76-4772-9ac5-a27d281c5452)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=638980050707302791), SessionId(toLong=9124130210210132774)])
    RemoveFlow(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-9124130210210132774--4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))]), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@2c6c5e46, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]
    []
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[WARN ] 2019-06-19T09:34:03,649Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,654Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] errored, dumping all transitions:

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    SignalFlowHasStarted(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], sessionId=SessionId(toLong=1953014859611848863))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.519Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.525Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=1953014859611848863), initiationEntropy=-6406797140790486523, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-1-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), maySkipCheckpoint=false, fiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), frozenFiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
checkpoint.flowState.frozenFiber.hash: 
    0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-2-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), maySkipCheckpoint=false, fiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.flowState.frozenFiber.hash: 
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
    9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ErrorSessionMessage(flowException=null, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).errors: 
    []
    [FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.648Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8846550760029296164)], sessions=[], senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc)
    CreateTransaction
    RemoveCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd])
    ReleaseSoftLocks(uuid=1b33f154-c5f1-431a-9dad-9805af157ad1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1953014859611848863)])
    RemoveFlow(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@d62cd26, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,654Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,718Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:34:03,718Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:03,719Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:03,748Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:03,780Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:03,785Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:03,785Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:03,791Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:04,165Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:04,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:04,167Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:04,170Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:04,172Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,172Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,219Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,231Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:04,233Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,233Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,291Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,298Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:04,352Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:04,363Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,364Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,473Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,477Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:04,477Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,479Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:04,490Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,497Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:04,499Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[WARN ] 2019-06-19T09:34:04,501Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:04,502Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,551Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:04,553Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:04,553Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:04,554Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:04,554Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:04,558Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,565Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:04,566Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:04,566Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:04,589Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:04,617Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:04,630Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:04,631Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:04,632Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:04,962Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:04,964Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:04,964Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:04,966Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:04,968Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,968Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,008Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,018Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:05,020Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,020Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,068Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,074Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:05,093Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:05,094Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,094Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,164Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,165Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:05,178Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:05,178Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,180Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,183Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,187Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:05,189Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[WARN ] 2019-06-19T09:34:05,190Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:05,192Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,237Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:05,238Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:05,239Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:05,242Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:05,245Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,249Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,250Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,284Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,312Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:05,326Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:05,326Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:05,328Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:05,636Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:05,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:05,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:05,640Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:05,641Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,642Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,692Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,702Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:05,703Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,704Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,753Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,757Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:05,778Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:05,778Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,779Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,857Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,858Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:05,874Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:05,874Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,875Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,879Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,883Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:05,885Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[WARN ] 2019-06-19T09:34:05,887Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:05,888Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,932Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:05,934Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:05,935Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:05,938Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,940Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:05,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,947Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,948Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,952Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,953Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,957Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,958Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,970Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:05,971Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:05,971Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,996Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,027Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:06,041Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,042Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,044Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:06,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:06,343Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:06,343Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:06,345Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:06,347Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,347Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,388Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,398Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:06,399Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,399Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,444Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,449Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:06,469Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:06,469Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,470Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,540Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,541Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:06,555Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:06,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,560Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,564Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:34:06,566Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:06,567Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,569Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,614Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:06,616Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:06,616Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:06,619Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,621Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:06,622Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,626Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,627Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:06,633Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,638Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,638Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,644Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:06,644Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,648Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,649Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:06,695Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 887E45380E19833C1765C80523ACC51101E2BF99B1488D0D887C8FCC554483D7 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000018, flow-id=de03344a-9a5c-434a-b161-49acf3337fbb, invocation_id=a7092bac-d68b-48ae-bb3d-855f5963b6c1, invocation_timestamp=2019-06-19T09:34:06.658Z, origin=Only For Testing, session_id=a7092bac-d68b-48ae-bb3d-855f5963b6c1, session_timestamp=2019-06-19T09:34:06.658Z, thread-id=1201}
[INFO ] 2019-06-19T09:34:06,759Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:34:06,760Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:06,760Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,784Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,812Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:06,815Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,816Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,820Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:07,165Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:07,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:07,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:07,169Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:07,170Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,170Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,215Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,228Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:07,229Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,230Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,291Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:07,333Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:07,338Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,338Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,411Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,415Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:07,415Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,416Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:07,425Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,431Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:07,434Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[WARN ] 2019-06-19T09:34:07,435Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:07,438Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,482Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:07,483Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:07,483Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:07,484Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:07,484Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:07,488Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,490Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,490Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,495Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:07,496Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:07,496Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:07,521Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:07,551Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:07,573Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:07,574Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:07,577Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:07,883Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:07,884Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:07,884Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:07,886Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:07,887Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,887Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,923Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,933Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:07,934Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,934Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,985Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:08,003Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:08,004Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,004Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,070Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:08,084Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:08,084Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,085Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,089Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,092Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:08,094Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[WARN ] 2019-06-19T09:34:08,096Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:08,097Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,141Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:08,143Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:08,143Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:08,146Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,148Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:08,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,153Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,162Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:08,163Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:08,163Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,187Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,215Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:08,227Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,227Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,229Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:08,517Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:08,518Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:08,518Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:08,520Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:08,521Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,522Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,558Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,567Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:08,568Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,568Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,613Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,618Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:08,640Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:08,641Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,641Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,708Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,708Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:08,722Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:08,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,723Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,727Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,731Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:08,733Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[WARN ] 2019-06-19T09:34:08,734Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:08,736Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,780Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:08,781Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:08,782Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:08,785Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,787Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:08,788Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,793Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,794Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,799Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,801Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,805Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,806Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,810Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,840Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,868Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:08,881Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,881Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,883Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:09,240Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:09,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:09,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:09,244Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:09,245Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,245Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,296Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:09,298Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,298Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,353Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,358Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:09,385Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:09,386Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,386Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,459Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,460Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:09,473Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:09,473Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,478Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,481Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:34:09,484Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:09,484Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,488Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,531Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:09,533Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:09,533Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:09,537Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:09,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,545Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,546Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,550Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:09,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:09,561Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,566Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,567Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:10,099Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,099Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,114Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,114Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,145Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: F871FBFCFB4029C215878410310A5EA4F2305EDB0323DE6FC80498B8F8D3C791 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,145Z [Mock node 3 thread] corda.flow.call - Generating spend for: 7c54a146-ef44-4635-8b25-22f08ed63373 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[WARN ] 2019-06-19T09:34:10,153Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F6241EB9C1F761FEFA5619B2E9A2AFBB55A09A3BF2174D6F7949E386A855EA14, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,154Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 7c54a146-ef44-4635-8b25-22f08ed63373 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,167Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,179Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,236Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,237Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,242Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,249Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,267Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,268Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,268Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,272Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,274Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {}
[INFO ] 2019-06-19T09:34:10,277Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,284Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[WARN ] 2019-06-19T09:34:10,284Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,285Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[WARN ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[INFO ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[WARN ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[INFO ] 2019-06-19T09:34:10,308Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: F871FBFCFB4029C215878410310A5EA4F2305EDB0323DE6FC80498B8F8D3C791 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000023, flow-id=3edf088e-2e38-4943-af62-d9d39ac59f49, invocation_id=c2488053-81da-4ba0-9163-a292e899ada8, invocation_timestamp=2019-06-19T09:34:10.274Z, origin=Only For Testing, session_id=c2488053-81da-4ba0-9163-a292e899ada8, session_timestamp=2019-06-19T09:34:10.274Z, thread-id=1497}
