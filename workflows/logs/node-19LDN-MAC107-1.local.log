[INFO ] 2019-06-18T15:11:00,302Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151054.318/nodes/0/cordapps] {}
[INFO ] 2019-06-18T15:11:00,324Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:00,359Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:00,490Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:01,334Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:01,393Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:01,394Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:01,549Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:10:54.318Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:05,600Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:05,606Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151054.318/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:05,606Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:05,610Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:05,678Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:05,685Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:07,546Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,203Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:08,207Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,207Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,437Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,506Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:08,584Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:08,599Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,600Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,844Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:08,853Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:08,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:08,857Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:08,998Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:09,056Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:09,074Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[WARN ] 2019-06-18T15:11:09,084Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-18T15:11:09,099Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:09,159Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:09,164Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-18T15:11:09,166Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-18T15:11:09,191Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151054.318/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:09,233Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:09,564Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:09,590Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:09,591Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:09,592Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:09,592Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:09,599Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151054.318/nodes/1/cordapps] {}
[INFO ] 2019-06-18T15:11:09,600Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:09,600Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:09,629Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:09,664Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:09,690Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:09,691Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:09,694Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:10:54.318Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:10,200Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:10,203Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151054.318/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:10,203Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:10,206Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:10,208Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,208Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,266Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,283Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:10,284Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,356Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,365Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:10,395Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:10,397Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,397Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,507Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:10,508Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:10,530Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:10,530Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,532Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:10,540Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,547Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:10,550Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[WARN ] 2019-06-18T15:11:10,552Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-18T15:11:10,555Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:10,610Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:10,612Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151054.318/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:10,613Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:10,619Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,622Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:10,624Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:10,634Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,635Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:10,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:10,645Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:10,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:10,650Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151054.318/nodes/2/cordapps] {}
[INFO ] 2019-06-18T15:11:10,651Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:10,651Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:10,680Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:10,711Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:10,734Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:10,734Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:10,737Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:10:54.318Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:11,158Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:11,160Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151054.318/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:11,160Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:11,164Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:11,167Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,167Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,219Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,236Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:11,238Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,238Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,303Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,310Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:11,334Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:11,335Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,335Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,432Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:11,434Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:11,452Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:11,452Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,454Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:11,461Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,469Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:11,472Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[WARN ] 2019-06-18T15:11:11,474Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-18T15:11:11,477Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:11,531Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:11,533Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151054.318/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:11,533Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:11,539Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:11,544Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:11,553Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,554Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:11,563Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:11,564Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:11,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,573Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:11,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:11,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:11,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:11,587Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151054.318/nodes/3/cordapps] {}
[INFO ] 2019-06-18T15:11:11,587Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:11,588Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:11,615Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151054.318/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:11,646Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:11,665Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:11,665Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:11,670Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:10:54.318Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:12,178Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:12,180Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151054.318/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:12,180Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:12,182Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:12,184Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,184Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,232Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,246Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:12,248Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,248Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,305Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,312Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:12,341Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:12,342Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,342Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,441Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:12,442Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:12,459Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:12,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,461Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,467Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,472Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:12,476Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[WARN ] 2019-06-18T15:11:12,477Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-18T15:11:12,482Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:12,531Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:12,533Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151054.318/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:12,533Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:12,539Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870668853) {}
[INFO ] 2019-06-18T15:11:12,544Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,552Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,553Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,563Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870670530) {}
[INFO ] 2019-06-18T15:11:12,564Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,572Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,581Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870671452) {}
[INFO ] 2019-06-18T15:11:12,582Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,589Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,590Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:12,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:12,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870672459) {}
[INFO ] 2019-06-18T15:11:12,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:12,604Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:12,608Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:12,608Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:13,108Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTiQJE2VsCyQ7NtDFbhhTwDugEn7XcAUJibqSZsGQzVbb {}
[INFO ] 2019-06-18T15:11:13,293Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151113.223/nodes/0/cordapps] {}
[INFO ] 2019-06-18T15:11:13,294Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:13,294Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:13,320Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:13,349Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:13,352Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:13,352Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:13,358Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:13.223Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:13,754Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:13,755Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151113.223/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:13,755Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:13,758Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:13,759Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,760Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,804Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,817Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:13,818Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,818Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,875Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,882Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:13,933Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:13,939Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:13,939Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,032Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,036Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:14,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,038Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:14,051Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,060Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:14,063Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[WARN ] 2019-06-18T15:11:14,065Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-18T15:11:14,067Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,114Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:14,116Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-18T15:11:14,116Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-18T15:11:14,117Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151113.223/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:14,117Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:14,123Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,173Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151113.223/nodes/1/cordapps] {}
[INFO ] 2019-06-18T15:11:14,173Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:14,173Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:14,197Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:14,226Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:14,244Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:14,244Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:14,247Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:13.223Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:14,587Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:14,589Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151113.223/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:14,589Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:14,591Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:14,593Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,593Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,637Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,649Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:14,650Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,650Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,701Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,707Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:14,728Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:14,729Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,730Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,809Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:14,809Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:14,825Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:14,825Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,827Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:14,832Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,838Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:14,840Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[WARN ] 2019-06-18T15:11:14,842Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-18T15:11:14,845Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,891Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:14,893Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151113.223/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:14,894Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:14,898Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:14,902Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:14,909Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,910Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:14,919Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,919Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,919Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:14,919Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:14,924Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151113.223/nodes/2/cordapps] {}
[INFO ] 2019-06-18T15:11:14,924Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:14,924Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:14,949Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:14,981Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:14,998Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:14,998Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:15,001Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:13.223Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:15,341Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:15,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151113.223/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:15,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:15,344Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:15,346Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,346Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,386Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,397Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:15,399Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,399Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,450Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,457Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:15,481Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:15,482Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,483Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,562Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:15,563Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:15,578Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:15,578Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,580Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:15,585Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,591Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:15,593Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[WARN ] 2019-06-18T15:11:15,594Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-18T15:11:15,598Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:15,653Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:15,655Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151113.223/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:15,655Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:15,660Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,662Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:15,663Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:15,670Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,671Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:15,678Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:15,679Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:15,686Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,687Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:15,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:15,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:15,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:15,699Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151113.223/nodes/3/cordapps] {}
[INFO ] 2019-06-18T15:11:15,700Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:15,700Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:15,725Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151113.223/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:15,756Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:15,771Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:15,772Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:15,776Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:13.223Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:16,110Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:16,111Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151113.223/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:16,111Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:16,114Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:16,116Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,116Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,164Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,175Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:16,177Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,177Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,232Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,238Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:16,270Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:16,325Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,326Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,409Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:16,410Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:16,425Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:16,425Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,426Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,431Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,436Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:16,438Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[WARN ] 2019-06-18T15:11:16,440Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-18T15:11:16,442Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:16,488Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:16,490Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151113.223/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:16,491Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:16,495Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,497Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870674036) {}
[INFO ] 2019-06-18T15:11:16,498Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,506Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870674825) {}
[INFO ] 2019-06-18T15:11:16,514Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,521Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,527Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870675578) {}
[INFO ] 2019-06-18T15:11:16,528Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,536Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,537Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:16,543Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,543Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:16,543Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870676425) {}
[INFO ] 2019-06-18T15:11:16,543Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:16,547Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-18T15:11:16,547Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-18T15:11:16,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:16,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-18T15:11:16,620Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607}
[WARN ] 2019-06-18T15:11:16,620Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607}
[INFO ] 2019-06-18T15:11:17,794Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,794Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,870Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,870Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,956Z [Mock node 1 thread] corda.flow.run - Flow raised an error: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,958Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [ff14f402-889c-453c-a849-8e3b61f19ce4] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6941281881807839944)), errors=[], deduplicationSeed=R-710752417401330858--746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))]), frozenFiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4), errorState=Clean, numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@4ffb4377, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[INFO ] 2019-06-18T15:11:17,960Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-18T15:11:17,963Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:18,300Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ff14f402-889c-453c-a849-8e3b61f19ce4] errored, dumping all transitions:

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:16.566Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8CAD5B296AEC92F2752814E12BBD2B8E5E1B95A09F572965558580A08ADECAB9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25])
    SignalFlowHasStarted(flowId=[ff14f402-889c-453c-a849-8e3b61f19ce4])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:16.569Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.788Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.870Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.871Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.873Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.873Z
  Event: InitiateFlow(wellKnownParty=O=Alice Corp, L=Madrid, C=ES, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[ff14f402-889c-453c-a849-8e3b61f19ce4], sessionId=SessionId(toLong=710752417401330858))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    null
    Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.892Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278, )
  Actions: 
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=8CAD5B296AEC92F2752814E12BBD2B8E5E1B95A09F572965558580A08ADECAB9)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.894Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Alice Corp, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=710752417401330858), initiationEntropy=-746456590580336573, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-710752417401330858--746456590580336573-1-0), senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.899Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.912Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4, )
  Actions: 
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false), frozenFiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278
    4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.913Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))])
checkpoint.sessions.SessionId(toLong=710752417401330858).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.936Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=710752417401330858), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6941281881807839944), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6941281881807839944), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6941281881807839944)), errors=[], deduplicationSeed=R-710752417401330858--746456590580336573)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.937Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.953Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=710752417401330858), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.953Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.955Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.956Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.964Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3650260756384753518, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.968Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.969Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[WARN ] 2019-06-18T15:11:18,300Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ff14f402-889c-453c-a849-8e3b61f19ce4] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:18,302Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[WARN ] 2019-06-18T15:11:18,384Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ff14f402-889c-453c-a849-8e3b61f19ce4] errored, dumping all transitions:

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:16.566Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=8CAD5B296AEC92F2752814E12BBD2B8E5E1B95A09F572965558580A08ADECAB9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25])
    SignalFlowHasStarted(flowId=[ff14f402-889c-453c-a849-8e3b61f19ce4])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@71161d25]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:16.569Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.788Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.870Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.871Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.873Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.873Z
  Event: InitiateFlow(wellKnownParty=O=Alice Corp, L=Madrid, C=ES, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[ff14f402-889c-453c-a849-8e3b61f19ce4], sessionId=SessionId(toLong=710752417401330858))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    null
    Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.892Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278, )
  Actions: 
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=8CAD5B296AEC92F2752814E12BBD2B8E5E1B95A09F572965558580A08ADECAB9)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.894Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Alice Corp, L=Madrid, C=ES, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=710752417401330858), initiationEntropy=-746456590580336573, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-710752417401330858--746456590580336573-1-0), senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    Uninitiated(party=O=Alice Corp, L=Madrid, C=ES, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=710752417401330858), additionalEntropy=-746456590580336573)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.899Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.912Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4, )
  Actions: 
    PersistCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false), frozenFiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    33A08484FC58C9D5290C62B66D7BD41CCFC8C8FB0305AE7970E6F430F6530278
    4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.913Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))=A8682B2D3C30B1ABDFC7F001B1D35E747EC0BFF28A48BDAE974106AC1BA8557A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))])
checkpoint.sessions.SessionId(toLong=710752417401330858).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.936Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=710752417401330858), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6941281881807839944), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6941281881807839944), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-710752417401330858--746456590580336573-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-710752417401330858--746456590580336573)
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6941281881807839944)), errors=[], deduplicationSeed=R-710752417401330858--746456590580336573)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.937Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.953Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=710752417401330858), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.953Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=710752417401330858).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.955Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.956Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.964Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3650260756384753518, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.968Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:17.969Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ff14f402-889c-453c-a849-8e3b61f19ce4] ---
  Timestamp: 2019-06-18T15:11:18.373Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3650260756384753518)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6941281881807839944)), errors=[], deduplicationSeed=R-710752417401330858--746456590580336573)], senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb)
    CreateTransaction
    RemoveCheckpoint(id=[ff14f402-889c-453c-a849-8e3b61f19ce4])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27])
    ReleaseSoftLocks(uuid=ff14f402-889c-453c-a849-8e3b61f19ce4)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=710752417401330858)])
    RemoveFlow(flowId=[ff14f402-889c-453c-a849-8e3b61f19ce4], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3650260756384753518, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Invocation, sessionId=29d18317-e6bc-407a-8d46-1ba701fc5b6b, timestamp: 2019-06-18T15:11:16.558Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=710752417401330858)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6941281881807839944)), errors=[], deduplicationSeed=R-710752417401330858--746456590580336573)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=710752417401330858))]), frozenFiber=4937C3B1E630334C11D5DEAABB5EC7EF0A30AAE74E89C7F067948578DADCF2C4), errorState=Errored(errors=[FlowError(errorId=3650260756384753518, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=1, propagating=true), numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@4ffb4377, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=4e3a664e-8fbd-42f9-b32e-7da950b7fbfb))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3c477952, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@730bcd27]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
[WARN ] 2019-06-18T15:11:18,384Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [ff14f402-889c-453c-a849-8e3b61f19ce4] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ff14f402-889c-453c-a849-8e3b61f19ce4, invocation_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, invocation_timestamp=2019-06-18T15:11:16.558Z, origin=Only For Testing, session_id=29d18317-e6bc-407a-8d46-1ba701fc5b6b, session_timestamp=2019-06-18T15:11:16.558Z, thread-id=607, tx_id=360E9D265FC16A9354CF6E4A7369537D26001D053D3D9F2481210FD5341CB4FA}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[ERROR] 2019-06-18T15:11:18,385Z [Mock node 1 thread] internal.MockNodeMessagingService.run - Caught exception in handler for net.corda.testing.node.internal.MockNodeMessagingService@3c99644c/platform.session [errorCode=15ww9km, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/15ww9km] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000004, flow-id=f3de3e24-95c2-405a-9399-d092bd1d3daa, invocation_id=c48e0e81-3372-4f81-93ca-b75458aeab5c, invocation_timestamp=2019-06-18T15:11:17.917Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=c48e0e81-3372-4f81-93ca-b75458aeab5c, session_timestamp=2019-06-18T15:11:17.917Z, thread-id=607}
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@5c6a12ef rejected from net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor@540e8b64[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 21]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:326) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:533) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.execute(ScheduledThreadPoolExecutor.java:622) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1.invoke(SingleThreadedStateMachineManager.kt:157) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1.invoke(SingleThreadedStateMachineManager.kt:70) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowMessagingImpl$start$1.invoke(FlowMessaging.kt:47) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowMessagingImpl$start$1.invoke(FlowMessaging.kt:38) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.testing.node.internal.MockNodeMessagingService$pumpReceiveInternal$1.run(MockNodeMessagingService.kt:230) ~[corda-node-driver-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-18T15:11:18,443Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151118.390/nodes/0/cordapps] {}
[INFO ] 2019-06-18T15:11:18,444Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:18,444Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:18,469Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:18,500Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:18,503Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:18,503Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:18,508Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:18.390Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:18,872Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:18,874Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151118.390/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:18,874Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:18,876Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:18,878Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,878Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,919Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,931Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:18,933Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,933Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,983Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:18,989Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:19,027Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:19,033Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,033Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,112Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,116Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:19,116Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,117Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:19,128Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,135Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:19,138Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[WARN ] 2019-06-18T15:11:19,140Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-18T15:11:19,141Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,188Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:19,189Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-18T15:11:19,190Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-18T15:11:19,190Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151118.390/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:19,191Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:19,196Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,197Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,198Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,198Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,198Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,202Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151118.390/nodes/1/cordapps] {}
[INFO ] 2019-06-18T15:11:19,202Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:19,202Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:19,227Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:19,256Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:19,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:19,271Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:19,273Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:18.390Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:19,592Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:19,593Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151118.390/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:19,594Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:19,596Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:19,597Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,597Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,635Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,645Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:19,647Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,647Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,695Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,700Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:19,719Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:19,720Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,720Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,795Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:19,796Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:19,811Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:19,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,813Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:19,818Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,822Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:19,825Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[WARN ] 2019-06-18T15:11:19,826Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-18T15:11:19,828Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,875Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:19,877Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151118.390/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:19,878Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:19,882Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,884Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:19,885Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:19,890Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,891Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:19,897Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,897Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,897Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:19,897Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:19,901Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151118.390/nodes/2/cordapps] {}
[INFO ] 2019-06-18T15:11:19,902Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:19,902Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:19,927Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:19,956Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:19,970Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:19,970Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:19,972Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:18.390Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:20,294Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:20,295Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151118.390/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:20,296Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:20,298Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:20,299Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,300Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,338Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,371Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:20,372Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,373Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,423Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,428Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:20,448Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:20,448Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,449Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,520Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:20,521Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:20,535Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:20,535Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,536Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:20,540Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,545Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:20,547Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[WARN ] 2019-06-18T15:11:20,549Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-18T15:11:20,550Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:20,596Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:20,598Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151118.390/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:20,598Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:20,602Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,604Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:20,605Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:20,611Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,612Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:20,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:20,618Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:20,624Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,625Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:20,630Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,631Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:20,631Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:20,631Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:20,635Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151118.390/nodes/3/cordapps] {}
[INFO ] 2019-06-18T15:11:20,635Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:20,635Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:20,662Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151118.390/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:20,689Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:20,703Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:20,703Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:20,705Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:18.390Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:21,012Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:21,013Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151118.390/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:21,014Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:21,016Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:21,017Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,017Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,053Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,063Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:21,065Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,065Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,111Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,117Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:21,143Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:21,144Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,144Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,214Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:21,215Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:21,229Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:21,229Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,231Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,234Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,239Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:21,241Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[WARN ] 2019-06-18T15:11:21,243Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-18T15:11:21,244Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:21,283Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:21,285Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151118.390/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:21,285Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:21,289Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,290Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870679116) {}
[INFO ] 2019-06-18T15:11:21,291Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,296Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,297Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870679811) {}
[INFO ] 2019-06-18T15:11:21,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,309Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870680535) {}
[INFO ] 2019-06-18T15:11:21,315Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,321Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:21,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:21,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870681229) {}
[INFO ] 2019-06-18T15:11:21,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:21,327Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-18T15:11:21,327Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-18T15:11:21,327Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:21,327Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:21,924Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,924Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,938Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,939Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,985Z [Mock node 3 thread] corda.flow.run - Flow raised an error: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,986Z [Mock node 3 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Initiated(peerParty=O=Charlie Ltd, L=Athens, C=GR, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7444781278386662845)), errors=[], deduplicationSeed=R-8313121402721850684-5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))]), frozenFiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9), errorState=Clean, numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@4abc2194, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1) {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[INFO ] 2019-06-18T15:11:21,986Z [Mock node 3 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-18T15:11:21,986Z [Mock node 3 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:21,990Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] errored, dumping all transitions:

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.330Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=7D345E986C4A6F29B06732FC62F6EFA6153502F4B1FFC5FF57FF413A04DD8913), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906])
    SignalFlowHasStarted(flowId=[2dfc06b6-ded9-489e-8977-8a1b748066ed])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.330Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.921Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[2dfc06b6-ded9-489e-8977-8a1b748066ed], sessionId=SessionId(toLong=8313121402721850684))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.945Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E, )
  Actions: 
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=7D345E986C4A6F29B06732FC62F6EFA6153502F4B1FFC5FF57FF413A04DD8913)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.947Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8313121402721850684), initiationEntropy=5551274261762543430, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-1-0), senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.947Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.954Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9, )
  Actions: 
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false), frozenFiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E
    9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.954Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))])
checkpoint.sessions.SessionId(toLong=8313121402721850684).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.971Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8313121402721850684), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7444781278386662845), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    SendExisting(peerParty=O=Charlie Ltd, L=Athens, C=GR, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7444781278386662845), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)
    Initiated(peerParty=O=Charlie Ltd, L=Athens, C=GR, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7444781278386662845)), errors=[], deduplicationSeed=R-8313121402721850684-5551274261762543430)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.971Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.984Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8313121402721850684), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.984Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.985Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.985Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8537731947677408180, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[WARN ] 2019-06-18T15:11:21,990Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:21,990Z [Mock node 3 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[WARN ] 2019-06-18T15:11:22,005Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] errored, dumping all transitions:

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.330Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=7D345E986C4A6F29B06732FC62F6EFA6153502F4B1FFC5FF57FF413A04DD8913), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906])
    SignalFlowHasStarted(flowId=[2dfc06b6-ded9-489e-8977-8a1b748066ed])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@33ea7906]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.330Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.921Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.939Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[2dfc06b6-ded9-489e-8977-8a1b748066ed], sessionId=SessionId(toLong=8313121402721850684))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.945Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E, )
  Actions: 
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=7D345E986C4A6F29B06732FC62F6EFA6153502F4B1FFC5FF57FF413A04DD8913)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.947Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8313121402721850684), initiationEntropy=5551274261762543430, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-1-0), senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8313121402721850684), additionalEntropy=5551274261762543430)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.947Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.954Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9, )
  Actions: 
    PersistCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false), frozenFiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    BE0E8A93CD6A466066FCEAFF6CA2F3EF66EDDB8121908FA0E2D86BAE56281E0E
    9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.954Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))=FC84ECD9CD8236A508048CE11FF5C223BC211EEE6969F09B6551D1B58DA5494A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))])
checkpoint.sessions.SessionId(toLong=8313121402721850684).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.971Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8313121402721850684), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7444781278386662845), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    SendExisting(peerParty=O=Charlie Ltd, L=Athens, C=GR, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7444781278386662845), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-8313121402721850684-5551274261762543430-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-8313121402721850684-5551274261762543430)
    Initiated(peerParty=O=Charlie Ltd, L=Athens, C=GR, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7444781278386662845)), errors=[], deduplicationSeed=R-8313121402721850684-5551274261762543430)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.971Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.984Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8313121402721850684), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.984Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8313121402721850684).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.985Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.985Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8537731947677408180, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.986Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] ---
  Timestamp: 2019-06-18T15:11:21.996Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8537731947677408180)], sessions=[Initiated(peerParty=O=Charlie Ltd, L=Athens, C=GR, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7444781278386662845)), errors=[], deduplicationSeed=R-8313121402721850684-5551274261762543430)], senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1)
    CreateTransaction
    RemoveCheckpoint(id=[2dfc06b6-ded9-489e-8977-8a1b748066ed])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7])
    ReleaseSoftLocks(uuid=2dfc06b6-ded9-489e-8977-8a1b748066ed)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=8313121402721850684)])
    RemoveFlow(flowId=[2dfc06b6-ded9-489e-8977-8a1b748066ed], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8537731947677408180, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Invocation, sessionId=815bb9d4-235c-458a-b068-eb0c880d4a70, timestamp: 2019-06-18T15:11:21.327Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8313121402721850684)=Initiated(peerParty=O=Charlie Ltd, L=Athens, C=GR, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7444781278386662845)), errors=[], deduplicationSeed=R-8313121402721850684-5551274261762543430)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8313121402721850684))]), frozenFiber=9EBFBDA479B973FC013450599AE269959C2C99C09A00131A609BAE6D009D9DF9), errorState=Errored(errors=[FlowError(errorId=8537731947677408180, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=1, propagating=true), numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@4abc2194, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ee243d83-67d4-47e1-9753-b3bea5156fe1))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1617b52b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@76980a7]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
[WARN ] 2019-06-18T15:11:22,005Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2dfc06b6-ded9-489e-8977-8a1b748066ed] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=2dfc06b6-ded9-489e-8977-8a1b748066ed, invocation_id=815bb9d4-235c-458a-b068-eb0c880d4a70, invocation_timestamp=2019-06-18T15:11:21.327Z, origin=Only For Testing, session_id=815bb9d4-235c-458a-b068-eb0c880d4a70, session_timestamp=2019-06-18T15:11:21.327Z, thread-id=901, tx_id=33ABEE255E873C8F9E9EEB3991054515101AA44487140F5CBF23CBF284AD3006}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[ERROR] 2019-06-18T15:11:22,006Z [Mock node 3 thread] internal.MockNodeMessagingService.run - Caught exception in handler for net.corda.testing.node.internal.MockNodeMessagingService@7f13f788/platform.session [errorCode=15ww9km, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/15ww9km] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000006, flow-id=b38aba68-25b4-419d-8779-44f6cf34dae0, invocation_id=a3fa29fd-0c01-4adc-aba9-17141accb268, invocation_timestamp=2019-06-18T15:11:21.958Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a3fa29fd-0c01-4adc-aba9-17141accb268, session_timestamp=2019-06-18T15:11:21.958Z, thread-id=901}
java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@4ec034c5 rejected from net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor@1c58e934[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 21]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:326) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:533) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor.execute(ScheduledThreadPoolExecutor.java:622) ~[?:1.8.0_201]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1.invoke(SingleThreadedStateMachineManager.kt:157) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1.invoke(SingleThreadedStateMachineManager.kt:70) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowMessagingImpl$start$1.invoke(FlowMessaging.kt:47) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowMessagingImpl$start$1.invoke(FlowMessaging.kt:38) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.testing.node.internal.MockNodeMessagingService$pumpReceiveInternal$1.run(MockNodeMessagingService.kt:230) ~[corda-node-driver-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-18T15:11:22,068Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151122.009/nodes/0/cordapps] {}
[INFO ] 2019-06-18T15:11:22,069Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:22,069Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:22,097Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:22,130Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:22,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:22,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:22,140Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:22.009Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:22,523Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:22,524Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151122.009/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:22,525Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:22,527Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:22,529Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,529Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,569Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,580Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:22,581Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,581Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,626Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,632Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:22,668Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:22,673Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,673Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,743Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:22,747Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:22,747Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:22,749Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:22,758Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:22,764Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:22,767Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[WARN ] 2019-06-18T15:11:22,768Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-18T15:11:22,770Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:22,814Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:22,816Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-18T15:11:22,816Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-18T15:11:22,817Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151122.009/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:22,817Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:22,821Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:22,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:22,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:22,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:22,823Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:22,827Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151122.009/nodes/1/cordapps] {}
[INFO ] 2019-06-18T15:11:22,827Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:22,828Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:22,853Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:22,881Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:22,893Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:22,893Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:22,895Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:22.009Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:23,193Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:23,194Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151122.009/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:23,194Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:23,196Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:23,198Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,198Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,233Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,243Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:23,244Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,245Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,289Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,296Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:23,316Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:23,317Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,317Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,388Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,388Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:23,403Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:23,403Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,405Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:23,408Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,412Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:23,414Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[WARN ] 2019-06-18T15:11:23,416Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-18T15:11:23,417Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:23,460Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:23,462Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151122.009/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:23,462Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:23,466Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,467Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:23,468Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:23,473Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,474Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:23,479Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,479Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:23,479Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:23,480Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:23,484Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151122.009/nodes/2/cordapps] {}
[INFO ] 2019-06-18T15:11:23,484Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:23,484Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:23,510Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:23,539Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:23,553Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:23,553Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:23,555Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:22.009Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:23,860Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:23,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151122.009/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:23,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:23,863Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:23,864Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,865Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,903Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,912Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:23,914Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,914Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,979Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:23,984Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:24,002Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:24,003Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,003Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,070Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:24,081Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:24,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,083Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,086Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,089Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:24,091Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[WARN ] 2019-06-18T15:11:24,093Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-18T15:11:24,094Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,135Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:24,136Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151122.009/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:24,137Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:24,141Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,142Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:24,143Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,148Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:24,155Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,160Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,160Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,166Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,166Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,170Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151122.009/nodes/3/cordapps] {}
[INFO ] 2019-06-18T15:11:24,170Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:24,170Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:24,194Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151122.009/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:24,222Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:24,236Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:24,236Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:24,238Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:22.009Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:24,536Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:24,537Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151122.009/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:24,537Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:24,539Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:24,541Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,541Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,575Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,584Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:24,585Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,586Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,629Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,634Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:24,652Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:24,653Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,653Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:24,717Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:24,731Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:24,732Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,733Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,736Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,740Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:24,743Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[WARN ] 2019-06-18T15:11:24,743Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-18T15:11:24,746Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,789Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:24,790Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151122.009/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:24,791Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:24,795Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,796Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870682747) {}
[INFO ] 2019-06-18T15:11:24,797Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,802Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,803Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870683403) {}
[INFO ] 2019-06-18T15:11:24,808Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,812Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,813Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870684082) {}
[INFO ] 2019-06-18T15:11:24,818Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,823Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,824Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:24,828Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870684731) {}
[INFO ] 2019-06-18T15:11:24,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:24,831Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:24,832Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:24,832Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:24,832Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:24,877Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJa5jcKgUNdtjomRopgPmC5zcA36YdvVuxgjpY9hpWbhs {}
[INFO ] 2019-06-18T15:11:24,925Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151124.886/nodes/0/cordapps] {}
[INFO ] 2019-06-18T15:11:24,925Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:24,925Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:24,950Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:24,977Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:24,980Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:24,980Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:24,984Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:24.886Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:25,284Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:25,286Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151124.886/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:25,286Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:25,288Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:25,289Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,289Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,325Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,337Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:25,338Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,338Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,380Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,386Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:25,420Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:25,425Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,425Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,496Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,499Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:25,499Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:25,501Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:25,509Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:25,516Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:25,519Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[WARN ] 2019-06-18T15:11:25,520Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-18T15:11:25,521Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:25,565Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:25,567Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-18T15:11:25,567Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-18T15:11:25,568Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151124.886/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:25,568Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:25,572Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:25,574Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:25,574Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:25,574Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:25,574Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:25,578Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151124.886/nodes/1/cordapps] {}
[INFO ] 2019-06-18T15:11:25,579Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:25,579Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:25,602Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:25,631Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:25,645Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:25,646Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:25,648Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:24.886Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:25,933Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:25,934Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151124.886/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:25,934Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:25,936Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:25,937Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,937Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:25,995Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,005Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:26,006Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,006Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,052Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,057Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:26,074Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:26,075Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,075Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,137Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,138Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:26,152Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:26,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,153Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,157Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,160Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:26,162Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[WARN ] 2019-06-18T15:11:26,163Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-18T15:11:26,165Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,209Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:26,211Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151124.886/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:26,211Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:26,214Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,216Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:26,217Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,223Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,233Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151124.886/nodes/2/cordapps] {}
[INFO ] 2019-06-18T15:11:26,233Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:26,233Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:26,258Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:26,285Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:26,298Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:26,299Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:26,300Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:24.886Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:26,591Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:26,592Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151124.886/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:26,592Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:26,594Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:26,595Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,595Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,629Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,638Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:26,639Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,639Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,681Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,685Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:26,703Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:26,704Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,704Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,766Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:26,767Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:26,779Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:26,779Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,780Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,784Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,787Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:26,789Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[WARN ] 2019-06-18T15:11:26,790Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-18T15:11:26,792Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,836Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:26,837Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151124.886/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:26,838Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:26,841Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,843Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:26,843Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,848Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,849Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:26,854Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,858Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,858Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:26,862Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,862Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,862Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:26,863Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:26,867Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190618-151124.886/nodes/3/cordapps] {}
[INFO ] 2019-06-18T15:11:26,867Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-18T15:11:26,867Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:26,890Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190618-151124.886/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-18T15:11:26,916Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-18T15:11:26,928Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-18T15:11:26,929Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-18T15:11:26,930Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-18T15:11:24.886Z
      epoch=1
  } {}
[INFO ] 2019-06-18T15:11:27,221Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-18T15:11:27,223Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190618-151124.886/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-18T15:11:27,223Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-18T15:11:27,225Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-18T15:11:27,226Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,226Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,262Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,271Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-18T15:11:27,272Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,273Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,315Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,321Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-18T15:11:27,339Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-18T15:11:27,339Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,340Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,403Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-18T15:11:27,404Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-18T15:11:27,417Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-18T15:11:27,417Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,418Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,421Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,425Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-18T15:11:27,427Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[WARN ] 2019-06-18T15:11:27,428Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-18T15:11:27,430Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:27,467Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-18T15:11:27,469Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190618-151124.886/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-18T15:11:27,469Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-18T15:11:27,473Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560870685499) {}
[INFO ] 2019-06-18T15:11:27,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,480Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,481Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,485Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560870686152) {}
[INFO ] 2019-06-18T15:11:27,486Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,490Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,491Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,495Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560870686779) {}
[INFO ] 2019-06-18T15:11:27,496Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,500Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,501Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-18T15:11:27,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:27,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560870687417) {}
[INFO ] 2019-06-18T15:11:27,505Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-18T15:11:27,506Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:27,506Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-18T15:11:27,506Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:27,506Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-18T15:11:28,155Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,155Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,168Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,168Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,202Z [Mock node 3 thread] corda.flow.run - Flow raised an error: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,202Z [Mock node 3 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [48efd733-f08f-4f07-9614-64061eccb294] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1858664799842365718)), errors=[], deduplicationSeed=R-8600715734697122288--2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))]), frozenFiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89), errorState=Clean, numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@6317a5c0, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e) {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[INFO ] 2019-06-18T15:11:28,202Z [Mock node 3 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-18T15:11:28,202Z [Mock node 3 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:28,206Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [48efd733-f08f-4f07-9614-64061eccb294] errored, dumping all transitions:

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:27.508Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=92E23C3F1FE49ACCE41E294368228CC3A3CE19C8949DC5F7F475AF180618562B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735])
    SignalFlowHasStarted(flowId=[48efd733-f08f-4f07-9614-64061eccb294])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:27.508Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.153Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[48efd733-f08f-4f07-9614-64061eccb294], sessionId=SessionId(toLong=8600715734697122288))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.173Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033, )
  Actions: 
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=92E23C3F1FE49ACCE41E294368228CC3A3CE19C8949DC5F7F475AF180618562B)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.177Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8600715734697122288), initiationEntropy=-2353670840767393365, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-1-0), senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.177Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.183Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89, )
  Actions: 
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false), frozenFiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033
    8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.183Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))])
checkpoint.sessions.SessionId(toLong=8600715734697122288).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.189Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8600715734697122288), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1858664799842365718), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1858664799842365718), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1858664799842365718)), errors=[], deduplicationSeed=R-8600715734697122288--2353670840767393365)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.189Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.200Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8600715734697122288), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.200Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.201Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2317916678564001371, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[WARN ] 2019-06-18T15:11:28,206Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [48efd733-f08f-4f07-9614-64061eccb294] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-18T15:11:28,206Z [Mock node 3 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[WARN ] 2019-06-18T15:11:28,221Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [48efd733-f08f-4f07-9614-64061eccb294] errored, dumping all transitions:

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:27.508Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=92E23C3F1FE49ACCE41E294368228CC3A3CE19C8949DC5F7F475AF180618562B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735])
    SignalFlowHasStarted(flowId=[48efd733-f08f-4f07-9614-64061eccb294])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@bee4735]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:27.508Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.153Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.FinalityFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.core.flows.FinalityFlow, classToInitiateWith=class net.corda.core.flows.FinalityFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-core-5.0-SNAPSHOT-WILLH), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.finance.flows.CashIssueFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: EnterSubFlow(subFlowClass=class net.corda.finance.flows.CashPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.169Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[48efd733-f08f-4f07-9614-64061eccb294], sessionId=SessionId(toLong=8600715734697122288))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.173Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), maySkipCheckpoint=false, fiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033, )
  Actions: 
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=92E23C3F1FE49ACCE41E294368228CC3A3CE19C8949DC5F7F475AF180618562B)
    Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440}), frozenFiber=E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.177Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8600715734697122288), initiationEntropy=-2353670840767393365, initiatorFlowClassName=net.corda.finance.flows.CashPaymentFlow, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-1-0), senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8600715734697122288), additionalEntropy=-2353670840767393365)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.177Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.183Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89, )
  Actions: 
    PersistCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false), frozenFiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=76BD837F590142507A1AD78F4453891C5C56FCA5394982F94AA113A53A536440})
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    E67AF8FF580EF74A7BD44E161E6A4D36E1BF1787BA6CF6338D07CF96187F6033
    8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.183Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))=ADEFC6E50536A296B4801A32A0817A63E4894F5665241575A0288558E86F0123}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))])
checkpoint.sessions.SessionId(toLong=8600715734697122288).bufferedMessages: 
    []
    [(DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.189Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8600715734697122288), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1858664799842365718), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1858664799842365718), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e))
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288): 
    Initiating(bufferedMessages=[(DeduplicationId(toString=N-R-8600715734697122288--2353670840767393365-2-0), DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes))], rejectionError=null, deduplicationSeed=R-8600715734697122288--2353670840767393365)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1858664799842365718)), errors=[], deduplicationSeed=R-8600715734697122288--2353670840767393365)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.189Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.200Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8600715734697122288), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.200Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8600715734697122288).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.201Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.finance.flows.CashPaymentFlow, classToInitiateWith=class net.corda.finance.flows.CashPaymentFlow, flowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)]


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: Error(exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2317916678564001371, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.202Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [48efd733-f08f-4f07-9614-64061eccb294] ---
  Timestamp: 2019-06-18T15:11:28.216Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-2317916678564001371)], sessions=[Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1858664799842365718)), errors=[], deduplicationSeed=R-8600715734697122288--2353670840767393365)], senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e)
    CreateTransaction
    RemoveCheckpoint(id=[48efd733-f08f-4f07-9614-64061eccb294])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d])
    ReleaseSoftLocks(uuid=48efd733-f08f-4f07-9614-64061eccb294)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=8600715734697122288)])
    RemoveFlow(flowId=[48efd733-f08f-4f07-9614-64061eccb294], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2317916678564001371, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR)), trace=Trace(invocationId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Invocation, sessionId=6e621e47-8692-4d3a-930b-4d56180ff213, timestamp: 2019-06-18T15:11:27.506Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Charlie Ltd, L=Athens, C=GR), externalTrace=null, impersonatedActor=null), ourIdentity=O=Charlie Ltd, L=Athens, C=GR, sessions={SessionId(toLong=8600715734697122288)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=corda-finance-workflows-5.0-SNAPSHOT-WILLH), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1858664799842365718)), errors=[], deduplicationSeed=R-8600715734697122288--2353670840767393365)}, subFlowStack=[Inlined(flowClass=class net.corda.finance.flows.CashIssueAndPaymentFlow, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=corda-finance-workflows-5.0-SNAPSHOT-WILLH, corDappHash=7C97475392499027A9B8A91D2D4400806E11272AF6EA08C8E85D1A9DE73E6253), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=8600715734697122288))]), frozenFiber=8A86FB18ED1DDB73DE376BD26F96878089F055207AD5833034DADA8FC4945F89), errorState=Errored(errors=[FlowError(errorId=-2317916678564001371, exception=java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping)], propagatedIndex=1, propagating=true), numberOfSuspends=2), flowLogic=net.corda.finance.flows.CashIssueAndPaymentFlow@6317a5c0, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=821c7bd7-110e-455b-8fa1-35dc0a7ffc9e))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7cad85d9, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c51cd5d]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
[WARN ] 2019-06-18T15:11:28,221Z [Mock node 3 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [48efd733-f08f-4f07-9614-64061eccb294] error [errorCode=1yuw7fr, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1yuw7fr] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=48efd733-f08f-4f07-9614-64061eccb294, invocation_id=6e621e47-8692-4d3a-930b-4d56180ff213, invocation_timestamp=2019-06-18T15:11:27.506Z, origin=Only For Testing, session_id=6e621e47-8692-4d3a-930b-4d56180ff213, session_timestamp=2019-06-18T15:11:27.506Z, thread-id=1471, tx_id=320A3753DEF962343E897D3E449D76BFA0D19055A82466C0DBC7659D89CD4962}
java.lang.ClassCastException: net.corda.SignedKeyToPartyMapping cannot be cast to net.corda.core.identity.SignedKeyToPartyMapping
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:60) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashPaymentFlow.call(CashPaymentFlow.kt:36) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:52) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.finance.flows.CashIssueAndPaymentFlow.call(CashIssueAndPaymentFlow.kt:26) ~[corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
