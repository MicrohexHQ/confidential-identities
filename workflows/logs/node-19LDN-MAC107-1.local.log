[INFO ] 2019-06-19T09:33:38,628Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:38,650Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:38,687Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:38,823Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:39,779Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:39,852Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:39,853Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:40,026Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:45,078Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:45,082Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:45,082Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:45,087Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:45,169Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:45,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,226Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,900Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:47,904Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:47,904Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,152Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,226Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:48,326Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:48,345Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,345Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,597Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:48,607Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:48,607Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:48,612Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:48,762Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:48,825Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:48,843Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[WARN ] 2019-06-19T09:33:48,854Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:33:48,869Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:48,931Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:48,936Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:33:48,939Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:33:48,968Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:49,019Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:49,390Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,419Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:49,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:49,427Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:33:49,428Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:49,428Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:49,459Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:49,528Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:49,551Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:49,552Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:49,555Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:50,093Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:50,096Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:50,096Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:50,099Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:50,101Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,101Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,157Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,173Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:50,175Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,175Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,244Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,254Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:50,286Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:50,289Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,289Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,403Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:50,404Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:50,425Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:50,425Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,427Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,434Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,442Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:50,445Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[WARN ] 2019-06-19T09:33:50,446Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:33:50,450Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,506Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:50,509Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:50,509Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:50,517Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:50,522Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,533Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:50,548Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:50,575Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:50,608Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:50,627Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:50,628Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:50,631Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:51,040Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:51,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:51,043Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:51,045Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:51,048Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,048Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,101Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,115Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:51,117Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,117Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,187Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,197Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:51,226Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:51,227Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,227Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,336Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:51,337Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:51,355Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:51,355Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,357Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,364Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,372Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:51,375Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[WARN ] 2019-06-19T09:33:51,378Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:33:51,380Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,432Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:51,435Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:51,435Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:51,441Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,444Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:51,445Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,454Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,455Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,464Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:51,465Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:51,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093332.311/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:51,489Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:51,515Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093332.311/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:51,547Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:51,566Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:51,566Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:51,571Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:32.311Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:52,099Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:52,101Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093332.311/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:52,101Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:52,104Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:52,106Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,107Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,173Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:52,175Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,235Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,242Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:52,270Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:52,271Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,272Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:52,377Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:52,395Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:52,396Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,399Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,407Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,415Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:52,418Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[WARN ] 2019-06-19T09:33:52,422Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:33:52,423Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,475Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:52,478Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093332.311/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:52,478Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:52,485Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,488Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936828607) {}
[INFO ] 2019-06-19T09:33:52,489Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,498Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,499Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,509Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936830425) {}
[INFO ] 2019-06-19T09:33:52,511Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,523Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,525Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,538Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936831355) {}
[INFO ] 2019-06-19T09:33:52,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,552Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,554Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936832396) {}
[INFO ] 2019-06-19T09:33:52,565Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:52,571Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:52,577Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:52,577Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:33:53,143Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySDRZZD5G73vsSeJEdQdWUgdGZV76uDM4iG1igjonRaYN {}
[INFO ] 2019-06-19T09:33:53,354Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:53,354Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:53,355Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:53,384Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:53,419Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:53,425Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:53,425Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:53,432Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:53,904Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:53,907Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:53,907Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:53,912Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:53,915Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,915Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:53,999Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:54,002Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,002Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,088Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,098Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:54,159Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:54,166Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,166Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,256Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,261Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:54,262Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,264Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:54,279Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,291Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:54,295Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[WARN ] 2019-06-19T09:33:54,299Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:33:54,301Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,351Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:54,353Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:33:54,353Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:33:54,354Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:54,354Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:54,360Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,363Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:54,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:54,369Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:33:54,370Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:54,370Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:54,429Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:54,459Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:54,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:54,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:54,480Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:54,854Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:54,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:54,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:54,859Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:54,861Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,862Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,915Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,929Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:54,931Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,931Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,993Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:54,999Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:55,024Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:55,025Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,025Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,125Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,126Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:55,143Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:55,143Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,145Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,150Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,156Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:55,159Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[WARN ] 2019-06-19T09:33:55,160Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:33:55,165Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,212Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:55,214Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:55,215Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:55,220Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:55,224Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,231Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,232Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:55,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:55,244Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:55,271Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:55,299Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:55,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:55,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:55,318Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:55,697Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:55,699Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:55,699Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:55,701Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:55,703Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,746Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,757Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:55,758Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,759Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,814Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,820Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:55,843Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:55,845Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,929Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:55,930Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:55,946Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:55,946Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:55,947Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:55,952Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:55,958Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:55,961Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[WARN ] 2019-06-19T09:33:55,962Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:33:55,965Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,023Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:56,026Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:56,026Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:56,032Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:56,037Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,045Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,046Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:56,055Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,063Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,064Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:56,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,080Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093353.269/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:33:56,081Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:56,081Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:56,107Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093353.269/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:56,137Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:56,153Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:56,154Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:56,157Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:53.269Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:56,557Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:56,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093353.269/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:56,560Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:56,564Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:56,567Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,567Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,614Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,626Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:33:56,628Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,629Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,709Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:33:56,787Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:33:56,788Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,788Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,883Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:56,883Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:33:56,900Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:33:56,900Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,902Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,907Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,912Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:33:56,915Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[WARN ] 2019-06-19T09:33:56,917Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:33:56,919Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:56,967Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:33:56,968Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093353.269/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:33:56,969Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:33:56,973Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,975Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936834261) {}
[INFO ] 2019-06-19T09:33:56,976Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,983Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,985Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,991Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936835143) {}
[INFO ] 2019-06-19T09:33:56,992Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:56,999Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:56,999Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,005Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936835946) {}
[INFO ] 2019-06-19T09:33:57,006Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,013Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936836900) {}
[INFO ] 2019-06-19T09:33:57,020Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:33:57,024Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:33:57,024Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:33:57,027Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:33:57,027Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:33:57,098Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608}
[WARN ] 2019-06-19T09:33:57,098Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608}
[INFO ] 2019-06-19T09:33:58,458Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,458Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,539Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,539Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,634Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: C5F3D04A42E8191A70E6E26E176D6FF658A326D1A033F6064E20A620BC03C08B to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:58,635Z [Mock node 1 thread] corda.flow.call - Generating spend for: ad144815-c4ab-4dc2-8611-5b07486784dd {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[WARN ] 2019-06-19T09:33:59,000Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 055E844F1C4EE1EF125255E2752A3B30EEC0D285B0D0FC4DAD0422F240D00D94, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,004Z [Mock node 1 thread] corda.flow.call - Signing transaction for: ad144815-c4ab-4dc2-8611-5b07486784dd {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,101Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=D64BF25B2F6E12727E24759878D652EBDB4C6FE29B7534B197073BECF49C4891}
[INFO ] 2019-06-19T09:33:59,131Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,336Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,337Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,378Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,378Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,379Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=ad144815-c4ab-4dc2-8611-5b07486784dd, invocation_id=31658d97-b86a-4e3f-a369-88b4141c214d, invocation_timestamp=2019-06-19T09:33:57.034Z, origin=Only For Testing, session_id=31658d97-b86a-4e3f-a369-88b4141c214d, session_timestamp=2019-06-19T09:33:57.034Z, thread-id=608, tx_id=6BAD57473DDE6FCE539CB2C6677D46847A4CD1E41A7507D3C6DF27107591CEA0}
[INFO ] 2019-06-19T09:33:59,396Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyHUNh3vz2d9aMSKmG5tuRxW6gqdouZBHbFX5EzzhQiFti {}
[INFO ] 2019-06-19T09:33:59,445Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyHUNh3vz2d9aMSKmG5tuRxW6gqdouZBHbFX5EzzhQiFti {fiber-id=10000007, flow-id=e10ad136-aa0e-4600-8dae-b53b939839c9, invocation_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, invocation_timestamp=2019-06-19T09:33:59.427Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, session_timestamp=2019-06-19T09:33:59.427Z, thread-id=629}
[INFO ] 2019-06-19T09:33:59,479Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: C5F3D04A42E8191A70E6E26E176D6FF658A326D1A033F6064E20A620BC03C08B to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000007, flow-id=e10ad136-aa0e-4600-8dae-b53b939839c9, invocation_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, invocation_timestamp=2019-06-19T09:33:59.427Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=05c3d655-33d2-4f40-a26c-69d64d5cada9, session_timestamp=2019-06-19T09:33:59.427Z, thread-id=629}
[INFO ] 2019-06-19T09:33:59,548Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:33:59,549Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:33:59,549Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:59,575Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:33:59,605Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:33:59,609Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:33:59,609Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:33:59,613Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:33:59,983Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:33:59,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:33:59,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:33:59,987Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:33:59,989Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:33:59,989Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,034Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,045Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:00,046Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,108Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,114Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:00,158Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:00,165Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,165Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,249Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,253Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:00,253Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,255Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:00,265Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,272Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:00,276Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[WARN ] 2019-06-19T09:34:00,277Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:00,279Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,324Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:00,326Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:00,327Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:00,327Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:00,328Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:00,332Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,334Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:00,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:00,340Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:00,365Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:00,395Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:00,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:00,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:00,414Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:00,754Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:00,756Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:00,756Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:00,759Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:00,761Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,761Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,810Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,821Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:00,824Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,825Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,874Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,879Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:00,900Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:00,901Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,901Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,976Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:00,977Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:00,992Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:00,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:00,994Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:00,998Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,003Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:01,005Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[WARN ] 2019-06-19T09:34:01,006Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:01,008Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,054Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:01,056Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:01,056Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:01,060Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,062Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:01,063Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,068Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,069Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,079Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:01,080Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:01,080Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,105Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,132Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:01,147Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,147Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,149Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:01,503Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:01,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:01,504Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:01,506Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:01,508Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,508Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,546Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,556Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:01,557Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,557Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,607Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,612Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:01,630Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:01,631Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,631Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,720Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:01,721Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:01,737Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:01,737Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,744Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,748Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:01,751Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[WARN ] 2019-06-19T09:34:01,753Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:01,755Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,806Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:01,808Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:01,808Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:01,812Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,814Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:01,815Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,820Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,821Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:01,828Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,834Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:01,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:01,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093359.506/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:01,844Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,870Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093359.506/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:01,900Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:01,914Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,914Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:01,917Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:33:59.507Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:02,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:02,243Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093359.506/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:02,243Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:02,245Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:02,246Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,246Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,284Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,295Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:02,297Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,297Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,349Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,354Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:02,376Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:02,377Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,377Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,448Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:02,449Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:02,463Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:02,463Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,465Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,469Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,473Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:02,476Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[WARN ] 2019-06-19T09:34:02,477Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:02,478Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,528Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:02,530Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093359.506/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:02,530Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:02,534Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,535Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936840253) {}
[INFO ] 2019-06-19T09:34:02,536Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,542Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,543Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936840992) {}
[INFO ] 2019-06-19T09:34:02,550Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936841737) {}
[INFO ] 2019-06-19T09:34:02,562Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,568Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,569Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:02,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936842463) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:02,576Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:03,117Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,117Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,131Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,131Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,171Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 24463E4260CD014E8A20CCA0F12D3FBF4F8A6062291CD65A2A8171FC966E2F9A to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,172Z [Mock node 3 thread] corda.flow.call - Generating spend for: 1c983a6d-5800-4411-819a-e2cb16856856 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[WARN ] 2019-06-19T09:34:03,179Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6014D6FF66F63AD4844DBC851606194EDD031C5C7E94CEC674402C14F17078C8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,181Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 1c983a6d-5800-4411-819a-e2cb16856856 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,194Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=39BA4DCFBFECE2BD32495AEF76454099E759764870FA7475A530559FE1A3A250}
[INFO ] 2019-06-19T09:34:03,211Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,276Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,277Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,284Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=1c983a6d-5800-4411-819a-e2cb16856856, invocation_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, invocation_timestamp=2019-06-19T09:34:02.577Z, origin=Only For Testing, session_id=e32e0c4c-44d4-4bf7-9e60-5efbb61d5d24, session_timestamp=2019-06-19T09:34:02.577Z, thread-id=904, tx_id=24D04BF34184128212563A8BEF312AEF4AB36EA93A1B8CF8F8632BFBEAA82123}
[INFO ] 2019-06-19T09:34:03,295Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 24463E4260CD014E8A20CCA0F12D3FBF4F8A6062291CD65A2A8171FC966E2F9A to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=fe1a76f9-23c4-430e-a0bb-a04e2f03be22, invocation_id=3caf0dc4-4d1a-4332-95e6-c1c3458e277e, invocation_timestamp=2019-06-19T09:34:03.291Z, origin=Only For Testing, session_id=3caf0dc4-4d1a-4332-95e6-c1c3458e277e, session_timestamp=2019-06-19T09:34:03.291Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,325Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 95FAB1DC8A01BF61215051AB29745954C9EBA71666A4C8108421CCFF940C6368 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,325Z [Mock node 3 thread] corda.flow.call - Generating spend for: b59adc6e-2d2d-4116-9beb-96f6ecdf4e53 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[WARN ] 2019-06-19T09:34:03,332Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 6014D6FF66F63AD4844DBC851606194EDD031C5C7E94CEC674402C14F17078C8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,333Z [Mock node 3 thread] corda.flow.call - Signing transaction for: b59adc6e-2d2d-4116-9beb-96f6ecdf4e53 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,342Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
[INFO ] 2019-06-19T09:34:03,355Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,400Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {fiber-id=10000015, flow-id=59b87a0f-26ac-4ed2-99ff-6acc407b8cc9, invocation_id=5aaf2d87-2e32-4d10-860e-53ad9dc7208a, invocation_timestamp=2019-06-19T09:34:03.361Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=5aaf2d87-2e32-4d10-860e-53ad9dc7208a, session_timestamp=2019-06-19T09:34:03.361Z, thread-id=924}
[INFO ] 2019-06-19T09:34:03,412Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,413Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,418Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,428Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,472Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,478Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {}
[INFO ] 2019-06-19T09:34:03,492Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,500Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,508Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[WARN ] 2019-06-19T09:34:03,508Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,509Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925, tx_id=AA731F40794BBF8DFF2497E7EA36B353960CF7E1E7533796046BA80A890D6F9D}
[INFO ] 2019-06-19T09:34:03,511Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,511Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,512Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,512Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB6TTqVyvm1rmqiaducRxGNBZXDkqwQTbdqXHpM7s9TYT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=b67f08a2-d1b0-4e35-b64c-1bdf17710335, invocation_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, invocation_timestamp=2019-06-19T09:34:03.308Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60772fce-db69-40a2-bd2d-2a44abe6e1fc, session_timestamp=2019-06-19T09:34:03.308Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,536Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJtFe6nMs4tjBiHWmrBQ9RSMm35cBaNSoqV8eM1bkWjvG {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,537Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,541Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySoYkJM7o6mKstb8ezz4TdKSp4a6DBva6VgosPDXMdM3U {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,555Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=b59adc6e-2d2d-4116-9beb-96f6ecdf4e53, invocation_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, invocation_timestamp=2019-06-19T09:34:03.299Z, origin=Only For Testing, session_id=6b95a88d-7669-45de-bb67-942ec86d1eb6, session_timestamp=2019-06-19T09:34:03.299Z, thread-id=904}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,565Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,567Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-9124130210210132774--4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))]), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@2c6c5e46, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38) {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,569Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,570Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,592Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] errored, dumping all transitions:

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    SignalFlowHasStarted(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-0-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), maySkipCheckpoint=false, fiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), frozenFiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
checkpoint.flowState.frozenFiber.hash: 
    0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-2-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
checkpoint.flowState.frozenFiber.hash: 
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], sessionId=SessionId(toLong=9124130210210132774))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
    81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.552Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=9124130210210132774), initiationEntropy=-4566457154872016394, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-9124130210210132774--4566457154872016394-4-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))])
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-9124130210210132774--4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=9124130210210132774), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774).rejectionError: 
    null
    FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.572Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.575Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[WARN ] 2019-06-19T09:34:03,592Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,594Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[INFO ] 2019-06-19T09:34:03,640Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,640Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@d62cd26, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[INFO ] 2019-06-19T09:34:03,641Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,641Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] errored, dumping all transitions:

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    SignalFlowHasStarted(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], sessionId=SessionId(toLong=1953014859611848863))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.519Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.525Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=1953014859611848863), initiationEntropy=-6406797140790486523, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-1-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), maySkipCheckpoint=false, fiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), frozenFiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
checkpoint.flowState.frozenFiber.hash: 
    0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-2-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), maySkipCheckpoint=false, fiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.flowState.frozenFiber.hash: 
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
    9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ErrorSessionMessage(flowException=null, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).errors: 
    []
    [FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,647Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,649Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] errored, dumping all transitions:

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb])
    SignalFlowHasStarted(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-0-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d6a25cb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.533Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9BB5A35B349A606FA2F08D82F8730BD4A337734A4CD1193023FEF9B02F77A712)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), maySkipCheckpoint=false, fiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}), frozenFiber=9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
checkpoint.flowState.frozenFiber.hash: 
    0BC2D0F1D3D8B1EE66418D7D52FA27548FCC9149D24DDF1047437A02044530FB
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.540Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-1953014859611848863--6406797140790486523-2-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), maySkipCheckpoint=false, fiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))]), frozenFiber=3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
checkpoint.flowState.frozenFiber.hash: 
    9691B91B41B323FA6F9A47BFDADDAE04C7E982FC0AE7AA1D5BBA2AF43198A956
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.542Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.545Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=638980050707302791).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], sessionId=SessionId(toLong=9124130210210132774))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.546Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63, )
  Actions: 
    PersistCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=638980050707302791))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    3C7B266154C1450412F78E4C459815AC37181F6EE342F808354322273C549705
    81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55672de6]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.552Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=9124130210210132774), initiationEntropy=-4566457154872016394, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-9124130210210132774--4566457154872016394-4-0), senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))=7B83DA3A44E9EE12DDFE6170D7D17590BACD9456268D9B97CD2BC5E41DBA9012}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))])
checkpoint.sessions.SessionId(toLong=9124130210210132774): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=9124130210210132774), additionalEntropy=-4566457154872016394)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-9124130210210132774--4566457154872016394)


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=9124130210210132774), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=9124130210210132774).rejectionError: 
    null
    FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.564Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.565Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.572Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.575Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4f15496f-7e76-4772-9ac5-a27d281c5452] ---
  Timestamp: 2019-06-19T09:34:03.643Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8846550760029296164)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523)], senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38)
    CreateTransaction
    RemoveCheckpoint(id=[4f15496f-7e76-4772-9ac5-a27d281c5452])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf])
    ReleaseSoftLocks(uuid=4f15496f-7e76-4772-9ac5-a27d281c5452)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=638980050707302791), SessionId(toLong=9124130210210132774)])
    RemoveFlow(flowId=[4f15496f-7e76-4772-9ac5-a27d281c5452], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Invocation, sessionId=080d3261-edc5-4963-a043-0d795290217c, timestamp: 2019-06-19T09:34:03.528Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=638980050707302791)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=1953014859611848863)), errors=[], deduplicationSeed=D-1953014859611848863--6406797140790486523), SessionId(toLong=9124130210210132774)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-9124130210210132774--4566457154872016394)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=9124130210210132774))]), frozenFiber=81A20D01EB134EF0D45682A40CBE02BBF2C3682BC3E4B4B88DF01F5DA1495E63), errorState=Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@2c6c5e46, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7aef62f0-2180-439d-bd97-b5c8b49a6c38))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5e0adbbf]
    []
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
[WARN ] 2019-06-19T09:34:03,649Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [4f15496f-7e76-4772-9ac5-a27d281c5452] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=4f15496f-7e76-4772-9ac5-a27d281c5452, invocation_id=080d3261-edc5-4963-a043-0d795290217c, invocation_timestamp=2019-06-19T09:34:03.528Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=080d3261-edc5-4963-a043-0d795290217c, session_timestamp=2019-06-19T09:34:03.528Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:34:03,654Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] errored, dumping all transitions:

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59])
    SignalFlowHasStarted(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1e7e0a59]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], sessionId=SessionId(toLong=1953014859611848863))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.514Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.519Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=A9483F821619723BD4509263FE441566D2B9B6905D03D770BECDE4FD49D22F00)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false), frozenFiber=0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.525Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=1953014859611848863), initiationEntropy=-6406797140790486523, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-1-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=DA4E8759BE72809E90CDC898880639C04C78EB2B35BC3D20BC7C5B60B26330B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=1953014859611848863), additionalEntropy=-6406797140790486523)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=638980050707302791), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-1953014859611848863--6406797140790486523)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.535Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), maySkipCheckpoint=false, fiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134}), frozenFiber=17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
checkpoint.flowState.frozenFiber.hash: 
    0A4C6D313C6623876348A99C7A5890E50DA41C5D2337B4B82565B03AF15E1622
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@621951c8, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@70a094e9]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=638980050707302791), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-1953014859611848863--6406797140790486523-2-0), senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.544Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), maySkipCheckpoint=false, fiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83, )
  Actions: 
    PersistCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))=75337E0C793C29E748508A41718550C74415517AC214C8859C1A446DA124A134})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))])
checkpoint.flowState.frozenFiber.hash: 
    17C1D9DC41E46F27050E98CB2E3C9A0B9BEFD466F240BAF119B145A9C55F4F19
    9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.547Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1953014859611848863), payload=ErrorSessionMessage(flowException=null, errorId=8846550760029296164)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1953014859611848863).errors: 
    []
    [FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.639Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.641Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [1b33f154-c5f1-431a-9dad-9805af157ad1] ---
  Timestamp: 2019-06-19T09:34:03.648Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8846550760029296164)], sessions=[], senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc)
    CreateTransaction
    RemoveCheckpoint(id=[1b33f154-c5f1-431a-9dad-9805af157ad1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd])
    ReleaseSoftLocks(uuid=1b33f154-c5f1-431a-9dad-9805af157ad1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1953014859611848863)])
    RemoveFlow(flowId=[1b33f154-c5f1-431a-9dad-9805af157ad1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Invocation, sessionId=80c8904a-69ab-4881-ae2f-97108d6a5293, timestamp: 2019-06-19T09:34:03.478Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=1953014859611848863)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=638980050707302791)), errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-1953014859611848863--6406797140790486523)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=1953014859611848863))]), frozenFiber=9850E45B698538145DDFF05CFBA26019AC9D89719E82A133A6EF3153CC6DCB83), errorState=Errored(errors=[FlowError(errorId=8846550760029296164, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@d62cd26, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0da360ce-10c1-4625-96b6-17789a6267fc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c433fd]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
[WARN ] 2019-06-19T09:34:03,654Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [1b33f154-c5f1-431a-9dad-9805af157ad1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=1b33f154-c5f1-431a-9dad-9805af157ad1, invocation_id=80c8904a-69ab-4881-ae2f-97108d6a5293, invocation_timestamp=2019-06-19T09:34:03.478Z, origin=Only For Testing, session_id=80c8904a-69ab-4881-ae2f-97108d6a5293, session_timestamp=2019-06-19T09:34:03.478Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:34:03,718Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:34:03,718Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:03,719Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:03,748Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:03,780Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:03,785Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:03,785Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:03,791Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:04,165Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:04,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:04,167Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:04,170Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:04,172Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,172Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,219Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,231Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:04,233Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,233Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,291Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,298Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:04,352Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:04,363Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,364Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,473Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,477Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:04,477Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,479Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:04,490Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,497Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:04,499Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[WARN ] 2019-06-19T09:34:04,501Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:04,502Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,551Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:04,553Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:04,553Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:04,554Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:04,554Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:04,558Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:04,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:04,565Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:04,566Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:04,566Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:04,589Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:04,617Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:04,630Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:04,631Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:04,632Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:04,962Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:04,964Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:04,964Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:04,966Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:04,968Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:04,968Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,008Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,018Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:05,020Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,020Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,068Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,074Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:05,093Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:05,094Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,094Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,164Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,165Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:05,178Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:05,178Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,180Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,183Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,187Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:05,189Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[WARN ] 2019-06-19T09:34:05,190Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:05,192Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,237Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:05,238Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:05,239Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:05,242Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:05,245Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,249Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,250Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:05,260Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,284Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,312Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:05,326Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:05,326Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:05,328Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:05,636Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:05,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:05,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:05,640Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:05,641Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,642Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,692Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,702Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:05,703Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,704Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,753Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,757Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:05,778Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:05,778Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,779Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,857Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:05,858Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:05,874Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:05,874Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,875Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,879Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,883Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:05,885Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[WARN ] 2019-06-19T09:34:05,887Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:05,888Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,932Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:05,934Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:05,935Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:05,938Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,940Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:05,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,947Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,948Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,952Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:05,953Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,957Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,958Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:05,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:05,970Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093403.663/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:05,971Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:05,971Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:05,996Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093403.663/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,027Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:06,041Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,042Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,044Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:03.663Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:06,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:06,343Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093403.663/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:06,343Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:06,345Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:06,347Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,347Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,388Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,398Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:06,399Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,399Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,444Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,449Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:06,469Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:06,469Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,470Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,540Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:06,541Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:06,555Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:06,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,560Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,564Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:34:06,566Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:06,567Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,569Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,614Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:06,616Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093403.663/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:06,616Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:06,619Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,621Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936844477) {}
[INFO ] 2019-06-19T09:34:06,622Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,626Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,627Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936845178) {}
[INFO ] 2019-06-19T09:34:06,633Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,638Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,638Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,644Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936845874) {}
[INFO ] 2019-06-19T09:34:06,644Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,648Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,649Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936846555) {}
[INFO ] 2019-06-19T09:34:06,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:06,657Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:06,695Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 887E45380E19833C1765C80523ACC51101E2BF99B1488D0D887C8FCC554483D7 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000018, flow-id=de03344a-9a5c-434a-b161-49acf3337fbb, invocation_id=a7092bac-d68b-48ae-bb3d-855f5963b6c1, invocation_timestamp=2019-06-19T09:34:06.658Z, origin=Only For Testing, session_id=a7092bac-d68b-48ae-bb3d-855f5963b6c1, session_timestamp=2019-06-19T09:34:06.658Z, thread-id=1201}
[INFO ] 2019-06-19T09:34:06,759Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:34:06,760Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:06,760Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,784Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:06,812Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:06,815Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,816Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:06,820Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:07,165Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:07,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:07,166Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:07,169Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:07,170Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,170Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,215Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,228Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:07,229Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,230Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,291Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:07,333Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:07,338Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,338Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,411Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,415Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:07,415Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,416Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:07,425Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,431Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:07,434Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[WARN ] 2019-06-19T09:34:07,435Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:34:07,438Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,482Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:07,483Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:34:07,483Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:34:07,484Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:07,484Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:07,488Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,490Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:07,490Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:07,495Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:34:07,496Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:07,496Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:07,521Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:07,551Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:07,573Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:07,574Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:07,577Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:07,883Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:07,884Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:07,884Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:07,886Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:07,887Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,887Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,923Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,933Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:07,934Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,934Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:07,985Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:08,003Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:08,004Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,004Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,070Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:08,084Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:08,084Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,085Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,089Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,092Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:08,094Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[WARN ] 2019-06-19T09:34:08,096Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:34:08,097Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,141Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:08,143Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:08,143Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:08,146Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,148Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:08,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,153Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,162Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:34:08,163Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:08,163Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,187Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,215Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:08,227Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,227Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,229Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:08,517Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:08,518Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:08,518Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:08,520Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:08,521Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,522Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,558Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,567Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:08,568Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,568Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,613Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,618Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:08,640Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:08,641Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,641Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,708Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:08,708Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:08,722Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:08,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,723Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,727Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,731Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:34:08,733Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[WARN ] 2019-06-19T09:34:08,734Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:34:08,736Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,780Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:08,781Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:08,782Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:08,785Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,787Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:08,788Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,793Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,794Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,799Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:08,801Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,805Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,806Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:08,810Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:08,811Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093406.715/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:34:08,816Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,840Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093406.715/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:34:08,868Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:34:08,881Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,881Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:34:08,883Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:34:06.716Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:34:09,240Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:34:09,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093406.715/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:34:09,241Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:34:09,244Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:34:09,245Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,245Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,285Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,296Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:34:09,298Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,298Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,353Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,358Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:34:09,385Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:34:09,386Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,386Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,459Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:34:09,460Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:34:09,473Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:34:09,473Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,478Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,481Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:34:09,484Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:34:09,484Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,488Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,531Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:34:09,533Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093406.715/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:34:09,533Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:34:09,537Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936847415) {}
[INFO ] 2019-06-19T09:34:09,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,545Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,546Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,550Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936848084) {}
[INFO ] 2019-06-19T09:34:09,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,555Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,556Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936848722) {}
[INFO ] 2019-06-19T09:34:09,561Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,566Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,567Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936849473) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:09,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:34:10,099Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,099Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,114Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,114Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,145Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: F871FBFCFB4029C215878410310A5EA4F2305EDB0323DE6FC80498B8F8D3C791 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,145Z [Mock node 3 thread] corda.flow.call - Generating spend for: 7c54a146-ef44-4635-8b25-22f08ed63373 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[WARN ] 2019-06-19T09:34:10,153Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key F6241EB9C1F761FEFA5619B2E9A2AFBB55A09A3BF2174D6F7949E386A855EA14, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,154Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 7c54a146-ef44-4635-8b25-22f08ed63373 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,167Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=FC739EE2E1AAA3461215E78780AE726759B2806687321ACC26BEA9233DF710A9}
[INFO ] 2019-06-19T09:34:10,179Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,236Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,237Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,242Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,249Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,267Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,268Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,268Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=7c54a146-ef44-4635-8b25-22f08ed63373, invocation_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, invocation_timestamp=2019-06-19T09:34:09.573Z, origin=Only For Testing, session_id=b06aa4f4-795d-4d2a-a6fd-808a0d709aca, session_timestamp=2019-06-19T09:34:09.573Z, thread-id=1477, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,272Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,274Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {}
[INFO ] 2019-06-19T09:34:10,277Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,284Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[WARN ] 2019-06-19T09:34:10,284Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,285Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497, tx_id=5EF07C94B55D5EBFCCAD5D9BBDC2C9AE2477EC36C9971E93D49FA82E9C5DF0DB}
[INFO ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[WARN ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[INFO ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVSkgWAXnJZVnUsWks8ZRMxCptRep2oH1DdbP7aw1kXKx {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[WARN ] 2019-06-19T09:34:10,287Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHipvD1ZF1SoYKQGrN6pvJsrJfyqDoR1qtNYqbkFHjWwr) {fiber-id=10000021, flow-id=952a9146-329c-490a-99a6-a0fc6baa91ed, invocation_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, invocation_timestamp=2019-06-19T09:34:10.125Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=e75c77c5-f5f3-4e8c-9bde-ae1e48091d35, session_timestamp=2019-06-19T09:34:10.125Z, thread-id=1497}
[INFO ] 2019-06-19T09:34:10,308Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: F871FBFCFB4029C215878410310A5EA4F2305EDB0323DE6FC80498B8F8D3C791 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000023, flow-id=3edf088e-2e38-4943-af62-d9d39ac59f49, invocation_id=c2488053-81da-4ba0-9163-a292e899ada8, invocation_timestamp=2019-06-19T09:34:10.274Z, origin=Only For Testing, session_id=c2488053-81da-4ba0-9163-a292e899ada8, session_timestamp=2019-06-19T09:34:10.274Z, thread-id=1497}
[INFO ] 2019-06-19T09:35:31,578Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093526.005/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:35:31,602Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:31,635Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:31,770Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:32,700Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:32,767Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:32,768Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:32,938Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:26.005Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:37,118Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:37,123Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093526.005/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:37,123Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:37,130Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:37,218Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:37,224Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:38,937Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:39,527Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:39,531Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:39,531Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:39,768Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:39,835Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:39,928Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:39,947Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:39,948Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:40,220Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:40,231Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:40,232Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:40,236Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:40,383Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:40,439Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:40,456Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[WARN ] 2019-06-19T09:35:40,466Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:35:40,483Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:40,545Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:40,549Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:35:40,552Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:35:40,580Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093526.005/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:40,626Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:40,930Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:40,955Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:40,956Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:40,956Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:40,956Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:40,964Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093526.005/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:35:40,965Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:40,965Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:40,996Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:41,030Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:41,057Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:41,057Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:41,061Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:26.005Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:41,676Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:41,679Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093526.005/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:41,679Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:41,683Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:41,685Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,685Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,747Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,765Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:41,767Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,768Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,850Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,860Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:41,899Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:41,902Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:41,902Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,035Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,036Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:42,055Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:42,056Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,057Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:42,064Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,073Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:42,076Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[WARN ] 2019-06-19T09:35:42,079Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:35:42,081Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:42,140Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:42,141Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093526.005/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:42,142Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:42,149Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:42,154Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:42,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,167Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:42,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:42,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:42,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:42,183Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093526.005/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:35:42,183Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:42,183Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:42,211Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:42,240Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:42,259Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:42,259Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:42,262Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:26.005Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:42,704Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:42,706Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093526.005/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:42,707Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:42,710Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:42,714Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,714Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,765Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,782Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:42,784Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,784Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,853Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,860Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:42,890Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:42,891Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,892Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,992Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:42,994Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:43,011Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:43,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,013Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,020Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,029Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:43,032Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[WARN ] 2019-06-19T09:35:43,035Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:35:43,036Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:43,091Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:43,094Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093526.005/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:43,094Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:43,100Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,103Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:43,105Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,113Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,114Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,123Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:43,125Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,135Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:43,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:43,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:43,151Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093526.005/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:35:43,152Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:43,152Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:43,179Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093526.005/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:43,210Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:43,229Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:43,230Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:43,235Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:26.005Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:43,658Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:43,660Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093526.005/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:43,660Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:43,663Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:43,665Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,665Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,718Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,730Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:43,733Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,733Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,805Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,814Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:43,849Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:43,850Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,851Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,959Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:43,960Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:43,979Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:43,979Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:43,981Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:43,989Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:43,995Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:43,998Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[WARN ] 2019-06-19T09:35:44,001Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:35:44,003Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:44,082Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:44,084Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093526.005/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:44,085Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:44,091Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936940231) {}
[INFO ] 2019-06-19T09:35:44,096Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,106Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,116Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936942055) {}
[INFO ] 2019-06-19T09:35:44,117Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,126Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,135Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936943011) {}
[INFO ] 2019-06-19T09:35:44,136Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,144Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,145Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:44,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:44,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936943979) {}
[INFO ] 2019-06-19T09:35:44,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:44,159Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:35:44,163Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:35:44,166Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:35:44,166Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:35:44,576Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 7501EE1E662C4CFA4E81DD0D523651614B4954E5635E522FE2D036F306299822 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=6de3b101-70b3-40d6-833c-d9cb338de3cd, invocation_id=e8b07ed2-ad80-4c93-8c2b-04e8f6e1d35d, invocation_timestamp=2019-06-19T09:35:44.193Z, origin=Only For Testing, session_id=e8b07ed2-ad80-4c93-8c2b-04e8f6e1d35d, session_timestamp=2019-06-19T09:35:44.193Z, thread-id=331}
[INFO ] 2019-06-19T09:35:44,889Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093544.824/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:35:44,889Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:44,890Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:44,916Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:44,947Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:44,951Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:44,951Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:44,956Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:44.824Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:45,366Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:45,367Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093544.824/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:45,368Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:45,371Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:45,374Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,374Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,423Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,436Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:45,438Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,438Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,500Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,507Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:45,554Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:45,560Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,560Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,660Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:35:45,666Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:45,666Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:45,668Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:45,682Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:45,690Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:45,693Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[WARN ] 2019-06-19T09:35:45,696Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:35:45,699Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:45,748Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:45,749Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:35:45,749Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:35:45,750Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093544.824/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:45,750Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:45,756Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:45,758Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:45,759Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:45,759Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:45,759Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:45,764Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093544.824/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:35:45,764Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:45,764Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:45,791Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:45,824Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:45,848Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:45,849Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:45,852Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:44.824Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:46,245Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:46,247Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093544.824/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:46,248Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:46,250Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:46,253Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,253Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,301Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,313Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:46,315Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,315Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,383Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:46,455Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:46,456Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,457Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,543Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:46,544Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:46,559Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:46,559Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,561Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:46,566Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,573Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:46,576Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[WARN ] 2019-06-19T09:35:46,578Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:35:46,582Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:46,629Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:46,631Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093544.824/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:46,631Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:46,637Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,639Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:46,641Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:46,648Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,649Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:46,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:46,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:46,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:46,662Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093544.824/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:35:46,662Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:46,662Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:46,688Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:46,717Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:46,732Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:46,733Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:46,735Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:44.824Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:47,098Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:47,099Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093544.824/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:47,100Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:47,102Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:47,104Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,104Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,145Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,157Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:47,159Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,215Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,221Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:47,246Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:47,247Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,248Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,331Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,332Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:47,348Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:47,348Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,349Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:47,354Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,361Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:47,364Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[WARN ] 2019-06-19T09:35:47,366Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:35:47,368Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:47,418Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:47,420Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093544.824/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:47,420Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:47,424Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,427Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:47,428Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:47,435Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,436Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:47,442Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:47,443Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:47,449Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,450Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:47,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:47,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:47,456Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:47,461Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093544.824/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:35:47,461Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:35:47,461Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:47,486Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093544.824/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:35:47,517Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:35:47,533Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:35:47,533Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:35:47,537Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:35:44.824Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:35:47,903Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:35:47,904Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093544.824/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:35:47,905Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:35:47,907Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:35:47,909Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,909Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,951Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,965Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:35:47,968Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:47,968Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:48,028Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:48,034Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:35:48,057Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:35:48,059Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:48,059Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:48,139Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:35:48,140Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:35:48,155Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:35:48,155Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,157Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,162Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,167Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:35:48,169Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[WARN ] 2019-06-19T09:35:48,171Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:35:48,173Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:48,221Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:35:48,223Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093544.824/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:35:48,223Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:35:48,227Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,230Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560936945666) {}
[INFO ] 2019-06-19T09:35:48,231Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,237Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,238Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560936946559) {}
[INFO ] 2019-06-19T09:35:48,245Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,252Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,258Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560936947348) {}
[INFO ] 2019-06-19T09:35:48,259Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,268Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:35:48,273Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,273Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560936948155) {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:35:48,274Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:35:48,341Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607}
[WARN ] 2019-06-19T09:35:48,341Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607}
[INFO ] 2019-06-19T09:35:49,396Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,396Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,472Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,472Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,536Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: FA0D6E7E1950E39B2524EDF68CD9F77F4C50CA06D2C36ECFAC3B271BA445DE76 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,537Z [Mock node 3 thread] corda.flow.call - Generating spend for: 565b764c-39bc-4e6c-9292-8cb83b0420d4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[WARN ] 2019-06-19T09:35:49,580Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key DB18C73CB7DB31FD4BB478814C8492622E2769E3D4927CDB50D13906FE1AB362, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,584Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 565b764c-39bc-4e6c-9292-8cb83b0420d4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,952Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=1C9A42F983A2977F42BAD7A216AE371513CC6AE9E2ABA025F17DFA8FAE4E1CDF}
[INFO ] 2019-06-19T09:35:49,986Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,165Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,166Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,205Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,218Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,244Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,244Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,244Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000003, flow-id=565b764c-39bc-4e6c-9292-8cb83b0420d4, invocation_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, invocation_timestamp=2019-06-19T09:35:48.282Z, origin=Only For Testing, session_id=26b4cf02-fcb3-4411-bc87-47699e30c35d, session_timestamp=2019-06-19T09:35:48.282Z, thread-id=607, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,251Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,259Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,261Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVLQAGmy3ShcRAd1eJt9ijKwHzZhVJzcBpYHN7wiqaSLS {}
[INFO ] 2019-06-19T09:35:50,268Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVLQAGmy3ShcRAd1eJt9ijKwHzZhVJzcBpYHN7wiqaSLS {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[WARN ] 2019-06-19T09:35:50,268Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHq6obizty2x5sYCxVYpB7WHsZiQbahjvgAWQCsYnqMNu) {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,270Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627, tx_id=C28B455456B023DA21E38E4DFFDA3E9BC6CA5DDD3F8BC304548E7246346F45E7}
[INFO ] 2019-06-19T09:35:50,273Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVLQAGmy3ShcRAd1eJt9ijKwHzZhVJzcBpYHN7wiqaSLS {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627}
[WARN ] 2019-06-19T09:35:50,273Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHq6obizty2x5sYCxVYpB7WHsZiQbahjvgAWQCsYnqMNu) {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627}
[INFO ] 2019-06-19T09:35:50,273Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVLQAGmy3ShcRAd1eJt9ijKwHzZhVJzcBpYHN7wiqaSLS {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627}
[WARN ] 2019-06-19T09:35:50,273Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHq6obizty2x5sYCxVYpB7WHsZiQbahjvgAWQCsYnqMNu) {fiber-id=10000004, flow-id=bb954d28-97ea-4541-ab90-35b085703f00, invocation_id=a207c089-0305-494d-9bd5-166d1accad0a, invocation_timestamp=2019-06-19T09:35:49.502Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=a207c089-0305-494d-9bd5-166d1accad0a, session_timestamp=2019-06-19T09:35:49.502Z, thread-id=627}
[INFO ] 2019-06-19T09:35:50,302Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: FA0D6E7E1950E39B2524EDF68CD9F77F4C50CA06D2C36ECFAC3B271BA445DE76 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000006, flow-id=a3ae3da5-71d6-4ff3-8033-3340bf4b42a9, invocation_id=17fd6706-34f9-4721-a415-9a79f33d82ef, invocation_timestamp=2019-06-19T09:35:50.271Z, origin=Only For Testing, session_id=17fd6706-34f9-4721-a415-9a79f33d82ef, session_timestamp=2019-06-19T09:35:50.271Z, thread-id=627}
[INFO ] 2019-06-19T09:38:56,797Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093850.194/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:38:56,820Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:38:56,855Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:38:56,994Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:38:57,969Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:38:58,041Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:38:58,042Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:38:58,210Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:38:50.194Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:39:02,379Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:39:02,383Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093850.194/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:39:02,383Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:39:02,388Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:39:02,465Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:02,471Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:04,227Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:04,819Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:39:04,823Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:04,823Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:05,060Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:05,128Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:39:05,202Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:39:05,218Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:39:05,219Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:39:05,467Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:39:05,477Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:39:05,477Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:05,482Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:05,626Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:05,687Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:39:05,707Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[WARN ] 2019-06-19T09:39:05,719Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:39:05,736Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:05,805Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:39:05,812Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:39:05,816Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:39:05,845Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093850.194/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:39:05,900Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:39:06,238Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:06,263Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:06,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:06,264Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:06,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:06,272Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093850.194/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:39:06,272Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:39:06,273Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:06,304Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:06,343Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:39:06,368Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:39:06,368Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:39:06,393Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:38:50.194Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:39:06,899Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:39:06,901Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093850.194/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:39:06,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:39:06,905Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:39:06,907Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:06,907Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:06,967Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:06,983Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:39:06,985Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:06,986Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,058Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,068Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:39:07,103Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:39:07,105Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,106Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,222Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,223Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:39:07,244Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:39:07,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,246Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:07,254Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,262Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:39:07,266Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[WARN ] 2019-06-19T09:39:07,268Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:39:07,272Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:07,324Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:39:07,326Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093850.194/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:39:07,326Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:39:07,333Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,336Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:07,337Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:07,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,348Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:07,358Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,358Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:07,358Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:07,358Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:07,363Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093850.194/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:39:07,363Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:39:07,364Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:07,390Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:07,421Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:39:07,442Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:39:07,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:39:07,446Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:38:50.194Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:39:07,908Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:39:07,910Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093850.194/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:39:07,910Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:39:07,913Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:39:07,917Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,917Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,970Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,985Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:39:07,987Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:07,987Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,066Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,075Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:39:08,110Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:39:08,111Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,111Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,215Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,216Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:39:08,233Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:39:08,233Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,234Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:08,241Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,250Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:39:08,253Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[WARN ] 2019-06-19T09:39:08,255Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:39:08,258Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:08,316Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:39:08,318Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093850.194/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:39:08,319Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:39:08,325Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:08,330Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:08,340Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,341Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:08,351Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:08,353Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:08,364Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,365Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:08,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:08,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:08,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:08,380Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-093850.194/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:39:08,380Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:39:08,381Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:08,410Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-093850.194/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:39:08,444Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:39:08,465Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:39:08,465Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:39:08,470Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:38:50.194Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:39:08,913Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:39:08,915Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-093850.194/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:39:08,915Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:39:08,918Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:39:08,920Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,920Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,969Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,983Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:39:08,985Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:08,985Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:09,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:09,054Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:39:09,083Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:39:09,084Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:09,085Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:09,183Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:39:09,185Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:39:09,202Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:39:09,202Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,204Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,210Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,216Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:39:09,219Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[WARN ] 2019-06-19T09:39:09,220Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:39:09,224Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:09,274Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:39:09,277Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-093850.194/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:39:09,277Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:39:09,283Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,286Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937145477) {}
[INFO ] 2019-06-19T09:39:09,287Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,295Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,296Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,305Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937147244) {}
[INFO ] 2019-06-19T09:39:09,306Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,315Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937148233) {}
[INFO ] 2019-06-19T09:39:09,325Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,336Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:39:09,345Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,345Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:09,345Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937149202) {}
[INFO ] 2019-06-19T09:39:09,345Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:39:09,350Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:39:09,354Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:39:09,354Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:39:09,854Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyUriqvywKqFe8oq79dsyxvMTofiovtBpoJcRhpnxEudZJ {}
[INFO ] 2019-06-19T09:40:41,624Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094034.099/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:40:41,651Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:40:41,688Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:41,836Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:42,901Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:40:42,985Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:40:42,986Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:40:43,196Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:40:34.099Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:40:48,317Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:40:48,321Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094034.099/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:40:48,322Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:40:48,326Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:40:48,398Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:48,403Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:50,514Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:51,313Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:40:51,318Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:51,318Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:51,592Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:51,682Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:40:51,771Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:40:51,795Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:40:51,795Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:40:52,130Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:40:52,141Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:40:52,141Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:52,146Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:52,306Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:52,366Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:40:52,387Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[WARN ] 2019-06-19T09:40:52,400Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:40:52,419Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:52,490Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:40:52,499Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:40:52,503Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:40:52,543Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094034.099/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:40:52,599Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:40:52,982Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:53,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:53,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:53,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:53,014Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:53,022Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094034.099/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:40:53,023Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:40:53,023Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:53,059Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:53,101Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:40:53,146Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:40:53,146Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:40:53,150Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:40:34.099Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:40:53,761Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:40:53,763Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094034.099/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:40:53,763Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:40:53,767Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:40:53,769Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,769Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,852Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,871Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:40:53,874Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,874Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,961Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:53,971Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:40:54,009Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:40:54,012Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:54,012Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:54,142Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:54,144Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:40:54,165Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:40:54,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,167Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:54,174Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,183Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:40:54,186Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[WARN ] 2019-06-19T09:40:54,189Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:40:54,191Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:54,247Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:40:54,249Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094034.099/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:40:54,249Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:40:54,256Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,288Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:54,290Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:54,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:54,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:54,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:54,315Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:54,320Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094034.099/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:40:54,321Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:40:54,321Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:54,374Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:54,409Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:40:54,429Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:40:54,429Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:40:54,433Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:40:34.099Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:40:54,930Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:40:54,933Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094034.099/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:40:54,933Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:40:54,937Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:40:54,941Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:54,941Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,009Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,026Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:40:55,029Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,029Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,113Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,121Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:40:55,157Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:40:55,159Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,286Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:55,288Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:40:55,310Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:40:55,310Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,312Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:55,320Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,332Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:40:55,335Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[WARN ] 2019-06-19T09:40:55,338Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:40:55,342Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:55,403Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:40:55,405Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094034.099/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:40:55,406Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:40:55,413Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,416Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:55,418Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:55,427Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,429Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:55,445Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:55,447Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:55,461Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,463Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:55,475Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,475Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:55,476Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:55,476Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:55,483Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094034.099/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:40:55,483Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:40:55,484Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:55,513Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094034.099/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:40:55,550Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:40:55,573Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:40:55,573Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:40:55,579Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:40:34.099Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:40:56,060Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:40:56,062Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094034.099/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:40:56,062Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:40:56,065Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:40:56,067Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,067Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,122Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,138Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:40:56,141Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,142Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,221Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,230Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:40:56,267Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:40:56,268Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,268Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,380Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:40:56,381Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:40:56,399Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:40:56,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,401Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,407Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,413Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:40:56,416Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[WARN ] 2019-06-19T09:40:56,418Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:40:56,422Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:56,476Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:40:56,479Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094034.099/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:40:56,480Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:40:56,490Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,495Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937252141) {}
[INFO ] 2019-06-19T09:40:56,498Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,509Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,511Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,524Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937254165) {}
[INFO ] 2019-06-19T09:40:56,526Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,538Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,549Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937255310) {}
[INFO ] 2019-06-19T09:40:56,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,562Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,564Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:40:56,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:56,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937256399) {}
[INFO ] 2019-06-19T09:40:56,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:40:56,582Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:40:56,587Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:40:56,587Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:41:35,025Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyGMypWVvUZEzsNPe8N949sm4YQJW5sTohXgRAN5G7oFmH {}
[INFO ] 2019-06-19T09:41:53,382Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094146.588/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:41:53,407Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:41:53,441Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:41:53,582Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:41:54,754Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:41:54,890Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:41:54,892Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:41:55,087Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:41:46.588Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:41:59,978Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:41:59,983Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094146.588/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:41:59,983Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:41:59,987Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:42:00,056Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:00,062Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:02,054Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:02,796Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:42:02,801Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:02,801Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:03,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:03,147Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:42:03,236Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:42:03,255Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:42:03,255Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:42:03,549Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:42:03,562Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:42:03,562Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:03,568Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:03,791Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:03,857Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:42:03,879Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[WARN ] 2019-06-19T09:42:03,894Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:42:03,911Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:03,984Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:42:03,991Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:42:03,995Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:42:04,027Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094146.588/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:42:04,090Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:42:04,485Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:04,513Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:04,515Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:04,515Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:04,515Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:04,522Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094146.588/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:42:04,522Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:42:04,523Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:04,560Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:04,602Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:42:04,632Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:42:04,632Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:42:04,637Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:41:46.588Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:42:05,285Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:42:05,288Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094146.588/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:42:05,289Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:42:05,293Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:42:05,297Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,297Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,370Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,388Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:42:05,390Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,390Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,511Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,547Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:42:05,580Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:42:05,583Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,583Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,706Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:05,708Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:42:05,730Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:42:05,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,732Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:05,741Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,751Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:42:05,755Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[WARN ] 2019-06-19T09:42:05,757Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:42:05,761Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:05,826Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:42:05,828Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094146.588/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:42:05,829Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:42:05,837Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:05,843Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:05,854Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,855Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:05,866Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,866Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:05,866Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:05,866Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:05,871Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094146.588/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:42:05,872Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:42:05,872Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:05,902Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:05,936Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:42:05,960Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:42:05,960Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:42:05,964Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:41:46.588Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:42:06,481Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:42:06,483Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094146.588/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:42:06,483Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:42:06,486Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:42:06,489Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,490Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,548Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,566Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:42:06,568Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,568Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,649Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,657Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:42:06,689Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:42:06,691Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,691Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,829Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:06,831Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:42:06,854Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:42:06,854Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:06,857Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:06,865Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:06,875Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:42:06,878Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[WARN ] 2019-06-19T09:42:06,882Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:42:06,884Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:06,947Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:42:06,950Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094146.588/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:42:06,950Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:42:06,958Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:06,961Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:06,963Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:06,974Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:06,975Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:06,986Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:06,987Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:06,999Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:07,000Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:07,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:07,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:07,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:07,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:07,016Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094146.588/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:42:07,017Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:42:07,017Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:07,048Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094146.588/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:42:07,084Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:42:07,108Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:42:07,109Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:42:07,115Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:41:46.588Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:42:07,611Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:42:07,614Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094146.588/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:42:07,614Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:42:07,617Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:42:07,620Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,621Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,686Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,703Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:42:07,707Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,707Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,782Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,791Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:42:07,826Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:42:07,828Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,828Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,960Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:42:07,962Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:42:07,985Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:42:07,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:07,988Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:07,997Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,005Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:42:08,008Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[WARN ] 2019-06-19T09:42:08,011Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:42:08,015Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:08,077Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:42:08,079Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094146.588/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:42:08,080Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:42:08,087Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,092Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937323562) {}
[INFO ] 2019-06-19T09:42:08,094Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,107Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,118Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937325730) {}
[INFO ] 2019-06-19T09:42:08,120Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,131Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,141Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937326854) {}
[INFO ] 2019-06-19T09:42:08,142Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,154Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:42:08,164Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,164Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:08,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937327985) {}
[INFO ] 2019-06-19T09:42:08,165Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:42:08,172Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:42:08,177Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:42:08,177Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:42:13,197Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJEhMMt54uD7rcTv3gXjw4Y3c5gk8cG9qS84BxFkHYWbk {}
[INFO ] 2019-06-19T09:43:40,216Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094333.646/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:43:40,241Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:43:40,277Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:40,425Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:41,596Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:43:41,700Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:43:41,701Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:43:41,892Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:43:33.646Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:43:46,727Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:43:46,731Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094333.646/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:43:46,731Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:43:46,736Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:43:46,803Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:46,808Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:48,804Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:49,511Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:43:49,515Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:49,515Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:49,771Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:49,852Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:43:49,943Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:43:49,966Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:43:49,966Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:43:50,244Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:43:50,254Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:43:50,254Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:50,260Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:50,453Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:50,521Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:43:50,544Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[WARN ] 2019-06-19T09:43:50,560Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:43:50,579Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:50,649Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:43:50,654Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:43:50,658Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:43:50,690Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094333.646/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:43:50,750Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:43:51,194Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:51,221Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:51,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:51,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:51,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:51,231Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094333.646/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:43:51,231Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:43:51,231Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:51,267Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:51,309Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:43:51,367Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:43:51,367Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:43:51,371Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:43:33.646Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:43:52,028Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:43:52,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094333.646/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:43:52,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:43:52,036Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:43:52,040Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,040Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,144Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,165Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:43:52,167Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,168Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,283Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,296Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:43:52,331Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:43:52,333Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,334Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,474Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:52,475Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:43:52,503Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:43:52,503Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,506Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:52,514Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,523Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:43:52,527Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[WARN ] 2019-06-19T09:43:52,528Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:43:52,532Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:52,589Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:43:52,592Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094333.646/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:43:52,592Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:43:52,600Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,604Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:52,606Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:52,615Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,617Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:52,626Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,626Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:52,627Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:52,627Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:52,632Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094333.646/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:43:52,632Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:43:52,633Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:52,664Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:52,699Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:43:52,723Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:43:52,724Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:43:52,728Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:43:33.646Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:43:53,186Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:43:53,189Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094333.646/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:43:53,189Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:43:53,192Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:43:53,194Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,195Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,253Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,270Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:43:53,272Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,272Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,342Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,350Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:43:53,381Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:43:53,382Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,382Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,503Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:53,505Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:43:53,525Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:43:53,525Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,527Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:53,535Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,545Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:43:53,548Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[WARN ] 2019-06-19T09:43:53,551Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:43:53,554Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:53,617Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:43:53,620Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094333.646/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:43:53,620Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:43:53,628Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:53,633Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:53,644Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,646Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:53,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:53,658Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:53,669Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,671Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:53,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:53,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:53,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:53,687Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094333.646/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:43:53,688Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:43:53,688Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:53,717Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094333.646/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:43:53,753Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:43:53,774Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:43:53,774Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:43:53,779Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:43:33.646Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:43:54,285Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:43:54,287Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094333.646/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:43:54,287Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:43:54,290Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:43:54,292Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,293Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,349Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,394Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:43:54,396Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,396Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,471Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,479Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:43:54,511Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:43:54,512Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,512Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,625Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:43:54,627Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:43:54,646Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:43:54,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,649Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,656Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,662Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:43:54,665Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[WARN ] 2019-06-19T09:43:54,668Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:43:54,671Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:54,729Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:43:54,731Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094333.646/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:43:54,732Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:43:54,738Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,742Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937430254) {}
[INFO ] 2019-06-19T09:43:54,743Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,753Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,754Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937432503) {}
[INFO ] 2019-06-19T09:43:54,766Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,775Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,776Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,785Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937433525) {}
[INFO ] 2019-06-19T09:43:54,786Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,795Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,797Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:43:54,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:54,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937434646) {}
[INFO ] 2019-06-19T09:43:54,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:43:54,814Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:43:54,817Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:43:54,818Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:44:37,706Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094430.791/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:44:37,730Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:44:37,768Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:37,922Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:39,217Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:44:39,344Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:44:39,345Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:44:39,556Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:44:30.792Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:44:44,971Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:44:44,975Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094430.791/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:44:44,975Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:44:44,979Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:44:45,050Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:45,056Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:46,914Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:47,583Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:44:47,588Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:47,588Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:47,838Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:47,911Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:44:47,991Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:44:48,008Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:44:48,008Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:44:48,262Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:44:48,273Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:44:48,273Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:48,278Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:48,484Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:48,547Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:44:48,569Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[WARN ] 2019-06-19T09:44:48,583Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:44:48,601Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:48,672Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:44:48,677Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:44:48,681Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:44:48,712Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094430.791/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:44:48,770Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:44:49,124Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:49,150Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:49,151Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:49,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:49,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:49,159Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094430.791/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:44:49,160Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:44:49,160Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:49,190Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:49,226Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:44:49,276Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:44:49,276Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:44:49,280Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:44:30.792Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:44:49,857Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:44:49,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094430.791/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:44:49,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:44:49,865Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:44:49,869Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:49,869Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:49,938Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:49,956Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:44:49,958Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:49,958Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,039Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,049Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:44:50,081Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:44:50,083Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,084Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,216Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,218Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:44:50,241Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:44:50,241Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,245Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:50,253Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,261Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:44:50,265Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[WARN ] 2019-06-19T09:44:50,267Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:44:50,272Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:50,330Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:44:50,332Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094430.791/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:44:50,333Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:44:50,339Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,342Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:50,344Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:50,354Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,355Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:50,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:50,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:50,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:50,371Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094430.791/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:44:50,372Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:44:50,372Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:50,404Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:50,438Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:44:50,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:44:50,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:44:50,464Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:44:30.792Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:44:50,900Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:44:50,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094430.791/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:44:50,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:44:50,905Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:44:50,908Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,908Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,964Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,979Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:44:50,981Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:50,982Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:51,058Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:51,065Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:44:51,093Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:44:51,095Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:51,095Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:51,199Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:51,200Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:44:51,218Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:44:51,218Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,220Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:51,229Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,237Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:44:51,240Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[WARN ] 2019-06-19T09:44:51,243Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:44:51,246Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:51,305Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:44:51,307Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094430.791/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:44:51,307Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:44:51,314Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,317Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:51,319Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:51,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,329Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:51,338Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:51,339Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:51,349Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,350Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:51,360Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:51,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:51,361Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:51,366Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094430.791/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:44:51,366Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:44:51,367Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:51,396Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094430.791/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:44:51,432Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:44:51,453Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:44:51,453Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:44:51,459Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:44:30.792Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:44:52,020Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:44:52,023Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094430.791/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:44:52,023Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:44:52,027Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:44:52,029Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,029Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,085Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,101Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:44:52,104Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,104Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,175Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,183Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:44:52,212Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:44:52,213Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,213Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,328Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:44:52,329Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:44:52,349Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:44:52,349Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,352Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,358Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,365Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:44:52,368Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[WARN ] 2019-06-19T09:44:52,371Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:44:52,375Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:52,433Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:44:52,435Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094430.791/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:44:52,436Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:44:52,442Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,446Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937488273) {}
[INFO ] 2019-06-19T09:44:52,447Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,457Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,459Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,471Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937490241) {}
[INFO ] 2019-06-19T09:44:52,473Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,485Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,495Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937491218) {}
[INFO ] 2019-06-19T09:44:52,496Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,507Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,509Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:44:52,518Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,518Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:52,518Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937492349) {}
[INFO ] 2019-06-19T09:44:52,518Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:44:52,525Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:44:52,531Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:44:52,531Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:44:52,996Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: A835A161FAB4BD35E557D348BDFC08614F82747CFBEFBDB2DC4B7C4194D62373 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000002, flow-id=cb85bc7e-5513-4a34-ae2c-35cb0c8e31f5, invocation_id=0d2aab55-2b8c-454e-b804-bbaadac8fd06, invocation_timestamp=2019-06-19T09:44:52.922Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=0d2aab55-2b8c-454e-b804-bbaadac8fd06, session_timestamp=2019-06-19T09:44:52.922Z, thread-id=334}
[INFO ] 2019-06-19T09:45:20,034Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094514.314/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:45:20,055Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:45:20,086Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:20,218Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:21,269Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:45:21,339Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:45:21,340Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:45:21,506Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:45:14.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:45:25,954Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:45:25,958Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094514.314/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:45:25,958Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:45:25,963Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:45:26,026Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:26,031Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:27,762Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:28,380Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:45:28,383Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:28,383Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:28,621Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:28,689Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:45:28,768Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:45:28,785Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:45:28,785Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:45:29,033Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:45:29,042Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:45:29,042Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:29,046Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:29,190Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:29,246Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:45:29,264Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[WARN ] 2019-06-19T09:45:29,274Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:45:29,289Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:29,352Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:45:29,357Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:45:29,361Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:45:29,387Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094514.314/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:45:29,435Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:45:29,766Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:29,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:29,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:29,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:29,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:29,800Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094514.314/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:45:29,800Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:45:29,800Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:29,830Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:29,864Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:45:29,890Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:45:29,891Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:45:29,915Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:45:14.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:45:30,408Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:45:30,411Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094514.314/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:45:30,411Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:45:30,415Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:45:30,417Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,417Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,473Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,488Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:45:30,489Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,490Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,559Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,567Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:45:30,598Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:45:30,600Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,600Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,719Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:30,720Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:45:30,739Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:45:30,739Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,741Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:30,749Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,756Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:45:30,759Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[WARN ] 2019-06-19T09:45:30,762Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:45:30,764Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:30,818Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:45:30,820Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094514.314/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:45:30,820Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:45:30,828Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,831Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:30,833Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:30,842Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,843Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:30,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:30,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:30,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:30,858Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094514.314/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:45:30,858Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:45:30,859Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:30,885Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:30,917Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:45:30,940Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:45:30,940Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:45:30,944Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:45:14.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:45:31,356Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:45:31,358Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094514.314/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:45:31,358Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:45:31,362Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:45:31,365Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,365Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,438Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,454Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:45:31,456Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,456Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,523Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,529Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:45:31,555Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:45:31,556Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,556Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,656Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:31,657Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:45:31,675Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:45:31,675Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,677Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:31,684Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,693Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:45:31,696Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[WARN ] 2019-06-19T09:45:31,699Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:45:31,702Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:31,761Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:45:31,764Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094514.314/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:45:31,764Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:45:31,770Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:31,775Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:31,785Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,786Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:31,795Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:31,797Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:31,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,808Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:31,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:31,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:31,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:31,825Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094514.314/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:45:31,825Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:45:31,826Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:31,851Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094514.314/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:45:31,883Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:45:31,908Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:45:31,908Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:45:31,914Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:45:14.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:45:32,357Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:45:32,359Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094514.314/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:45:32,359Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:45:32,362Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:45:32,364Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,364Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,413Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,427Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:45:32,429Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,429Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,508Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,517Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:45:32,550Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:45:32,552Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,552Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,673Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:45:32,674Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:45:32,697Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:45:32,697Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,700Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,708Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,716Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:45:32,720Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[WARN ] 2019-06-19T09:45:32,723Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:45:32,727Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:32,779Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:45:32,781Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094514.314/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:45:32,781Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:45:32,788Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937529042) {}
[INFO ] 2019-06-19T09:45:32,792Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,801Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,802Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,812Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937530739) {}
[INFO ] 2019-06-19T09:45:32,813Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,823Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937531675) {}
[INFO ] 2019-06-19T09:45:32,834Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,845Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,846Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:45:32,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:32,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937532697) {}
[INFO ] 2019-06-19T09:45:32,856Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:45:32,863Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:45:32,867Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:45:32,871Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:45:32,871Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:45:33,177Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330}
[WARN ] 2019-06-19T09:45:33,177Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330}
[INFO ] 2019-06-19T09:45:34,566Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,566Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,658Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,658Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,884Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: FB3B9D3DF3CA74DF5B3CDBD73AD38E2B4F54EB5A26E912CA65B83AFF0950F26A to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,885Z [Mock node 1 thread] corda.flow.call - Generating spend for: 1d630b72-d58b-425c-aa68-a25e074506ef {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[WARN ] 2019-06-19T09:45:34,930Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 69238B6A0A27729AC9578F0165918B213E3E6AD28711FF0FCD01261614127C16, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:34,935Z [Mock node 1 thread] corda.flow.call - Signing transaction for: 1d630b72-d58b-425c-aa68-a25e074506ef {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:35,033Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=9CA3F1A8DBB7639C0DE278795FCAA53FC110DC84337AE0CD3F5586ADF32E6511}
[INFO ] 2019-06-19T09:45:35,067Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,270Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,272Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,314Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,314Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,314Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=1d630b72-d58b-425c-aa68-a25e074506ef, invocation_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, invocation_timestamp=2019-06-19T09:45:32.909Z, origin=Only For Testing, session_id=f0635a5e-b6f4-41b7-bd0c-0785dd16092c, session_timestamp=2019-06-19T09:45:32.909Z, thread-id=330, tx_id=70346688CCDA3E5B28A28C9C8C8C71E01A7CB4FC0E5142DA513D4AB4C7E70B9B}
[INFO ] 2019-06-19T09:45:35,331Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySBGQxTUGCpzMM6uM6Ztq7seHhJ5AhEKoB6rguXxG9M5n {}
[INFO ] 2019-06-19T09:45:35,382Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgySBGQxTUGCpzMM6uM6Ztq7seHhJ5AhEKoB6rguXxG9M5n {fiber-id=10000005, flow-id=a75b4c80-db64-414e-986f-a1977cac4979, invocation_id=ec56656f-05c8-4a0e-9450-18b04c0e050c, invocation_timestamp=2019-06-19T09:45:35.363Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=ec56656f-05c8-4a0e-9450-18b04c0e050c, session_timestamp=2019-06-19T09:45:35.363Z, thread-id=352}
[INFO ] 2019-06-19T09:45:35,417Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: FB3B9D3DF3CA74DF5B3CDBD73AD38E2B4F54EB5A26E912CA65B83AFF0950F26A to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000005, flow-id=a75b4c80-db64-414e-986f-a1977cac4979, invocation_id=ec56656f-05c8-4a0e-9450-18b04c0e050c, invocation_timestamp=2019-06-19T09:45:35.363Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=ec56656f-05c8-4a0e-9450-18b04c0e050c, session_timestamp=2019-06-19T09:45:35.363Z, thread-id=352}
[INFO ] 2019-06-19T09:46:25,405Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094619.314/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:46:25,427Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:25,462Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:25,598Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:26,557Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:26,623Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:26,624Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:26,780Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:19.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:30,927Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:30,930Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094619.314/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:30,931Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:30,934Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:30,996Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:31,001Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:32,706Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:33,419Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:33,424Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:33,425Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:33,714Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:33,782Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:33,879Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:33,906Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:33,906Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:34,223Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:34,232Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:34,233Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:34,238Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:34,384Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:34,455Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:34,478Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[WARN ] 2019-06-19T09:46:34,490Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:46:34,505Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:34,572Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:34,577Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:46:34,580Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:46:34,608Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094619.314/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:34,661Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:35,002Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:35,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:35,031Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:35,031Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:35,031Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:35,037Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094619.314/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:46:35,037Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:35,037Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:35,069Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:35,104Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:35,129Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:35,130Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:35,133Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:19.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:35,713Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:35,716Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094619.314/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:35,716Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:35,720Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:35,722Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,723Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,786Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,806Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:35,809Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,809Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,886Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,895Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:35,927Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:35,929Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:35,930Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,048Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,049Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:36,071Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:36,071Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,073Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:36,083Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,091Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:36,094Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[WARN ] 2019-06-19T09:46:36,099Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:46:36,101Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:36,155Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:36,158Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094619.314/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:36,158Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:36,164Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,168Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:36,169Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:36,179Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,181Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:36,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:36,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:36,190Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:36,196Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094619.314/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:46:36,197Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:36,197Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:36,223Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:36,256Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:36,277Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:36,277Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:36,280Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:19.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:36,727Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:36,730Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094619.314/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:36,730Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:36,733Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:36,738Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,738Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,796Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,816Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:36,819Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,819Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,898Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,906Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:36,937Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:36,938Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:36,938Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,043Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,045Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:37,062Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:37,062Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,064Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:37,071Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,079Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:37,082Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[WARN ] 2019-06-19T09:46:37,085Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:46:37,087Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:37,141Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:37,143Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094619.314/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:37,144Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:37,149Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,152Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:37,154Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:37,162Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,164Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:37,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:37,173Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:37,181Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,182Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:37,191Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,191Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:37,191Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:37,191Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:37,197Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094619.314/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:46:37,198Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:37,198Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:37,225Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094619.314/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:37,255Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:37,275Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:37,275Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:37,279Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:19.314Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:37,746Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:37,748Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094619.314/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:37,748Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:37,750Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:37,752Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,752Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,799Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,815Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:37,817Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,817Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,875Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,882Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:37,908Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:37,909Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:37,909Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:38,007Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:38,008Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:38,024Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:38,024Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,026Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,031Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,037Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:38,040Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[WARN ] 2019-06-19T09:46:38,041Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:46:38,045Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:38,094Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:38,096Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094619.314/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:38,096Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:38,103Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,106Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937594232) {}
[INFO ] 2019-06-19T09:46:38,107Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,116Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,117Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,127Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937596071) {}
[INFO ] 2019-06-19T09:46:38,128Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,138Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,148Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937597062) {}
[INFO ] 2019-06-19T09:46:38,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,159Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,161Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:38,171Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,171Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:38,171Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937598024) {}
[INFO ] 2019-06-19T09:46:38,171Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:38,178Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:38,181Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:38,182Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:38,583Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: D443EDC8D2E84616DB5D86EB4572A379BD0F8843F80A9896E6100BEA92843F99 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000002, flow-id=8bf62e40-9d73-47d5-9175-9a2dc1f8632f, invocation_id=53cf1ab0-2382-4b58-ac68-db287cb0a4b4, invocation_timestamp=2019-06-19T09:46:38.527Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=53cf1ab0-2382-4b58-ac68-db287cb0a4b4, session_timestamp=2019-06-19T09:46:38.527Z, thread-id=331}
[INFO ] 2019-06-19T09:46:38,862Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094638.795/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:46:38,863Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:38,863Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:38,899Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:38,929Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:38,932Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:38,932Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:38,936Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:38.795Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:39,361Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:39,363Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094638.795/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:39,363Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:39,366Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:39,367Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,367Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,413Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,427Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:39,429Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,429Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,486Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,494Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:39,545Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:39,551Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,551Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,653Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:39,657Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:39,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:39,659Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:39,672Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:39,680Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:39,684Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[WARN ] 2019-06-19T09:46:39,686Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:46:39,690Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:39,796Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:39,798Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:46:39,798Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:46:39,799Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094638.795/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:39,799Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:39,805Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:39,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:39,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:39,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:39,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:39,814Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094638.795/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:46:39,815Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:39,815Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:39,841Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:39,871Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:39,888Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:39,888Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:39,891Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:38.795Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:40,247Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:40,249Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094638.795/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:40,249Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:40,252Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:40,254Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,254Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,299Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,311Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:40,313Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,313Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,368Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,374Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:40,398Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:40,399Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,400Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,486Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:40,487Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:40,503Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:40,503Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,505Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:40,510Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,516Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:40,518Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[WARN ] 2019-06-19T09:46:40,521Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:46:40,523Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:40,572Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:40,574Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094638.795/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:40,574Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:40,579Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:40,583Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:40,590Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,591Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:40,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:40,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:40,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:40,603Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094638.795/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:46:40,603Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:40,603Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:40,628Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:40,658Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:40,676Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:40,676Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:40,679Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:38.795Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:41,037Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:41,038Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094638.795/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:41,038Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:41,041Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:41,042Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,042Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,084Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,096Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:41,098Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,098Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,155Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,161Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:41,183Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:41,184Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,184Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,270Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,271Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:41,286Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:41,286Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,288Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:41,293Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,302Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:41,305Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[WARN ] 2019-06-19T09:46:41,307Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:46:41,310Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:41,368Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:41,370Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094638.795/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:41,370Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:41,375Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,378Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:41,379Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:41,387Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,389Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:41,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:41,400Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:41,409Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,410Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:41,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:41,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:41,418Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:41,424Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094638.795/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:46:41,425Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:41,425Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:41,450Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094638.795/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:41,481Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:41,499Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:41,499Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:41,503Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:38.795Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:41,859Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:41,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094638.795/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:41,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:41,863Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:41,865Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,865Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,913Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,927Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:41,929Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:41,929Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:42,041Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:42,047Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:42,071Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:42,072Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:42,072Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:42,157Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:42,158Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:42,173Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:42,173Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,174Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,179Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,184Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:42,187Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[WARN ] 2019-06-19T09:46:42,188Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:46:42,191Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:42,238Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:42,240Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094638.795/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:42,241Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:42,245Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,248Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937599657) {}
[INFO ] 2019-06-19T09:46:42,249Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,255Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,256Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,263Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937600503) {}
[INFO ] 2019-06-19T09:46:42,264Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,270Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,271Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,276Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937601286) {}
[INFO ] 2019-06-19T09:46:42,278Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,284Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,286Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:42,292Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,292Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:42,293Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937602173) {}
[INFO ] 2019-06-19T09:46:42,293Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:42,296Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:46:42,297Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:46:42,300Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:42,300Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:46:42,367Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607}
[WARN ] 2019-06-19T09:46:42,367Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607}
[INFO ] 2019-06-19T09:46:43,297Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,297Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,377Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,377Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,470Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 6501521927B98C1A940865538A7321AA636018C142CD8DA70D533A951A90F662 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,470Z [Mock node 1 thread] corda.flow.call - Generating spend for: 64cfd889-ce29-401a-825e-5dfcfcd9a8a2 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[WARN ] 2019-06-19T09:46:43,515Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9150BDEF01683670137F21C69013022465B1885A08380B9FFCBB467463AB5DD4, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,520Z [Mock node 1 thread] corda.flow.call - Signing transaction for: 64cfd889-ce29-401a-825e-5dfcfcd9a8a2 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:43,967Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=9F3325375C876ACD1B404A98ADA5368CC84D05FE38BC969101F4A4824F39979F}
[INFO ] 2019-06-19T09:46:44,000Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,195Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,197Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,237Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,237Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,237Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=64cfd889-ce29-401a-825e-5dfcfcd9a8a2, invocation_id=0f13dcbb-0311-4687-a5a6-7d399809c337, invocation_timestamp=2019-06-19T09:46:42.308Z, origin=Only For Testing, session_id=0f13dcbb-0311-4687-a5a6-7d399809c337, session_timestamp=2019-06-19T09:46:42.308Z, thread-id=607, tx_id=CE8F78CCD39BBEC78FC99A9062D6C6D5F97C84A715AA74AA4023A926D945FB4C}
[INFO ] 2019-06-19T09:46:44,251Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVDfXSuVjry6zofSe8Dncnd7GrQxNntYgyvdUFG1t6j8A {}
[INFO ] 2019-06-19T09:46:44,295Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVDfXSuVjry6zofSe8Dncnd7GrQxNntYgyvdUFG1t6j8A {fiber-id=10000007, flow-id=c74b7169-9784-41c5-a09e-921d0b9fba4f, invocation_id=e1ff3d36-b19a-4357-b1c4-78e1b387bff9, invocation_timestamp=2019-06-19T09:46:44.279Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e1ff3d36-b19a-4357-b1c4-78e1b387bff9, session_timestamp=2019-06-19T09:46:44.279Z, thread-id=628}
[INFO ] 2019-06-19T09:46:44,327Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 6501521927B98C1A940865538A7321AA636018C142CD8DA70D533A951A90F662 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000007, flow-id=c74b7169-9784-41c5-a09e-921d0b9fba4f, invocation_id=e1ff3d36-b19a-4357-b1c4-78e1b387bff9, invocation_timestamp=2019-06-19T09:46:44.279Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e1ff3d36-b19a-4357-b1c4-78e1b387bff9, session_timestamp=2019-06-19T09:46:44.279Z, thread-id=628}
[INFO ] 2019-06-19T09:46:44,394Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094644.353/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:46:44,394Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:44,394Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:44,421Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:44,451Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:44,454Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:44,455Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:44,459Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:44.353Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:44,839Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:44,841Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094644.353/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:44,841Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:44,843Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:44,845Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,886Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,897Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:44,899Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,899Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,955Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:44,960Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:45,001Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:45,007Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,007Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,090Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,094Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:45,094Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,095Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:45,107Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,114Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:45,117Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[WARN ] 2019-06-19T09:46:45,118Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:46:45,119Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,167Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:45,169Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:46:45,169Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:46:45,170Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094644.353/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:45,170Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:45,174Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,182Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094644.353/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:46:45,182Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:45,182Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:45,206Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:45,237Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:45,253Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:45,254Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:45,256Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:44.353Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:45,583Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:45,585Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094644.353/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:45,585Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:45,587Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:45,589Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,589Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,628Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,639Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:45,641Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,641Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,688Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,694Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:45,716Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:45,717Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,791Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:45,792Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:45,807Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:45,807Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,809Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:45,813Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,818Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:45,821Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[WARN ] 2019-06-19T09:46:45,823Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:46:45,824Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,871Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:45,873Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094644.353/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:45,874Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:45,878Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,880Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:45,881Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:45,888Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,889Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:45,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:45,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:45,900Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094644.353/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:46:45,900Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:45,900Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:45,926Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:45,957Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:45,972Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:45,972Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:45,974Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:44.353Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:46,328Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:46,330Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094644.353/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:46,330Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:46,332Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:46,334Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,334Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,385Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:46,387Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,387Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,437Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,443Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:46,462Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:46,463Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,463Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,538Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:46,538Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:46,552Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:46,552Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,553Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:46,557Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,560Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:46,563Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[WARN ] 2019-06-19T09:46:46,564Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:46:46,565Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:46,611Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:46,612Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094644.353/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:46,613Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:46,616Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:46,619Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:46,624Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,625Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:46,630Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:46,630Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:46,635Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,636Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:46,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:46,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:46,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:46,645Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094644.353/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:46:46,645Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:46,645Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:46,669Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094644.353/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:46,697Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:46,711Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:46,712Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:46,714Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:44.353Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:47,025Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:47,027Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094644.353/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:47,027Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:47,030Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:47,031Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,031Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,070Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,081Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:47,082Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,082Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,131Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,136Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:47,154Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:47,155Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,155Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,227Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:47,228Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:47,242Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:47,243Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,244Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,248Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,252Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:47,254Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[WARN ] 2019-06-19T09:46:47,255Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:46:47,257Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:47,302Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:47,305Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094644.353/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:47,305Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:47,309Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937605094) {}
[INFO ] 2019-06-19T09:46:47,312Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,317Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,318Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,323Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937605807) {}
[INFO ] 2019-06-19T09:46:47,323Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,329Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,334Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937606552) {}
[INFO ] 2019-06-19T09:46:47,334Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,340Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,341Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:47,346Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,346Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:47,346Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937607242) {}
[INFO ] 2019-06-19T09:46:47,346Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:47,346Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:46:47,347Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:46:47,347Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:47,347Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:47,969Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:47,969Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:47,983Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:47,983Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:48,023Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: BCFACA49FD1661FB0E1514A8171215626E5C7F57AAEF3C45E77670415FB732C4 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:48,024Z [Mock node 3 thread] corda.flow.call - Generating spend for: 9047dabb-2662-4ce7-96fc-87f3c6101c93 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[WARN ] 2019-06-19T09:46:48,032Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 49395D071696F64B635C9EAC7A83609E53A003585D11462514FD2A3BF14C5566, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:48,033Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 9047dabb-2662-4ce7-96fc-87f3c6101c93 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:48,046Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=86424DE664B55BA9862E69FBF8EA0DF83DC18F7F15637EFB9654347596FF099F}
[INFO ] 2019-06-19T09:46:48,062Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,126Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,126Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,133Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,133Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,133Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=9047dabb-2662-4ce7-96fc-87f3c6101c93, invocation_id=2d005251-3340-4078-a689-2d5d9e354983, invocation_timestamp=2019-06-19T09:46:47.347Z, origin=Only For Testing, session_id=2d005251-3340-4078-a689-2d5d9e354983, session_timestamp=2019-06-19T09:46:47.347Z, thread-id=903, tx_id=541E21148794C35169616778A58B9CFBD4A10594532459969E8613C112205C79}
[INFO ] 2019-06-19T09:46:48,145Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: BCFACA49FD1661FB0E1514A8171215626E5C7F57AAEF3C45E77670415FB732C4 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=a6811d1c-60b7-4137-a904-1bd6376de3aa, invocation_id=f291a122-fd44-4ff6-8b31-989bb2f78309, invocation_timestamp=2019-06-19T09:46:48.141Z, origin=Only For Testing, session_id=f291a122-fd44-4ff6-8b31-989bb2f78309, session_timestamp=2019-06-19T09:46:48.141Z, thread-id=924}
[INFO ] 2019-06-19T09:46:48,175Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: C929282D18D496D6573D00BF0B687C4D96E15EF3DDE9C42E831746260C43AB82 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
[INFO ] 2019-06-19T09:46:48,175Z [Mock node 3 thread] corda.flow.call - Generating spend for: a52388ee-2249-4955-90bd-d6cf9c24576b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
[WARN ] 2019-06-19T09:46:48,181Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 49395D071696F64B635C9EAC7A83609E53A003585D11462514FD2A3BF14C5566, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
[INFO ] 2019-06-19T09:46:48,182Z [Mock node 3 thread] corda.flow.call - Signing transaction for: a52388ee-2249-4955-90bd-d6cf9c24576b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
[INFO ] 2019-06-19T09:46:48,191Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
[INFO ] 2019-06-19T09:46:48,204Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,248Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJsdt9Nk5bogmPdhUMsxP91MnLQbnmPJbfKc4m5wdoM1p {fiber-id=10000015, flow-id=5c688ec6-776d-4496-b94b-0cf618358dcb, invocation_id=70cac6e4-492b-41bf-9341-47e301dee12c, invocation_timestamp=2019-06-19T09:46:48.209Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=70cac6e4-492b-41bf-9341-47e301dee12c, session_timestamp=2019-06-19T09:46:48.209Z, thread-id=923}
[INFO ] 2019-06-19T09:46:48,261Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,262Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,266Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,275Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,309Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,309Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,309Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,315Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJsdt9Nk5bogmPdhUMsxP91MnLQbnmPJbfKc4m5wdoM1p {}
[INFO ] 2019-06-19T09:46:48,324Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,331Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,337Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFXmMrBaJJzMMemzQCpzsojGuCNpfAwEZNqTmD8QuK4pf {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[WARN ] 2019-06-19T09:46:48,337Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLEYFM79VrhxbJuGRZa6Mpzf9Y6ieaiaop6JBoLhAqjHjF) {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,338Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924, tx_id=614532D1D8628D88D410494709CE218F6AA106DA3D23953D52152FDB1EB2D946}
[INFO ] 2019-06-19T09:46:48,340Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFXmMrBaJJzMMemzQCpzsojGuCNpfAwEZNqTmD8QuK4pf {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,340Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLEYFM79VrhxbJuGRZa6Mpzf9Y6ieaiaop6JBoLhAqjHjF) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924}
[INFO ] 2019-06-19T09:46:48,340Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFXmMrBaJJzMMemzQCpzsojGuCNpfAwEZNqTmD8QuK4pf {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,340Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLEYFM79VrhxbJuGRZa6Mpzf9Y6ieaiaop6JBoLhAqjHjF) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=23f2a1cf-daa7-46aa-b5f8-6e28800e8e0a, invocation_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, invocation_timestamp=2019-06-19T09:46:48.157Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=efdd06ac-4e33-4610-85a1-c6a7241dbfff, session_timestamp=2019-06-19T09:46:48.157Z, thread-id=924}
[INFO ] 2019-06-19T09:46:48,364Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyJsdt9Nk5bogmPdhUMsxP91MnLQbnmPJbfKc4m5wdoM1p {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[INFO ] 2019-06-19T09:46:48,364Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFXmMrBaJJzMMemzQCpzsojGuCNpfAwEZNqTmD8QuK4pf {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[INFO ] 2019-06-19T09:46:48,368Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFXmMrBaJJzMMemzQCpzsojGuCNpfAwEZNqTmD8QuK4pf {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,380Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a52388ee-2249-4955-90bd-d6cf9c24576b, invocation_id=9f5456fa-f269-46f2-99fb-154634ae9b24, invocation_timestamp=2019-06-19T09:46:48.148Z, origin=Only For Testing, session_id=9f5456fa-f269-46f2-99fb-154634ae9b24, session_timestamp=2019-06-19T09:46:48.148Z, thread-id=903}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:46:48,390Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[INFO ] 2019-06-19T09:46:48,392Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378), SessionId(toLong=-4817308496847601434)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--4817308496847601434-7795799174343771138)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))]), frozenFiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@746c045d, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479) {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[INFO ] 2019-06-19T09:46:48,394Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:46:48,395Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:46:48,417Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] errored, dumping all transitions:

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.360Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=453BFF4D26A9EC4C15B0882EFB19A28582B230E1B0E97161E491B3BAFB4921BF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a])
    SignalFlowHasStarted(flowId=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1002220683377544894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7876486134339442329-2043370505224026378-0-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.360Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.363Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), maySkipCheckpoint=false, fiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=453BFF4D26A9EC4C15B0882EFB19A28582B230E1B0E97161E491B3BAFB4921BF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.363Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.367Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}), maySkipCheckpoint=false, fiber=95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}), frozenFiber=95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65})
checkpoint.flowState.frozenFiber.hash: 
    42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5
    95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.367Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7876486134339442329-2043370505224026378-2-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.369Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), maySkipCheckpoint=false, fiber=E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
checkpoint.flowState.frozenFiber.hash: 
    95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F
    E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.369Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1002220683377544894), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], sessionId=SessionId(toLong=-4817308496847601434))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4817308496847601434): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.375Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378), SessionId(toLong=-4817308496847601434)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false), frozenFiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C
    19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.378Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4817308496847601434), initiationEntropy=7795799174343771138, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4817308496847601434-7795799174343771138-4-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))])
checkpoint.sessions.SessionId(toLong=-4817308496847601434): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4817308496847601434-7795799174343771138)


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4817308496847601434), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-652033583793311533)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4817308496847601434).rejectionError: 
    null
    FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.397Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.399Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.400Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[WARN ] 2019-06-19T09:46:48,417Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:46:48,419Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[INFO ] 2019-06-19T09:46:48,466Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[INFO ] 2019-06-19T09:46:48,468Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), frozenFiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@4c7d6597, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[INFO ] 2019-06-19T09:46:48,468Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:46:48,468Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:46:48,475Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] errored, dumping all transitions:

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DD93E43672A62C9D2F3084BA8A58E8C08293A7BE4A3532E8A159BFECC9872AE8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b])
    SignalFlowHasStarted(flowId=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], sessionId=SessionId(toLong=7876486134339442329))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.348Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), frozenFiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=DD93E43672A62C9D2F3084BA8A58E8C08293A7BE4A3532E8A159BFECC9872AE8)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), frozenFiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.353Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=7876486134339442329), initiationEntropy=2043370505224026378, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7876486134339442329-2043370505224026378-1-0), senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7876486134339442329-2043370505224026378)


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.362Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1002220683377544894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7876486134339442329-2043370505224026378)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.362Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.368Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.368Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C}), maySkipCheckpoint=false, fiber=4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C}), frozenFiber=4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C})
checkpoint.flowState.frozenFiber.hash: 
    DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786
    4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1002220683377544894), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7876486134339442329-2043370505224026378-2-0), senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.373Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), maySkipCheckpoint=false, fiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), frozenFiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
checkpoint.flowState.frozenFiber.hash: 
    4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D
    7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.374Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.466Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ErrorSessionMessage(flowException=null, errorId=-652033583793311533)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).errors: 
    []
    [FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.466Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.468Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.469Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.469Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,475Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:46:48,475Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,476Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] errored, dumping all transitions:

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.360Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=453BFF4D26A9EC4C15B0882EFB19A28582B230E1B0E97161E491B3BAFB4921BF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a])
    SignalFlowHasStarted(flowId=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1002220683377544894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7876486134339442329-2043370505224026378-0-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@19b9361a]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.360Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.363Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), maySkipCheckpoint=false, fiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=453BFF4D26A9EC4C15B0882EFB19A28582B230E1B0E97161E491B3BAFB4921BF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.363Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.367Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}), maySkipCheckpoint=false, fiber=95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}), frozenFiber=95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65})
checkpoint.flowState.frozenFiber.hash: 
    42D8059098E1F2CD51D99AE28407D098D03D8B1F463802D62E08AE0A92A46AE5
    95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.367Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7876486134339442329-2043370505224026378-2-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.369Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), maySkipCheckpoint=false, fiber=E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))]), frozenFiber=E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
checkpoint.flowState.frozenFiber.hash: 
    95A890C013CB62AAC5D40577612C0F4D42007291F48005E74062407C72C9A42F
    E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.369Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1002220683377544894), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-1002220683377544894).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], sessionId=SessionId(toLong=-4817308496847601434))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4817308496847601434): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.372Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.375Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045, )
  Actions: 
    PersistCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378), SessionId(toLong=-4817308496847601434)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false), frozenFiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-1002220683377544894))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    E606A28B9E38E1BDE4C5A1B79B99C186C906E218D3985E9B463942F10B6FE75C
    19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@42b30d69]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.378Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4817308496847601434), initiationEntropy=7795799174343771138, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4817308496847601434-7795799174343771138-4-0), senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))=E8E0139A0EDF3CEB8E7AE7FB931869B9ABDCB320BE3701F726D4549D111EE478}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))])
checkpoint.sessions.SessionId(toLong=-4817308496847601434): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4817308496847601434), additionalEntropy=7795799174343771138)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4817308496847601434-7795799174343771138)


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4817308496847601434), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-652033583793311533)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4817308496847601434).rejectionError: 
    null
    FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.389Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.397Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.399Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.400Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] ---
  Timestamp: 2019-06-19T09:46:48.470Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-652033583793311533)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378)], senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479)
    CreateTransaction
    RemoveCheckpoint(id=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e])
    ReleaseSoftLocks(uuid=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-1002220683377544894), SessionId(toLong=-4817308496847601434)])
    RemoveFlow(flowId=[5eb93bec-4c50-4d19-8aa5-ef80e7d69c58], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Invocation, sessionId=453d48f4-eaea-4259-ad4a-619988f780a2, timestamp: 2019-06-19T09:46:48.356Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-1002220683377544894)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7876486134339442329)), errors=[], deduplicationSeed=D-7876486134339442329-2043370505224026378), SessionId(toLong=-4817308496847601434)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--4817308496847601434-7795799174343771138)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4817308496847601434))]), frozenFiber=19AAD4A9DF098B5473A4F89C69A263E95E0F8DBC4724A738FC8D1B0CE1067045), errorState=Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@746c045d, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=5cd8a93d-f810-4d99-8cd1-3c8b350d6479))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6cb7ae7e]
    []
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
[WARN ] 2019-06-19T09:46:48,477Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [5eb93bec-4c50-4d19-8aa5-ef80e7d69c58] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=5eb93bec-4c50-4d19-8aa5-ef80e7d69c58, invocation_id=453d48f4-eaea-4259-ad4a-619988f780a2, invocation_timestamp=2019-06-19T09:46:48.356Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=453d48f4-eaea-4259-ad4a-619988f780a2, session_timestamp=2019-06-19T09:46:48.356Z, thread-id=925}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:46:48,482Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] errored, dumping all transitions:

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DD93E43672A62C9D2F3084BA8A58E8C08293A7BE4A3532E8A159BFECC9872AE8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b])
    SignalFlowHasStarted(flowId=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@2d03b30b]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], sessionId=SessionId(toLong=7876486134339442329))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.343Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.348Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), frozenFiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=DD93E43672A62C9D2F3084BA8A58E8C08293A7BE4A3532E8A159BFECC9872AE8)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false), frozenFiber=DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.353Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=7876486134339442329), initiationEntropy=2043370505224026378, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7876486134339442329-2043370505224026378-1-0), senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=D27637AD2AD8DE56C20A6AB7BC2DF68759AF6DAA4E11DA3EDA01E526AF1E9D65}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7876486134339442329), additionalEntropy=2043370505224026378)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7876486134339442329-2043370505224026378)


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.362Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-1002220683377544894), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7876486134339442329-2043370505224026378)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.362Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.368Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.368Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C}), maySkipCheckpoint=false, fiber=4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C}), frozenFiber=4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C})
checkpoint.flowState.frozenFiber.hash: 
    DB69D358BE532B75E7A69900A98076B7270314EB8CA48935146A0D1FC52BC786
    4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6144103b, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1af34d25]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1002220683377544894), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7876486134339442329-2043370505224026378-2-0), senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.371Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.373Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), maySkipCheckpoint=false, fiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5, )
  Actions: 
    PersistCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), frozenFiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))=A2197AD14795CB9B33AC6A0DFCDDDC6BF35E9869E57CB5126E22B8024B466E6C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))])
checkpoint.flowState.frozenFiber.hash: 
    4D586671B5118DA653AF32C92F417027E0CDCDCD49A2849EDCBA423449D3171D
    7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.374Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.466Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7876486134339442329), payload=ErrorSessionMessage(flowException=null, errorId=-652033583793311533)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7876486134339442329).errors: 
    []
    [FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7]


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.466Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.468Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.469Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.469Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] ---
  Timestamp: 2019-06-19T09:46:48.477Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-652033583793311533)], sessions=[], senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5)
    CreateTransaction
    RemoveCheckpoint(id=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7])
    ReleaseSoftLocks(uuid=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7876486134339442329)])
    RemoveFlow(flowId=[dbdf6a35-7515-43f7-b487-fbe7bd2b2c50], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Invocation, sessionId=98594b7f-9770-4c2f-8672-f51bd15170a7, timestamp: 2019-06-19T09:46:48.315Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=7876486134339442329)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1002220683377544894)), errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-7876486134339442329-2043370505224026378)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=7876486134339442329))]), frozenFiber=7E2CC6A6F068A4C5C44045C2B3E9B3A8B165A4B6B6D3473D7B8786857C997BF5), errorState=Errored(errors=[FlowError(errorId=-652033583793311533, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@4c7d6597, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=6497c8ed-769c-4a97-9b95-b063dda3b1c5))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@69579c7]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
[WARN ] 2019-06-19T09:46:48,482Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dbdf6a35-7515-43f7-b487-fbe7bd2b2c50] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=dbdf6a35-7515-43f7-b487-fbe7bd2b2c50, invocation_id=98594b7f-9770-4c2f-8672-f51bd15170a7, invocation_timestamp=2019-06-19T09:46:48.315Z, origin=Only For Testing, session_id=98594b7f-9770-4c2f-8672-f51bd15170a7, session_timestamp=2019-06-19T09:46:48.315Z, thread-id=924}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:46:48,553Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094648.494/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:46:48,553Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:48,554Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:48,585Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:48,617Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:48,620Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:48,620Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:48,625Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:48.494Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:49,001Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:49,002Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094648.494/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:49,002Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:49,005Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:49,007Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,007Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,047Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,059Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:49,060Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,060Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,105Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,110Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:49,143Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:49,149Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,149Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,223Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,226Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:49,227Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,228Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:49,237Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,244Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:49,247Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[WARN ] 2019-06-19T09:46:49,248Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:46:49,249Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,293Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:49,295Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:46:49,295Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:46:49,295Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094648.494/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:49,296Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:49,300Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,303Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,303Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,303Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,308Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094648.494/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:46:49,308Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:49,308Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:49,332Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:49,362Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:49,378Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:49,378Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:49,380Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:48.494Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:49,686Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:49,687Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094648.494/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:49,687Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:49,690Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:49,691Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,705Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,744Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,754Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:49,755Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,755Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,800Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,805Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:49,825Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:49,826Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,826Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,899Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:49,900Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:49,913Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:49,913Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,914Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:49,918Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,921Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:49,924Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[WARN ] 2019-06-19T09:46:49,925Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:46:49,926Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,968Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:49,970Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094648.494/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:49,970Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:49,973Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,974Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:49,975Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:49,979Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,980Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:49,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:49,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:49,989Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094648.494/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:46:49,989Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:49,989Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:50,014Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:50,040Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:50,054Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:50,054Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:50,056Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:48.494Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:50,345Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:50,346Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094648.494/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:50,346Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:50,348Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:50,350Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,350Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,388Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,398Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:50,401Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,401Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,445Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,450Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:50,470Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:50,471Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,471Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,543Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:50,544Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:50,558Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:50,558Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,559Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:50,563Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,567Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:50,569Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[WARN ] 2019-06-19T09:46:50,571Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:46:50,572Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:50,618Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:50,619Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094648.494/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:50,620Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:50,623Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,625Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:50,625Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:50,631Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,631Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:50,636Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:50,637Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:50,642Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,642Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:50,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:50,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:50,647Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:50,652Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094648.494/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:46:50,652Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:50,653Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:50,676Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094648.494/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:50,705Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:50,718Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:50,718Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:50,720Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:48.494Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:51,030Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:51,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094648.494/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:51,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:51,033Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:51,035Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,035Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,071Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,080Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:51,081Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,081Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,122Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,127Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:51,146Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:51,147Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,147Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,213Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,213Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:51,227Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:51,228Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,229Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,232Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,236Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:46:51,239Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:46:51,240Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,242Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:51,287Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:51,289Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094648.494/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:51,289Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:51,292Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,295Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937609226) {}
[INFO ] 2019-06-19T09:46:51,295Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,301Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,301Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,305Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937609913) {}
[INFO ] 2019-06-19T09:46:51,306Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,311Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,317Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937610558) {}
[INFO ] 2019-06-19T09:46:51,317Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,322Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,323Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:51,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:51,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937611227) {}
[INFO ] 2019-06-19T09:46:51,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:51,330Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:51,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:51,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:51,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:51,365Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: E67500140FFC97A9D2475F537B096756085C56C4F4E3E4B6491B496E84621455 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000018, flow-id=b4eba3b6-91b2-463b-ad42-ddd22e3857e1, invocation_id=1743888a-5aec-4450-9739-573cee632852, invocation_timestamp=2019-06-19T09:46:51.331Z, origin=Only For Testing, session_id=1743888a-5aec-4450-9739-573cee632852, session_timestamp=2019-06-19T09:46:51.331Z, thread-id=1200}
[INFO ] 2019-06-19T09:46:51,420Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094651.383/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:46:51,420Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:51,421Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:51,446Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:51,474Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:51,476Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:51,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:51,480Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:51.383Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:51,819Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:51,821Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094651.383/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:51,821Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:51,823Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:51,824Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,825Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,865Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,875Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:51,876Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,877Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,924Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,930Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:51,966Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:51,971Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:51,971Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,042Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,045Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:52,045Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,047Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:52,056Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,062Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:52,065Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[WARN ] 2019-06-19T09:46:52,066Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:46:52,067Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,112Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:52,114Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:46:52,114Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:46:52,114Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094651.383/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:52,115Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:52,118Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,119Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,119Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,119Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,119Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,124Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094651.383/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:46:52,124Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:52,124Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:52,148Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:52,178Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:52,190Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:52,190Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:52,192Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:51.383Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:52,439Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:52,440Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094651.383/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:52,440Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:52,441Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:52,442Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,443Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,476Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,485Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:52,486Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,486Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,527Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,531Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:52,548Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:52,549Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,549Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,610Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:52,611Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:52,623Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:52,623Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,625Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:52,627Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,631Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:52,633Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[WARN ] 2019-06-19T09:46:52,634Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:46:52,636Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,679Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:52,680Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094651.383/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:52,680Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:52,683Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,685Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:52,685Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:52,690Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,691Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:52,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:52,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:52,699Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094651.383/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:46:52,700Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:52,700Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:52,725Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:52,754Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:52,769Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:52,770Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:52,771Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:51.383Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:53,045Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:53,046Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094651.383/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:53,046Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:53,048Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:53,049Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,049Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,083Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,092Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:53,093Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,093Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,136Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,140Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:53,158Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:53,159Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,222Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,223Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:53,236Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:53,236Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,237Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,240Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,243Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:53,245Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[WARN ] 2019-06-19T09:46:53,246Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:46:53,247Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:53,288Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:53,290Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094651.383/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:53,290Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:53,293Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,294Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:53,295Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,299Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,303Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:53,304Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,307Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,308Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:53,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:53,316Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094651.383/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:46:53,317Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:46:53,317Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:53,340Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094651.383/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:46:53,367Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:46:53,380Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:46:53,380Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:46:53,382Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:46:51.383Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:46:53,720Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:46:53,721Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094651.383/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:46:53,721Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:46:53,724Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:46:53,725Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,725Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,761Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,770Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:46:53,771Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,771Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,814Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,819Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:46:53,836Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:46:53,836Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,836Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,899Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:46:53,899Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:46:53,911Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:46:53,912Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,913Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,916Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,919Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:46:53,921Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[WARN ] 2019-06-19T09:46:53,922Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:46:53,924Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:53,968Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:46:53,970Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094651.383/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:46:53,970Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:46:53,973Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,975Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937612045) {}
[INFO ] 2019-06-19T09:46:53,976Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,980Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,980Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,984Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937612623) {}
[INFO ] 2019-06-19T09:46:53,985Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,988Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,989Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,993Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937613236) {}
[INFO ] 2019-06-19T09:46:53,994Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:53,998Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:53,998Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:46:54,002Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:54,002Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:54,003Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937613911) {}
[INFO ] 2019-06-19T09:46:54,003Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:46:54,003Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:54,003Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:46:54,003Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:54,004Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:46:54,608Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,608Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,624Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,624Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,654Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 05D599C66AEB0CEB9B779489EF9BA533220FD8243367D7D7BF4EBDD7807615D9 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,655Z [Mock node 3 thread] corda.flow.call - Generating spend for: 5eafcfe0-ad20-47ef-8a2c-55093a58805a {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[WARN ] 2019-06-19T09:46:54,663Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key BB0DA80605445363157C5AB6C675DA555AEC0AF82CD821AD8C029608B49B945E, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,664Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 5eafcfe0-ad20-47ef-8a2c-55093a58805a {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,674Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=67A00101E12D2B19FAF780F33A2A411F5AD540AD39C2D7BFA87BFE82AE95BF56}
[INFO ] 2019-06-19T09:46:54,688Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,743Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,744Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,749Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,755Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,773Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,773Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,773Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=5eafcfe0-ad20-47ef-8a2c-55093a58805a, invocation_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, invocation_timestamp=2019-06-19T09:46:54.004Z, origin=Only For Testing, session_id=2c8c3d5a-a7eb-410e-84fd-c9923f45fbf9, session_timestamp=2019-06-19T09:46:54.004Z, thread-id=1476, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,778Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,780Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKCn3s3fq95UNSA4vH8Q4TJaA73KYSjY9DmvHpPz7HyHS {}
[INFO ] 2019-06-19T09:46:54,783Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,789Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKCn3s3fq95UNSA4vH8Q4TJaA73KYSjY9DmvHpPz7HyHS {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[WARN ] 2019-06-19T09:46:54,790Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLPmwz8PE5kvbwvaRkUPgzZ3gDSH7YTaKYFzrXSqFpTtk) {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,791Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496, tx_id=535244A985BE2AE1620500ED82CD9EC35DC65AB0ECAF36A5269FCEB23D0FBBDC}
[INFO ] 2019-06-19T09:46:54,792Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKCn3s3fq95UNSA4vH8Q4TJaA73KYSjY9DmvHpPz7HyHS {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496}
[WARN ] 2019-06-19T09:46:54,792Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLPmwz8PE5kvbwvaRkUPgzZ3gDSH7YTaKYFzrXSqFpTtk) {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496}
[INFO ] 2019-06-19T09:46:54,793Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKCn3s3fq95UNSA4vH8Q4TJaA73KYSjY9DmvHpPz7HyHS {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496}
[WARN ] 2019-06-19T09:46:54,793Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLPmwz8PE5kvbwvaRkUPgzZ3gDSH7YTaKYFzrXSqFpTtk) {fiber-id=10000021, flow-id=80b00066-f60e-4b88-a100-2d1a99ae390d, invocation_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, invocation_timestamp=2019-06-19T09:46:54.635Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=dccd70ec-f345-4a20-9c3f-42fa6d6d4210, session_timestamp=2019-06-19T09:46:54.635Z, thread-id=1496}
[INFO ] 2019-06-19T09:46:54,815Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 05D599C66AEB0CEB9B779489EF9BA533220FD8243367D7D7BF4EBDD7807615D9 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000023, flow-id=e47d73ef-bac2-4867-ac6b-ad9fe4004fe1, invocation_id=6637b4d3-bf42-48c2-a41c-2fe6c3c6951e, invocation_timestamp=2019-06-19T09:46:54.780Z, origin=Only For Testing, session_id=6637b4d3-bf42-48c2-a41c-2fe6c3c6951e, session_timestamp=2019-06-19T09:46:54.780Z, thread-id=1496}
[INFO ] 2019-06-19T09:48:10,987Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094804.462/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:48:11,008Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:11,043Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:11,175Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:12,185Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:12,265Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:12,266Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:12,459Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:04.462Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:17,534Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:17,538Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094804.462/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:17,539Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:17,544Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:17,608Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:17,614Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:19,457Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,103Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:20,107Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,107Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,389Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,474Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:20,566Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:20,583Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,584Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,844Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:20,853Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:20,854Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:20,859Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:21,003Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:21,060Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:21,080Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[WARN ] 2019-06-19T09:48:21,093Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:48:21,111Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:21,173Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:21,177Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:48:21,180Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:48:21,204Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094804.462/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:21,251Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:21,568Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:21,595Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:21,597Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:21,597Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:21,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:21,604Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094804.462/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:48:21,605Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:21,605Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:21,638Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:21,677Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:21,701Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:21,701Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:21,705Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:04.462Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:22,247Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:22,250Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094804.462/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:22,250Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:22,255Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:22,257Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,258Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,321Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,339Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:22,342Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,342Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,421Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,430Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:22,464Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:22,467Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,467Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,609Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:22,611Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:22,631Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:22,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,634Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:22,646Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,655Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:22,660Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[WARN ] 2019-06-19T09:48:22,663Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:48:22,667Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:22,725Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:22,727Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094804.462/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:22,728Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:22,734Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,738Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:22,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:22,751Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,753Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:22,763Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,763Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:22,763Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:22,763Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:22,769Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094804.462/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:48:22,769Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:22,770Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:22,801Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:22,837Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:22,868Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:22,868Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:22,871Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:04.462Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:23,371Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:23,372Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094804.462/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:23,373Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:23,376Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:23,380Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,380Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,438Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,453Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:23,455Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,455Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,530Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,537Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:23,565Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:23,567Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,567Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,674Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:23,675Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:23,695Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:23,695Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,698Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:23,705Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,712Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:23,715Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[WARN ] 2019-06-19T09:48:23,717Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:48:23,721Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:23,776Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:23,778Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094804.462/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:23,778Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:23,784Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,787Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:23,789Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:23,797Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,798Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:23,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:23,810Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:23,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,820Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:23,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:23,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:23,830Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:23,835Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094804.462/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:48:23,835Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:23,835Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:23,862Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094804.462/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:23,895Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:23,916Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:23,916Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:23,921Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:04.462Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:24,371Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:24,374Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094804.462/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:24,374Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:24,377Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:24,379Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,379Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,445Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,463Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:24,466Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,466Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,529Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,536Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:24,562Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:24,564Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,564Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,665Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:24,666Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:24,682Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:24,682Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,684Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,690Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,695Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:24,698Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[WARN ] 2019-06-19T09:48:24,700Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:48:24,704Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:24,763Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:24,765Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094804.462/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:24,766Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:24,773Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,776Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937700853) {}
[INFO ] 2019-06-19T09:48:24,777Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,786Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,787Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,797Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937702631) {}
[INFO ] 2019-06-19T09:48:24,798Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,806Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,808Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,816Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937703695) {}
[INFO ] 2019-06-19T09:48:24,818Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,826Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,827Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:24,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:24,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937704682) {}
[INFO ] 2019-06-19T09:48:24,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:24,843Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:48:24,848Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:48:24,852Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:48:24,852Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:48:25,140Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331}
[WARN ] 2019-06-19T09:48:25,141Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331}
[INFO ] 2019-06-19T09:48:26,308Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,308Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,400Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,400Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,636Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 40CAB1473C0120292FAE7E4F261BC593E57172055A7948DAB266A56B703A880D to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,637Z [Mock node 1 thread] corda.flow.call - Generating spend for: 9d02f493-43e2-4ba5-b569-29be93cab75a {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[WARN ] 2019-06-19T09:48:26,685Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C2C8F66E24A8C9187BDBBAD96CB022CD3CF389A57ED5A9ACCF5231868834F4BA, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,690Z [Mock node 1 thread] corda.flow.call - Signing transaction for: 9d02f493-43e2-4ba5-b569-29be93cab75a {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,800Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=C9605633827A63D6FEF0AB7075B27411154187E6C9BC59288135A65E9AB840E0}
[INFO ] 2019-06-19T09:48:26,835Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,062Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,064Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,149Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,150Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,150Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000001, flow-id=9d02f493-43e2-4ba5-b569-29be93cab75a, invocation_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, invocation_timestamp=2019-06-19T09:48:24.889Z, origin=Only For Testing, session_id=1dfb2389-a4b6-4bc9-9fec-310074d38d16, session_timestamp=2019-06-19T09:48:24.889Z, thread-id=331, tx_id=93F24465086B9835EC8ECA127D8BF6A1497B2D7C722299C5E551F6BBE1B26455}
[INFO ] 2019-06-19T09:48:27,176Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTC3Db98q1DN1S6QQAEFF3QQukNsTLrTGvgexjPMKHTVD {}
[INFO ] 2019-06-19T09:48:27,232Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTC3Db98q1DN1S6QQAEFF3QQukNsTLrTGvgexjPMKHTVD {fiber-id=10000005, flow-id=ee03187b-0ec1-41c6-86b0-02ef0ffa8c78, invocation_id=ef853272-5d4e-4a11-9e44-92a1da576baa, invocation_timestamp=2019-06-19T09:48:27.213Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=ef853272-5d4e-4a11-9e44-92a1da576baa, session_timestamp=2019-06-19T09:48:27.213Z, thread-id=352}
[INFO ] 2019-06-19T09:48:27,276Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 40CAB1473C0120292FAE7E4F261BC593E57172055A7948DAB266A56B703A880D to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000005, flow-id=ee03187b-0ec1-41c6-86b0-02ef0ffa8c78, invocation_id=ef853272-5d4e-4a11-9e44-92a1da576baa, invocation_timestamp=2019-06-19T09:48:27.213Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=ef853272-5d4e-4a11-9e44-92a1da576baa, session_timestamp=2019-06-19T09:48:27.213Z, thread-id=352}
[INFO ] 2019-06-19T09:48:27,374Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094827.323/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:48:27,375Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:27,375Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:27,404Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:27,435Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:27,439Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:27,439Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:27,446Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:27.323Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:27,977Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:27,979Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094827.323/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:27,979Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:27,982Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:27,984Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:27,985Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,040Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,053Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:28,055Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,055Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,120Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,126Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:28,179Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:28,186Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,186Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,302Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:48:28,308Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:28,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:28,310Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:28,321Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:28,330Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:28,333Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[WARN ] 2019-06-19T09:48:28,335Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:48:28,338Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:28,402Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:28,404Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:48:28,405Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:48:28,406Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094827.323/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:28,407Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:28,416Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:28,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:28,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:28,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:28,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:28,427Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094827.323/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:48:28,427Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:28,428Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:28,457Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:28,491Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:28,518Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:28,518Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:28,521Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:27.323Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:29,000Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:29,002Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094827.323/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:29,002Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:29,005Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:29,008Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,008Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,066Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,080Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:29,081Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,082Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,155Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,164Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:29,191Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:29,192Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,193Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,295Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,297Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:29,313Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:29,313Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,315Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:29,321Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,326Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:29,329Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[WARN ] 2019-06-19T09:48:29,330Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:48:29,334Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:29,383Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:29,385Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094827.323/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:29,386Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:29,392Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,394Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:29,396Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:29,405Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,406Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:29,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:29,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:29,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:29,419Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094827.323/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:48:29,419Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:29,419Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:29,445Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:29,473Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:29,492Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:29,492Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:29,495Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:27.323Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:29,900Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:29,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094827.323/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:29,902Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:29,906Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:29,908Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,908Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,960Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,975Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:29,977Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:29,977Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:30,048Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:30,056Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:30,089Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:30,090Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:30,091Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:30,184Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:30,186Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:30,201Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:30,201Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,203Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:30,208Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,215Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:30,217Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[WARN ] 2019-06-19T09:48:30,219Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:48:30,222Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:30,271Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:30,273Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094827.323/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:30,273Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:30,277Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,279Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:30,280Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:30,287Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,288Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:30,294Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:30,295Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:30,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:30,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:30,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:30,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:30,313Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094827.323/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:48:30,314Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:48:30,314Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:30,339Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094827.323/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:48:30,372Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:48:30,690Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:48:30,691Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:48:30,695Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:48:27.323Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:48:31,082Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:48:31,083Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094827.323/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:48:31,083Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:48:31,086Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:48:31,088Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,088Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,132Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,144Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:48:31,146Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,147Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,200Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,207Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:48:31,233Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:48:31,236Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,236Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,319Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:48:31,320Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:48:31,334Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:48:31,334Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,336Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,341Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,346Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:48:31,349Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[WARN ] 2019-06-19T09:48:31,351Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:48:31,353Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:31,401Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:48:31,403Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094827.323/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:48:31,403Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:48:31,408Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,411Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937708308) {}
[INFO ] 2019-06-19T09:48:31,412Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,420Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,421Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,429Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937709313) {}
[INFO ] 2019-06-19T09:48:31,430Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,437Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,438Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,445Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937710201) {}
[INFO ] 2019-06-19T09:48:31,446Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,453Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,454Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:48:31,461Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,461Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:31,461Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937711334) {}
[INFO ] 2019-06-19T09:48:31,461Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:48:31,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:48:31,462Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:48:31,462Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:48:31,462Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:48:32,113Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,113Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,129Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,129Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,175Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 3510122125324CB71CAACB5D257FBFF69017B1547861CA89B86E449BE82AC320 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,176Z [Mock node 3 thread] corda.flow.call - Generating spend for: 11440bc7-adf9-4206-8a4f-844fd3c2e4e9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[WARN ] 2019-06-19T09:48:32,184Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8A6B5CE58101AAF8BCD80B2E6CD8BC2FC04B92677285A5BFFE2A2D62B92A8FCB, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,186Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 11440bc7-adf9-4206-8a4f-844fd3c2e4e9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,200Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=0EE4CFB3530284E3F9A34EEE1CC2ABC2B2325D99CFAB9F8AA7877F90733EAD4F}
[INFO ] 2019-06-19T09:48:32,217Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,287Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,288Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,294Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,294Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,295Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000007, flow-id=11440bc7-adf9-4206-8a4f-844fd3c2e4e9, invocation_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, invocation_timestamp=2019-06-19T09:48:31.462Z, origin=Only For Testing, session_id=d426bdd6-c3e2-4f01-b4bc-227e9998025b, session_timestamp=2019-06-19T09:48:31.462Z, thread-id=627, tx_id=C1FF8867D4C99EACAE5EC45FDADD5FF7827C8E07A63A120E8895B21988F4EC99}
[INFO ] 2019-06-19T09:48:32,329Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 3510122125324CB71CAACB5D257FBFF69017B1547861CA89B86E449BE82AC320 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000010, flow-id=6d871013-fd7b-4313-b937-ef7ca6222721, invocation_id=909f8762-3bec-40b6-9f1d-5f62cc28442b, invocation_timestamp=2019-06-19T09:48:32.324Z, origin=Only For Testing, session_id=909f8762-3bec-40b6-9f1d-5f62cc28442b, session_timestamp=2019-06-19T09:48:32.324Z, thread-id=648}
[INFO ] 2019-06-19T09:48:32,362Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: F1135DF8E9623A0C88FFE482F0075EBF2A30DD70EDB1AAAF630E14EDB0C95325 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
[INFO ] 2019-06-19T09:48:32,363Z [Mock node 3 thread] corda.flow.call - Generating spend for: 42439418-f4bc-4dc2-806a-2b9ccd80e062 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
[WARN ] 2019-06-19T09:48:32,370Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 8A6B5CE58101AAF8BCD80B2E6CD8BC2FC04B92677285A5BFFE2A2D62B92A8FCB, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
[INFO ] 2019-06-19T09:48:32,372Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 42439418-f4bc-4dc2-806a-2b9ccd80e062 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
[INFO ] 2019-06-19T09:48:32,382Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
[INFO ] 2019-06-19T09:48:32,396Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,445Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyNo5GHu3ErgVkFxKsswrqsCh2JS6tUaXAv52cXehzHvPh {fiber-id=10000013, flow-id=9b247606-0bb8-4d5b-84c2-b8b359171957, invocation_id=60a40c6d-68fb-4fee-a794-9a527c6c85fb, invocation_timestamp=2019-06-19T09:48:32.402Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=60a40c6d-68fb-4fee-a794-9a527c6c85fb, session_timestamp=2019-06-19T09:48:32.402Z, thread-id=647}
[INFO ] 2019-06-19T09:48:32,457Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,458Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,463Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,472Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,505Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,505Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,505Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,509Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyNo5GHu3ErgVkFxKsswrqsCh2JS6tUaXAv52cXehzHvPh {}
[INFO ] 2019-06-19T09:48:32,518Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,525Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,531Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWfL41j2YLvdBDjxoy3auGgpXoa1VLJXMQTauAEmPXRQW {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[WARN ] 2019-06-19T09:48:32,531Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHE4PF7A43zP9FCh1GcDsDPmg7fjgSryWyUjL3Fq9UVqW) {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,532Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648, tx_id=23237AE26568119ED29FEFA363B2F42324B95CF66470B07518D64DF9D14959D5}
[INFO ] 2019-06-19T09:48:32,534Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWfL41j2YLvdBDjxoy3auGgpXoa1VLJXMQTauAEmPXRQW {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,534Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHE4PF7A43zP9FCh1GcDsDPmg7fjgSryWyUjL3Fq9UVqW) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648}
[INFO ] 2019-06-19T09:48:32,535Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWfL41j2YLvdBDjxoy3auGgpXoa1VLJXMQTauAEmPXRQW {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,535Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLHE4PF7A43zP9FCh1GcDsDPmg7fjgSryWyUjL3Fq9UVqW) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=715858fb-fbc3-4c0a-97bb-f79c752668b6, invocation_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, invocation_timestamp=2019-06-19T09:48:32.343Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=4d77887e-bbcf-43ad-9ad7-5c077c5df871, session_timestamp=2019-06-19T09:48:32.343Z, thread-id=648}
[INFO ] 2019-06-19T09:48:32,558Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyNo5GHu3ErgVkFxKsswrqsCh2JS6tUaXAv52cXehzHvPh {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[INFO ] 2019-06-19T09:48:32,559Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWfL41j2YLvdBDjxoy3auGgpXoa1VLJXMQTauAEmPXRQW {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[INFO ] 2019-06-19T09:48:32,563Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWfL41j2YLvdBDjxoy3auGgpXoa1VLJXMQTauAEmPXRQW {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,576Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000011, flow-id=42439418-f4bc-4dc2-806a-2b9ccd80e062, invocation_id=856f05bb-8267-4a41-be41-0ebc734c42f6, invocation_timestamp=2019-06-19T09:48:32.333Z, origin=Only For Testing, session_id=856f05bb-8267-4a41-be41-0ebc734c42f6, session_timestamp=2019-06-19T09:48:32.333Z, thread-id=627}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:48:32,585Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[INFO ] 2019-06-19T09:48:32,588Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841), SessionId(toLong=2326402951004798064)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-2326402951004798064-5685497066416665154)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))]), frozenFiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@15e51fc9, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f) {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[INFO ] 2019-06-19T09:48:32,590Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:48:32,592Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:48:32,613Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] errored, dumping all transitions:

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.555Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=265860AB6E3DA37D7632DB3FE91D1D45B49E0D9800A5FEB81E1AD029D9B1114F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6])
    SignalFlowHasStarted(flowId=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3562111858895977430), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8062542772417729063--1559125153353244841-0-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.555Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), maySkipCheckpoint=false, fiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=265860AB6E3DA37D7632DB3FE91D1D45B49E0D9800A5FEB81E1AD029D9B1114F)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.558Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}), maySkipCheckpoint=false, fiber=1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}), frozenFiber=1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B})
checkpoint.flowState.frozenFiber.hash: 
    7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E
    1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8062542772417729063--1559125153353244841-2-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.565Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), maySkipCheckpoint=false, fiber=C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
checkpoint.flowState.frozenFiber.hash: 
    1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764
    C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.565Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3562111858895977430), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], sessionId=SessionId(toLong=2326402951004798064))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2326402951004798064): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.571Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841), SessionId(toLong=2326402951004798064)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false), frozenFiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9
    0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.574Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=2326402951004798064), initiationEntropy=5685497066416665154, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2326402951004798064-5685497066416665154-4-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))])
checkpoint.sessions.SessionId(toLong=2326402951004798064): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2326402951004798064-5685497066416665154)


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2326402951004798064), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=2697234707768540262)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2326402951004798064).rejectionError: 
    null
    FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.593Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.596Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.597Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[WARN ] 2019-06-19T09:48:32,613Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:48:32,615Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[INFO ] 2019-06-19T09:48:32,671Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[INFO ] 2019-06-19T09:48:32,672Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [2113ab62-15a3-433d-9572-128835a9a526] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), frozenFiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@5be69bc8, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[INFO ] 2019-06-19T09:48:32,672Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:48:32,672Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:48:32,679Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2113ab62-15a3-433d-9572-128835a9a526] errored, dumping all transitions:

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.537Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F34820A91C5ED9FA2A29F48D243CCCEE4062B5B0DEFE86BA04AD8C0FBF0F7B12), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3])
    SignalFlowHasStarted(flowId=[2113ab62-15a3-433d-9572-128835a9a526])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.537Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[2113ab62-15a3-433d-9572-128835a9a526], sessionId=SessionId(toLong=-8062542772417729063))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.538Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.543Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), frozenFiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=F34820A91C5ED9FA2A29F48D243CCCEE4062B5B0DEFE86BA04AD8C0FBF0F7B12)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), frozenFiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.548Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-8062542772417729063), initiationEntropy=-1559125153353244841, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--8062542772417729063--1559125153353244841-1-0), senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--8062542772417729063--1559125153353244841)


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3562111858895977430), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--8062542772417729063--1559125153353244841)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.566Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C}), maySkipCheckpoint=false, fiber=EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C}), frozenFiber=EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C})
checkpoint.flowState.frozenFiber.hash: 
    DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6
    EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3562111858895977430), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--8062542772417729063--1559125153353244841-2-0), senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.570Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), maySkipCheckpoint=false, fiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), frozenFiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
checkpoint.flowState.frozenFiber.hash: 
    EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E
    765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.570Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.670Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ErrorSessionMessage(flowException=null, errorId=2697234707768540262)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).errors: 
    []
    [FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.670Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,679Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2113ab62-15a3-433d-9572-128835a9a526] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:48:32,679Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,682Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] errored, dumping all transitions:

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.555Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=265860AB6E3DA37D7632DB3FE91D1D45B49E0D9800A5FEB81E1AD029D9B1114F), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6])
    SignalFlowHasStarted(flowId=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3562111858895977430), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8062542772417729063--1559125153353244841-0-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2cad7a6]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.555Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), maySkipCheckpoint=false, fiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=265860AB6E3DA37D7632DB3FE91D1D45B49E0D9800A5FEB81E1AD029D9B1114F)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.558Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}), maySkipCheckpoint=false, fiber=1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}), frozenFiber=1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B})
checkpoint.flowState.frozenFiber.hash: 
    7F8766177C1E0B59B57724C9AAF15D9C00FAF8FF2245CF661377EDABA412124E
    1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8062542772417729063--1559125153353244841-2-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.565Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), maySkipCheckpoint=false, fiber=C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))]), frozenFiber=C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
checkpoint.flowState.frozenFiber.hash: 
    1B2A0FE8CF3007A3C9A7325FEFC06DB3859FAB82386F03D0B1F58D4CCF9D6764
    C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.565Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3562111858895977430), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3562111858895977430).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], sessionId=SessionId(toLong=2326402951004798064))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2326402951004798064): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.571Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B, )
  Actions: 
    PersistCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841), SessionId(toLong=2326402951004798064)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false), frozenFiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=3562111858895977430))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    C4BA6CA4BEF7ECC3FBB7453959FB3C56A1CC355869385C8845521CCCD1BCE3F9
    0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@741cadef]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.574Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=2326402951004798064), initiationEntropy=5685497066416665154, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2326402951004798064-5685497066416665154-4-0), senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))=64401E1BFB062CF27FD388F7CE504C84A217CE74026393F1BC00CA858D4DE794}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))])
checkpoint.sessions.SessionId(toLong=2326402951004798064): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2326402951004798064), additionalEntropy=5685497066416665154)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2326402951004798064-5685497066416665154)


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2326402951004798064), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=2697234707768540262)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2326402951004798064).rejectionError: 
    null
    FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.585Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.593Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.596Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.597Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] ---
  Timestamp: 2019-06-19T09:48:32.674Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2697234707768540262)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841)], senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f)
    CreateTransaction
    RemoveCheckpoint(id=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892])
    ReleaseSoftLocks(uuid=3ba112e0-59ce-45b8-a4ae-0b898ee219c1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3562111858895977430), SessionId(toLong=2326402951004798064)])
    RemoveFlow(flowId=[3ba112e0-59ce-45b8-a4ae-0b898ee219c1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Invocation, sessionId=5c256b23-6868-415b-908e-ed28633c54ae, timestamp: 2019-06-19T09:48:32.551Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=3562111858895977430)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8062542772417729063)), errors=[], deduplicationSeed=D--8062542772417729063--1559125153353244841), SessionId(toLong=2326402951004798064)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-2326402951004798064-5685497066416665154)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=2326402951004798064))]), frozenFiber=0AF0DB4E628F4ECFD4B7798E669C3712EAE38DB3B06E2DBFEA9FDF89814DD68B), errorState=Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@15e51fc9, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=cde1a6eb-4cbb-49c4-bc3d-9cb3972a199f))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34b58892]
    []
isRemoved: 
    false
    true
 {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
[WARN ] 2019-06-19T09:48:32,682Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3ba112e0-59ce-45b8-a4ae-0b898ee219c1] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000015, flow-id=3ba112e0-59ce-45b8-a4ae-0b898ee219c1, invocation_id=5c256b23-6868-415b-908e-ed28633c54ae, invocation_timestamp=2019-06-19T09:48:32.551Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=5c256b23-6868-415b-908e-ed28633c54ae, session_timestamp=2019-06-19T09:48:32.551Z, thread-id=649}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:48:32,693Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2113ab62-15a3-433d-9572-128835a9a526] errored, dumping all transitions:

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.537Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=F34820A91C5ED9FA2A29F48D243CCCEE4062B5B0DEFE86BA04AD8C0FBF0F7B12), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3])
    SignalFlowHasStarted(flowId=[2113ab62-15a3-433d-9572-128835a9a526])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@28e7e0c3]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.537Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[2113ab62-15a3-433d-9572-128835a9a526], sessionId=SessionId(toLong=-8062542772417729063))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.538Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.543Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), frozenFiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=F34820A91C5ED9FA2A29F48D243CCCEE4062B5B0DEFE86BA04AD8C0FBF0F7B12)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false), frozenFiber=DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.548Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-8062542772417729063), initiationEntropy=-1559125153353244841, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--8062542772417729063--1559125153353244841-1-0), senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=3BED4A4109CD41811E946CD1683556EC2B013B0E1FFFE7B696BBA156B114D96B}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-8062542772417729063), additionalEntropy=-1559125153353244841)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--8062542772417729063--1559125153353244841)


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3562111858895977430), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--8062542772417729063--1559125153353244841)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.557Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.562Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.566Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C}), maySkipCheckpoint=false, fiber=EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C}), frozenFiber=EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C})
checkpoint.flowState.frozenFiber.hash: 
    DFD8C6A665F9276B909A81F5A6C616C7D2914050452FE4C71C05BEFD5DA69AE6
    EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55c1fddc, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5818934e]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3562111858895977430), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--8062542772417729063--1559125153353244841-2-0), senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.567Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.570Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), maySkipCheckpoint=false, fiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A, )
  Actions: 
    PersistCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), frozenFiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))=2A87024BECA90CAB2988D95FD0D4FB77841EB0CCC1B7A82597D61DB125171C3C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))])
checkpoint.flowState.frozenFiber.hash: 
    EE81D2DA22255AE35BF135CB9835995420784543D6DC76C380333A1DA380240E
    765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.570Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.670Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8062542772417729063), payload=ErrorSessionMessage(flowException=null, errorId=2697234707768540262)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8062542772417729063).errors: 
    []
    [FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672]


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.670Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.672Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [2113ab62-15a3-433d-9572-128835a9a526] ---
  Timestamp: 2019-06-19T09:48:32.681Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2697234707768540262)], sessions=[], senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7)
    CreateTransaction
    RemoveCheckpoint(id=[2113ab62-15a3-433d-9572-128835a9a526])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672])
    ReleaseSoftLocks(uuid=2113ab62-15a3-433d-9572-128835a9a526)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8062542772417729063)])
    RemoveFlow(flowId=[2113ab62-15a3-433d-9572-128835a9a526], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Invocation, sessionId=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, timestamp: 2019-06-19T09:48:32.510Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-8062542772417729063)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3562111858895977430)), errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--8062542772417729063--1559125153353244841)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-8062542772417729063))]), frozenFiber=765612CD3F606B765C27175C6FA3B819CB55E493A330B250F08D75E8B25EDB9A), errorState=Errored(errors=[FlowError(errorId=2697234707768540262, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@5be69bc8, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a60c8e7e-7e7c-476d-8c61-ca0ba40959f7))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1ae36672]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
[WARN ] 2019-06-19T09:48:32,693Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [2113ab62-15a3-433d-9572-128835a9a526] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=2113ab62-15a3-433d-9572-128835a9a526, invocation_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, invocation_timestamp=2019-06-19T09:48:32.510Z, origin=Only For Testing, session_id=f9c97bcb-f965-4fff-88a8-6d3b89dd5f27, session_timestamp=2019-06-19T09:48:32.510Z, thread-id=648}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:49:26,874Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094919.975/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:49:26,902Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:49:26,943Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:27,091Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:28,304Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:49:28,437Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:49:28,438Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:49:28,646Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:49:19.975Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:49:33,430Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:49:33,434Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094919.975/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:49:33,434Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:49:33,440Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:49:33,510Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:33,516Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:35,504Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,187Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:49:36,191Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,191Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,443Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,521Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:49:36,613Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:49:36,630Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,630Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,926Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:49:36,937Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:49:36,937Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:36,942Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:37,186Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:37,253Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:49:37,273Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[WARN ] 2019-06-19T09:49:37,287Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:49:37,306Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:37,379Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:49:37,385Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:49:37,389Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:49:37,418Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094919.975/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:49:37,469Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:49:37,830Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:37,858Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:37,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:37,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:37,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:37,867Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094919.975/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:49:37,867Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:49:37,867Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:37,903Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:37,947Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:49:37,972Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:49:37,972Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:49:37,976Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:49:19.975Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:49:38,590Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:49:38,593Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094919.975/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:49:38,593Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:49:38,596Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:49:38,598Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,598Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,662Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,682Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:49:38,684Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,684Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,771Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,781Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:49:38,831Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:49:38,834Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,834Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,982Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:38,984Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:49:39,007Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:49:39,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,009Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:39,017Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,025Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:49:39,029Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[WARN ] 2019-06-19T09:49:39,030Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:49:39,035Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:39,091Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:49:39,094Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094919.975/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:49:39,094Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:49:39,102Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,107Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:39,109Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:39,122Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,124Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:39,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:39,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:39,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:39,142Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094919.975/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:49:39,143Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:49:39,143Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:39,171Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:39,206Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:49:39,229Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:49:39,229Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:49:39,233Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:49:19.975Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:49:39,702Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:49:39,704Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094919.975/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:49:39,704Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:49:39,708Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:49:39,712Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,712Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,771Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,788Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:49:39,790Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,790Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,877Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,885Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:49:39,921Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:49:39,922Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:39,922Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,047Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,049Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:49:40,068Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:49:40,068Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,070Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:40,078Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,088Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:49:40,093Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[WARN ] 2019-06-19T09:49:40,096Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:49:40,098Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:40,159Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:49:40,161Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094919.975/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:49:40,162Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:49:40,169Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:40,175Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:40,186Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,188Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:40,199Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:40,200Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:40,210Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,212Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:40,221Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:40,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:40,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:40,228Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-094919.975/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:49:40,228Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:49:40,228Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:40,260Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-094919.975/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:49:40,295Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:49:40,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:49:40,316Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:49:40,322Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:49:19.975Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:49:40,816Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:49:40,819Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-094919.975/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:49:40,820Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:49:40,823Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:49:40,826Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,826Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,890Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,934Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:49:40,937Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:40,937Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:41,011Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:41,020Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:49:41,050Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:49:41,051Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:41,052Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:41,160Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:49:41,161Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:49:41,180Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:49:41,180Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,182Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,188Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,195Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:49:41,198Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[WARN ] 2019-06-19T09:49:41,200Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:49:41,204Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:41,257Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:49:41,259Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-094919.975/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:49:41,260Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:49:41,266Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,270Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937776937) {}
[INFO ] 2019-06-19T09:49:41,271Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,280Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,281Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,292Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937779007) {}
[INFO ] 2019-06-19T09:49:41,294Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,303Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,311Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937780068) {}
[INFO ] 2019-06-19T09:49:41,313Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,322Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:49:41,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:41,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937781180) {}
[INFO ] 2019-06-19T09:49:41,331Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:49:41,339Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:49:41,343Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:49:41,347Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:49:41,348Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:49:41,644Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=9e6568f0-c607-4a14-a543-d4db6f3ca46a, invocation_id=f20a0021-2377-45b6-830d-f7982991a435, invocation_timestamp=2019-06-19T09:49:41.388Z, origin=Only For Testing, session_id=f20a0021-2377-45b6-830d-f7982991a435, session_timestamp=2019-06-19T09:49:41.388Z, thread-id=333}
[WARN ] 2019-06-19T09:49:41,644Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=9e6568f0-c607-4a14-a543-d4db6f3ca46a, invocation_id=f20a0021-2377-45b6-830d-f7982991a435, invocation_timestamp=2019-06-19T09:49:41.388Z, origin=Only For Testing, session_id=f20a0021-2377-45b6-830d-f7982991a435, session_timestamp=2019-06-19T09:49:41.388Z, thread-id=333}
[INFO ] 2019-06-19T09:50:37,635Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095029.606/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:50:37,665Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:50:37,720Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:37,931Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:39,233Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:50:39,341Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:50:39,342Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:50:39,593Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:29.606Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:50:45,843Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:50:45,850Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095029.606/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:50:45,850Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:50:45,856Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:50:45,921Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:45,926Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:48,322Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:49,128Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:50:49,135Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:49,136Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:49,741Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:49,865Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:50:50,050Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:50:50,075Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:50,075Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:50,727Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:50,745Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:50:50,745Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:50,756Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:50,996Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:51,082Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:50:51,109Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[WARN ] 2019-06-19T09:50:51,125Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:50:51,146Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:51,229Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:50:51,238Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:50:51,242Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:50:51,285Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095029.606/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:50:51,381Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:50:51,931Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:51,970Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:51,972Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:51,972Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:51,973Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:51,982Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095029.606/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:50:51,983Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:50:51,983Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:52,064Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:52,146Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:50:52,183Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:50:52,183Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:50:52,191Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:29.606Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:50:52,957Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:50:52,961Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095029.606/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:50:52,961Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:50:52,967Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:50:52,971Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:52,971Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,103Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,136Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:50:53,139Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,139Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,299Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,318Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:50:53,386Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:50:53,390Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,390Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,640Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:53,643Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:50:53,681Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:50:53,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,685Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:53,702Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,719Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:50:53,726Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[WARN ] 2019-06-19T09:50:53,730Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:50:53,736Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:53,812Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:50:53,817Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095029.606/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:50:53,817Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:50:53,831Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,836Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:53,839Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:53,857Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,860Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:53,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:53,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:53,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:53,886Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095029.606/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:50:53,887Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:50:53,887Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:53,963Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:54,002Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:50:54,030Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:50:54,031Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:50:54,037Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:29.606Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:50:54,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:50:54,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095029.606/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:50:54,861Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:50:54,867Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:50:54,871Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:54,872Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:54,985Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,014Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:50:55,018Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,018Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,167Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,184Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:50:55,243Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:50:55,244Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,245Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,466Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:55,470Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:50:55,496Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:50:55,496Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,500Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:55,513Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,527Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:50:55,533Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[WARN ] 2019-06-19T09:50:55,540Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:50:55,544Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:55,616Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:50:55,620Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095029.606/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:50:55,620Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:50:55,633Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,640Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:55,643Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:55,661Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,663Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:55,683Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:55,685Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:55,703Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,706Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:55,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:55,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:55,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:55,728Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095029.606/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:50:55,729Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:50:55,729Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:55,767Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095029.606/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:55,810Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:50:55,838Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:50:55,838Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:50:55,847Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:29.606Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:50:56,498Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:50:56,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095029.606/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:50:56,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:50:56,507Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:50:56,510Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,510Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,616Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,640Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:50:56,643Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,644Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,770Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,785Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:50:56,843Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:50:56,845Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:56,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:57,068Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:57,071Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:50:57,096Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:50:57,096Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,100Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,113Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,127Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:50:57,133Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[WARN ] 2019-06-19T09:50:57,140Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:50:57,143Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:57,208Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:50:57,211Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095029.606/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:50:57,212Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:50:57,224Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,230Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937850745) {}
[INFO ] 2019-06-19T09:50:57,233Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,248Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,251Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,270Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937853681) {}
[INFO ] 2019-06-19T09:50:57,272Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,289Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,291Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,309Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937855496) {}
[INFO ] 2019-06-19T09:50:57,311Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,329Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:50:57,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:57,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937857096) {}
[INFO ] 2019-06-19T09:50:57,347Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:50:57,356Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:50:57,361Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:50:57,362Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:50:58,352Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: A4327D1C1670B41CF4C709B331B431FD682862F3F56E03245AFF506883CBEDC8 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000002, flow-id=7f1b1579-8479-425a-a4c0-f6810c116431, invocation_id=7d0ddcf9-c82c-4b96-aa7b-e3a12d3fea60, invocation_timestamp=2019-06-19T09:50:58.231Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7d0ddcf9-c82c-4b96-aa7b-e3a12d3fea60, session_timestamp=2019-06-19T09:50:58.231Z, thread-id=333}
[INFO ] 2019-06-19T09:50:58,743Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095058.643/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:50:58,743Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:50:58,743Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:58,775Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:50:58,812Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:50:58,817Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:50:58,817Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:50:58,825Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:58.643Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:50:59,417Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:50:59,420Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095058.643/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:50:59,420Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:50:59,425Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:50:59,429Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,429Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,522Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,545Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:50:59,548Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,548Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,666Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,681Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:50:59,773Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:50:59,780Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,780Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,973Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:50:59,980Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:50:59,981Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:50:59,984Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:00,013Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:00,034Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:00,040Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[WARN ] 2019-06-19T09:51:00,045Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:51:00,050Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:00,107Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:00,110Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:51:00,110Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:51:00,112Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095058.643/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:00,112Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:00,124Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:00,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:00,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:00,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:00,129Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:00,137Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095058.643/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:51:00,137Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:00,137Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:00,166Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:00,205Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:00,228Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:00,228Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:00,233Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:58.643Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:00,767Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:00,771Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095058.643/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:00,771Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:00,775Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:00,778Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:00,778Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:00,869Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:00,891Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:00,893Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:00,894Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:01,006Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:01,020Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:01,069Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:01,071Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:01,071Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:01,257Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:01,260Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:01,285Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:01,285Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,289Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:01,299Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,313Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:01,318Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[WARN ] 2019-06-19T09:51:01,322Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:51:01,328Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:01,384Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:01,387Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095058.643/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:01,388Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:01,414Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,422Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:01,424Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:01,443Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,445Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:01,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:01,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:01,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:01,467Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095058.643/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:51:01,467Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:01,468Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:01,497Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:01,536Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:01,559Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:01,559Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:01,564Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:58.643Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:02,083Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:02,086Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095058.643/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:02,086Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:02,091Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:02,094Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,094Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,200Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,217Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:02,220Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,220Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,324Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,337Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:02,379Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:02,380Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,381Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,549Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:02,551Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:02,573Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:02,573Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,576Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:02,586Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,597Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:02,602Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[WARN ] 2019-06-19T09:51:02,606Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:51:02,610Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:02,671Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:02,674Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095058.643/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:02,674Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:02,683Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,688Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:02,690Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:02,703Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,705Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:02,719Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:02,721Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:02,735Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,737Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:02,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:02,749Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:02,750Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:02,755Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095058.643/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:51:02,756Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:02,756Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:02,784Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095058.643/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:02,822Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:02,842Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:02,842Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:02,849Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:50:58.643Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:03,386Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:03,390Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095058.643/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:03,391Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:03,396Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:03,400Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,400Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,490Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,510Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:03,513Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,513Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,629Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,643Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:03,694Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:03,705Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,706Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,882Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:03,884Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:03,906Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:03,906Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:03,910Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:03,922Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:03,932Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:03,937Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[WARN ] 2019-06-19T09:51:03,940Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:51:03,943Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:03,999Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:04,003Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095058.643/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:04,003Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:04,014Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,019Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937859980) {}
[INFO ] 2019-06-19T09:51:04,022Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,039Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,042Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,056Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937861285) {}
[INFO ] 2019-06-19T09:51:04,059Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,074Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,076Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,091Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937862573) {}
[INFO ] 2019-06-19T09:51:04,093Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,109Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,112Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:04,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:04,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937863906) {}
[INFO ] 2019-06-19T09:51:04,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:04,133Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:51:04,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:51:04,137Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:04,137Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:51:04,233Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608}
[WARN ] 2019-06-19T09:51:04,233Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608}
[INFO ] 2019-06-19T09:51:07,202Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,203Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,329Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,330Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,524Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 698E93861D17471796D53136E07B09BF944A89AEAB90C6F64827DC10C7F83639 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,526Z [Mock node 1 thread] corda.flow.call - Generating spend for: a48a1310-6d4d-4222-912b-8892956b2a5a {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[WARN ] 2019-06-19T09:51:07,596Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 203BA43262B56455731DAE01A821D5859F9674E5ADC16C31AB13FBCDE216151C, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,602Z [Mock node 1 thread] corda.flow.call - Signing transaction for: a48a1310-6d4d-4222-912b-8892956b2a5a {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,766Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=7A5086BECD43AF04A27FB731FAFEAA84D496C93B99ACF01B4FB3060E8E43F0E0}
[INFO ] 2019-06-19T09:51:07,835Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,207Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,211Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,270Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,270Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,271Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=a48a1310-6d4d-4222-912b-8892956b2a5a, invocation_id=67c66611-87f8-466d-a136-c043a84c2fd7, invocation_timestamp=2019-06-19T09:51:04.148Z, origin=Only For Testing, session_id=67c66611-87f8-466d-a136-c043a84c2fd7, session_timestamp=2019-06-19T09:51:04.148Z, thread-id=608, tx_id=5BA8195C9B1433E3EC0427ACD2F450DEF13593F8BB41641109E0C5B64239895B}
[INFO ] 2019-06-19T09:51:08,296Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLyF5def4MrWwt84P4JHWxtVtorrpwSm1dSiWq2VFRSxZ {}
[INFO ] 2019-06-19T09:51:08,378Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLyF5def4MrWwt84P4JHWxtVtorrpwSm1dSiWq2VFRSxZ {fiber-id=10000007, flow-id=64e33bf7-d1c3-409b-916e-3a6ecf52d0d1, invocation_id=c3e377f3-6e6f-4f07-8d49-81cbd70531d2, invocation_timestamp=2019-06-19T09:51:08.345Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=c3e377f3-6e6f-4f07-8d49-81cbd70531d2, session_timestamp=2019-06-19T09:51:08.345Z, thread-id=629}
[INFO ] 2019-06-19T09:51:08,476Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 698E93861D17471796D53136E07B09BF944A89AEAB90C6F64827DC10C7F83639 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000007, flow-id=64e33bf7-d1c3-409b-916e-3a6ecf52d0d1, invocation_id=c3e377f3-6e6f-4f07-8d49-81cbd70531d2, invocation_timestamp=2019-06-19T09:51:08.345Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=c3e377f3-6e6f-4f07-8d49-81cbd70531d2, session_timestamp=2019-06-19T09:51:08.345Z, thread-id=629}
[INFO ] 2019-06-19T09:51:08,596Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095108.534/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:51:08,596Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:08,597Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:08,628Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:08,666Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:08,670Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:08,670Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:08,676Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:08.534Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:09,157Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:09,159Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095108.534/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:09,160Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:09,163Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:09,166Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,166Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,253Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,273Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:09,275Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,276Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,378Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,390Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:09,472Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:09,479Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,480Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,647Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:09,653Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:09,654Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:09,677Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:09,695Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:09,709Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:09,713Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[WARN ] 2019-06-19T09:51:09,717Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:51:09,720Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:09,774Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:09,776Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:51:09,777Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:51:09,777Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095108.534/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:09,778Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:09,786Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:09,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:09,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:09,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:09,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:09,795Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095108.534/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:51:09,796Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:09,796Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:09,825Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:09,860Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:09,883Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:09,883Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:09,889Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:08.534Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:10,351Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:10,353Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095108.534/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:10,353Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:10,357Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:10,359Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,359Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,433Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,451Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:10,455Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,455Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,551Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,564Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:10,597Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:10,598Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,599Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,750Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:10,752Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:10,773Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:10,773Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,776Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:10,785Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,794Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:10,798Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[WARN ] 2019-06-19T09:51:10,802Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:51:10,804Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:10,858Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:10,861Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095108.534/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:10,861Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:10,872Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,878Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:10,880Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:10,894Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,896Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:10,912Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,913Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:10,913Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:10,913Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:10,920Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095108.534/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:51:10,920Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:10,921Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:10,949Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:10,982Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:11,000Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:11,001Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:11,005Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:08.534Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:11,441Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:11,443Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095108.534/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:11,443Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:11,447Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:11,449Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,449Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,524Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,540Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:11,542Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,542Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,632Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,642Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:11,673Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:11,674Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,674Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,818Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:11,820Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:11,839Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:11,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,842Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:11,849Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,858Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:11,863Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[WARN ] 2019-06-19T09:51:11,865Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:51:11,869Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:11,922Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:11,925Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095108.534/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:11,926Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:11,933Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,936Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:11,937Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:11,950Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,952Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:11,964Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:11,966Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:11,978Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,980Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:11,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:11,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:11,992Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:11,998Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095108.534/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:51:11,999Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:11,999Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:12,026Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095108.534/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:12,061Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:12,081Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:12,081Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:12,085Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:08.534Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:12,496Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:12,499Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095108.534/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:12,499Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:12,502Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:12,505Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,505Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,573Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,593Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:12,597Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,597Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,694Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,705Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:12,737Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:12,738Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,739Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,885Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:12,887Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:12,907Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:12,907Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:12,909Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:12,918Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:12,953Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:12,958Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[WARN ] 2019-06-19T09:51:12,961Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:51:12,964Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:13,018Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:13,022Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095108.534/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:13,022Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:13,032Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937869653) {}
[INFO ] 2019-06-19T09:51:13,038Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,050Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,052Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,066Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937870773) {}
[INFO ] 2019-06-19T09:51:13,068Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,082Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,084Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,097Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937871839) {}
[INFO ] 2019-06-19T09:51:13,099Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,113Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937872907) {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:51:13,125Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:51:13,126Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:13,126Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:14,178Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,178Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,204Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,204Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,320Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: B94D2ED4BA40D01EA571C08555C0D652BBCCF5F121C62D0CEB8DFC2D0DA0AECC to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,321Z [Mock node 3 thread] corda.flow.call - Generating spend for: 288debd4-68a3-4b60-b6cb-d565dbb4713e {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[WARN ] 2019-06-19T09:51:14,338Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C1470778F43A49A01F1E7FCE221EA78602F9895C0FE55133868E123F13742BF8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,341Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 288debd4-68a3-4b60-b6cb-d565dbb4713e {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,373Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=3EFC4C3E922F2C1569FFFD23EAD57FDD6AA2DB22833F41B0A44E0D86E1DB2F72}
[INFO ] 2019-06-19T09:51:14,418Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,598Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,599Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,614Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,615Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,615Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=288debd4-68a3-4b60-b6cb-d565dbb4713e, invocation_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, invocation_timestamp=2019-06-19T09:51:13.126Z, origin=Only For Testing, session_id=47b6ebb6-2ec5-4dca-805f-cabdd7b61ab5, session_timestamp=2019-06-19T09:51:13.126Z, thread-id=904, tx_id=5C43611EF9D3515B59CDEFFB98F5E3B5DD5D903393FDFB54A1A80C495387B8B1}
[INFO ] 2019-06-19T09:51:14,637Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: B94D2ED4BA40D01EA571C08555C0D652BBCCF5F121C62D0CEB8DFC2D0DA0AECC to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=02de2232-f5f6-457a-a5e8-8df13b41ff86, invocation_id=88012cf8-a01f-4289-987d-eb5a3507409a, invocation_timestamp=2019-06-19T09:51:14.629Z, origin=Only For Testing, session_id=88012cf8-a01f-4289-987d-eb5a3507409a, session_timestamp=2019-06-19T09:51:14.629Z, thread-id=926}
[INFO ] 2019-06-19T09:51:14,713Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 436FB2B9A1FE607E15A59C2E77FA932B09590E197CA0005F28CEAFBA8B068197 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
[INFO ] 2019-06-19T09:51:14,714Z [Mock node 3 thread] corda.flow.call - Generating spend for: 05b9b910-b490-4c92-b828-2c971b57eea2 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
[WARN ] 2019-06-19T09:51:14,728Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key C1470778F43A49A01F1E7FCE221EA78602F9895C0FE55133868E123F13742BF8, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
[INFO ] 2019-06-19T09:51:14,732Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 05b9b910-b490-4c92-b828-2c971b57eea2 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
[INFO ] 2019-06-19T09:51:14,752Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
[INFO ] 2019-06-19T09:51:14,787Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:14,909Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQC7tyccWGF5nYcajQq3y3n8Mxmf1Agza49UaYnudCVKG {fiber-id=10000015, flow-id=a7ad1127-3e1c-4302-be0a-92bb73f451d0, invocation_id=8dc0f248-e638-479b-ad3d-d0e8e307e3ae, invocation_timestamp=2019-06-19T09:51:14.803Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8dc0f248-e638-479b-ad3d-d0e8e307e3ae, session_timestamp=2019-06-19T09:51:14.803Z, thread-id=924}
[INFO ] 2019-06-19T09:51:14,937Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:14,939Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:14,951Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:14,973Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,063Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,063Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,063Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,074Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQC7tyccWGF5nYcajQq3y3n8Mxmf1Agza49UaYnudCVKG {}
[INFO ] 2019-06-19T09:51:15,101Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,116Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,129Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVNFaSZyAomDG3KSWbwp7m3fwYfoNEHS4r9qXm92x7BGV {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[WARN ] 2019-06-19T09:51:15,129Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5YF6veogZRsRG6XhvATo6nyPprjWKtAwGnVbDLF1khSN) {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,131Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926, tx_id=6C09D0BC9379AF562A3311B19D24080B53D7CA958173907FF090736934FA4561}
[INFO ] 2019-06-19T09:51:15,136Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVNFaSZyAomDG3KSWbwp7m3fwYfoNEHS4r9qXm92x7BGV {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,136Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5YF6veogZRsRG6XhvATo6nyPprjWKtAwGnVbDLF1khSN) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926}
[INFO ] 2019-06-19T09:51:15,136Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVNFaSZyAomDG3KSWbwp7m3fwYfoNEHS4r9qXm92x7BGV {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,137Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5YF6veogZRsRG6XhvATo6nyPprjWKtAwGnVbDLF1khSN) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=be993173-6ea1-48b0-8bfe-8dba4ccc3e94, invocation_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, invocation_timestamp=2019-06-19T09:51:14.665Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d7312dc4-844f-49e6-b96b-ce70e08515ed, session_timestamp=2019-06-19T09:51:14.665Z, thread-id=926}
[INFO ] 2019-06-19T09:51:15,191Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQC7tyccWGF5nYcajQq3y3n8Mxmf1Agza49UaYnudCVKG {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[INFO ] 2019-06-19T09:51:15,192Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVNFaSZyAomDG3KSWbwp7m3fwYfoNEHS4r9qXm92x7BGV {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[INFO ] 2019-06-19T09:51:15,203Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyVNFaSZyAomDG3KSWbwp7m3fwYfoNEHS4r9qXm92x7BGV {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,238Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=05b9b910-b490-4c92-b828-2c971b57eea2, invocation_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, invocation_timestamp=2019-06-19T09:51:14.645Z, origin=Only For Testing, session_id=12a3684a-d2c5-41e2-8e86-cfe7d6563e8c, session_timestamp=2019-06-19T09:51:14.645Z, thread-id=904}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:51:15,255Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[INFO ] 2019-06-19T09:51:15,258Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [3af0e80f-191d-41e5-9e32-b453bbce26db] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881), SessionId(toLong=7771312461760393466)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-7771312461760393466-1936062814633877916)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))]), frozenFiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@4ecda5fb, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=afba747a-8c84-4a27-823a-82c35976db91) {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[INFO ] 2019-06-19T09:51:15,260Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:51:15,262Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:51:15,318Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3af0e80f-191d-41e5-9e32-b453bbce26db] errored, dumping all transitions:

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.180Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2BF0E0E3D7E0291D873E2B7FEA3748E022D2726F1C124A078810BB2D1871FD4A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0])
    SignalFlowHasStarted(flowId=[3af0e80f-191d-41e5-9e32-b453bbce26db])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2551309926762175285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2094128830258971954-2661427209690986881-0-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.180Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.188Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), maySkipCheckpoint=false, fiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2BF0E0E3D7E0291D873E2B7FEA3748E022D2726F1C124A078810BB2D1871FD4A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.188Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.199Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}), maySkipCheckpoint=false, fiber=10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}), frozenFiber=10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C})
checkpoint.flowState.frozenFiber.hash: 
    94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B
    10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.200Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2094128830258971954-2661427209690986881-2-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.210Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), maySkipCheckpoint=false, fiber=AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
checkpoint.flowState.frozenFiber.hash: 
    10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D
    AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.215Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2551309926762175285), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.216Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3af0e80f-191d-41e5-9e32-b453bbce26db], sessionId=SessionId(toLong=7771312461760393466))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7771312461760393466): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.227Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881), SessionId(toLong=7771312461760393466)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false), frozenFiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35
    9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.232Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=7771312461760393466), initiationEntropy=1936062814633877916, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7771312461760393466-1936062814633877916-4-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))])
checkpoint.sessions.SessionId(toLong=7771312461760393466): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7771312461760393466-1936062814633877916)


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.254Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7771312461760393466), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=1367700779484966818)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7771312461760393466).rejectionError: 
    null
    FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.254Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.263Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.267Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.268Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[WARN ] 2019-06-19T09:51:15,318Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3af0e80f-191d-41e5-9e32-b453bbce26db] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:51:15,320Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[INFO ] 2019-06-19T09:51:15,408Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[INFO ] 2019-06-19T09:51:15,409Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), frozenFiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@4cac9d55, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[INFO ] 2019-06-19T09:51:15,409Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:51:15,410Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:51:15,422Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] errored, dumping all transitions:

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=2AB2D5518580B4FFE067EA7DFFE42B3AF1F3BD77A31097D89A4112209B6A602D), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e])
    SignalFlowHasStarted(flowId=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], sessionId=SessionId(toLong=2094128830258971954))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.154Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), frozenFiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=2AB2D5518580B4FFE067EA7DFFE42B3AF1F3BD77A31097D89A4112209B6A602D)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), frozenFiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.166Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=2094128830258971954), initiationEntropy=2661427209690986881, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2094128830258971954-2661427209690986881-1-0), senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2094128830258971954-2661427209690986881)


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.183Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2551309926762175285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2094128830258971954-2661427209690986881)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.184Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.201Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.201Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.213Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94}), maySkipCheckpoint=false, fiber=819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94}), frozenFiber=819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94})
checkpoint.flowState.frozenFiber.hash: 
    47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87
    819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.214Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2551309926762175285), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2094128830258971954-2661427209690986881-2-0), senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.214Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.221Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), maySkipCheckpoint=false, fiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), frozenFiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
checkpoint.flowState.frozenFiber.hash: 
    819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3
    FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.407Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ErrorSessionMessage(flowException=null, errorId=1367700779484966818)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).errors: 
    []
    [FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.407Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.410Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.410Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.411Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,422Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:51:15,423Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,427Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3af0e80f-191d-41e5-9e32-b453bbce26db] errored, dumping all transitions:

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.180Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2BF0E0E3D7E0291D873E2B7FEA3748E022D2726F1C124A078810BB2D1871FD4A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0])
    SignalFlowHasStarted(flowId=[3af0e80f-191d-41e5-9e32-b453bbce26db])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2551309926762175285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2094128830258971954-2661427209690986881-0-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3d5b3dd0]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.180Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.188Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), maySkipCheckpoint=false, fiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2BF0E0E3D7E0291D873E2B7FEA3748E022D2726F1C124A078810BB2D1871FD4A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.188Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.199Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}), maySkipCheckpoint=false, fiber=10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}), frozenFiber=10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C})
checkpoint.flowState.frozenFiber.hash: 
    94C083D6DEF338600898A654E493C4BE3658DEF2A5BCFBC7DFD28962CD9ABC7B
    10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.200Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2094128830258971954-2661427209690986881-2-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.210Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), maySkipCheckpoint=false, fiber=AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))]), frozenFiber=AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
checkpoint.flowState.frozenFiber.hash: 
    10EC9150C84E06117129BC6817C60AD378E39DDB4846810BC54D904BF0820A3D
    AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.215Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2551309926762175285), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.216Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-2551309926762175285).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3af0e80f-191d-41e5-9e32-b453bbce26db], sessionId=SessionId(toLong=7771312461760393466))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7771312461760393466): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.217Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.227Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E, )
  Actions: 
    PersistCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881), SessionId(toLong=7771312461760393466)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false), frozenFiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-2551309926762175285))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    AEDE35D18DE2E2CB334B95F37B718A8718A06AA8580F3D2C932DB88FC1249D35
    9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73210b29]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.232Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=7771312461760393466), initiationEntropy=1936062814633877916, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-7771312461760393466-1936062814633877916-4-0), senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))=E85751E2013069525EFC38D501D29E013827DFA6E681CF8FC6C5086298D7BD46}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))])
checkpoint.sessions.SessionId(toLong=7771312461760393466): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=7771312461760393466), additionalEntropy=1936062814633877916)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-7771312461760393466-1936062814633877916)


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.254Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7771312461760393466), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=1367700779484966818)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7771312461760393466).rejectionError: 
    null
    FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.254Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.255Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.263Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.267Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.268Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3af0e80f-191d-41e5-9e32-b453bbce26db] ---
  Timestamp: 2019-06-19T09:51:15.413Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1367700779484966818)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881)], senderUUID=afba747a-8c84-4a27-823a-82c35976db91)
    CreateTransaction
    RemoveCheckpoint(id=[3af0e80f-191d-41e5-9e32-b453bbce26db])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f])
    ReleaseSoftLocks(uuid=3af0e80f-191d-41e5-9e32-b453bbce26db)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2551309926762175285), SessionId(toLong=7771312461760393466)])
    RemoveFlow(flowId=[3af0e80f-191d-41e5-9e32-b453bbce26db], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Invocation, sessionId=1577da53-af04-4a82-a70a-22ae4734f0af, timestamp: 2019-06-19T09:51:15.172Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-2551309926762175285)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2094128830258971954)), errors=[], deduplicationSeed=D-2094128830258971954-2661427209690986881), SessionId(toLong=7771312461760393466)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-7771312461760393466-1936062814633877916)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=7771312461760393466))]), frozenFiber=9C8B3D0E340D2C8D153C5AE6320CEAC59D4EFF291A871027CF8F979994311B6E), errorState=Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@4ecda5fb, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=afba747a-8c84-4a27-823a-82c35976db91))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c84353f]
    []
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
[WARN ] 2019-06-19T09:51:15,427Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3af0e80f-191d-41e5-9e32-b453bbce26db] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=3af0e80f-191d-41e5-9e32-b453bbce26db, invocation_id=1577da53-af04-4a82-a70a-22ae4734f0af, invocation_timestamp=2019-06-19T09:51:15.172Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=1577da53-af04-4a82-a70a-22ae4734f0af, session_timestamp=2019-06-19T09:51:15.172Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:51:15,433Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] errored, dumping all transitions:

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=2AB2D5518580B4FFE067EA7DFFE42B3AF1F3BD77A31097D89A4112209B6A602D), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e])
    SignalFlowHasStarted(flowId=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@9da078e]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], sessionId=SessionId(toLong=2094128830258971954))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.141Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.154Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), frozenFiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=2AB2D5518580B4FFE067EA7DFFE42B3AF1F3BD77A31097D89A4112209B6A602D)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false), frozenFiber=47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.166Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=2094128830258971954), initiationEntropy=2661427209690986881, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2094128830258971954-2661427209690986881-1-0), senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=A638CD1DB1DAD2B9B985B93D6579ABB5D57D763A5489086041F53CF8F70E6F1C}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=2094128830258971954), additionalEntropy=2661427209690986881)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2094128830258971954-2661427209690986881)


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.183Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2551309926762175285), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-2094128830258971954-2661427209690986881)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.184Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.201Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.201Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.213Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94}), maySkipCheckpoint=false, fiber=819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94}), frozenFiber=819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94})
checkpoint.flowState.frozenFiber.hash: 
    47F3EED222D4C87A0333F742CD24985597088AF439105C4E729F398ACEA16D87
    819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5831b7bf, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c9ff3b4]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.214Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2551309926762175285), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-2094128830258971954-2661427209690986881-2-0), senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.214Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.221Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), maySkipCheckpoint=false, fiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC, )
  Actions: 
    PersistCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), frozenFiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))=0FC26F14A26A5783AD52388FD333311C7AFE788F4ECADD4C482B8B09B75B5A94})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))])
checkpoint.flowState.frozenFiber.hash: 
    819218CE08C06361C2819A5D4ADC0C30F9D7C7476B3BA6A03608EC2D59FDF3E3
    FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.407Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2094128830258971954), payload=ErrorSessionMessage(flowException=null, errorId=1367700779484966818)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2094128830258971954).errors: 
    []
    [FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386]


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.407Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.410Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.410Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.411Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] ---
  Timestamp: 2019-06-19T09:51:15.425Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1367700779484966818)], sessions=[], senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc)
    CreateTransaction
    RemoveCheckpoint(id=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386])
    ReleaseSoftLocks(uuid=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2094128830258971954)])
    RemoveFlow(flowId=[f09bbb45-bfee-419d-b91d-b2bcf0a87c5b], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Invocation, sessionId=36c8045d-8560-4db0-8762-67e02582d16d, timestamp: 2019-06-19T09:51:15.074Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=2094128830258971954)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2551309926762175285)), errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-2094128830258971954-2661427209690986881)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=2094128830258971954))]), frozenFiber=FC7A2FDDE00A1AC1EC65259849DB124D0E0F0CF08DCCC1F7BAA87940E45A7FBC), errorState=Errored(errors=[FlowError(errorId=1367700779484966818, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@4cac9d55, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a397afe4-aabd-4f47-9a2b-e9d4867ca9fc))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@71c22386]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
[WARN ] 2019-06-19T09:51:15,434Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f09bbb45-bfee-419d-b91d-b2bcf0a87c5b] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=f09bbb45-bfee-419d-b91d-b2bcf0a87c5b, invocation_id=36c8045d-8560-4db0-8762-67e02582d16d, invocation_timestamp=2019-06-19T09:51:15.074Z, origin=Only For Testing, session_id=36c8045d-8560-4db0-8762-67e02582d16d, session_timestamp=2019-06-19T09:51:15.074Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:51:15,556Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095115.449/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:51:15,557Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:15,557Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:15,589Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:15,624Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:15,628Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:15,628Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:15,634Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:15.450Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:16,089Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:16,091Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095115.449/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:16,092Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:16,095Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:16,097Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,097Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,168Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,183Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:16,185Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,186Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,276Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,287Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:16,358Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:16,365Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,365Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,526Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:16,531Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:16,531Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:16,534Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:16,552Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:16,563Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:16,567Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[WARN ] 2019-06-19T09:51:16,570Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:51:16,573Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:16,625Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:16,628Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:51:16,628Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:51:16,629Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095115.449/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:16,630Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:16,637Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:16,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:16,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:16,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:16,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:16,646Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095115.449/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:51:16,647Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:16,647Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:16,674Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:16,710Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:16,729Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:16,729Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:16,732Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:15.450Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:17,147Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:17,148Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095115.449/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:17,149Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:17,152Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:17,154Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,154Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,225Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,241Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:17,243Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,243Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,327Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,337Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:17,369Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:17,371Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,371Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,519Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:17,521Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:17,539Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:17,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,541Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:17,548Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,556Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:17,560Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[WARN ] 2019-06-19T09:51:17,562Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:51:17,566Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:17,614Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:17,617Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095115.449/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:17,617Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:17,624Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,626Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:17,628Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:17,638Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,640Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:17,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,651Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:17,651Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:17,651Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:17,656Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095115.449/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:51:17,656Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:17,656Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:17,682Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:17,713Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:17,729Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:17,730Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:17,733Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:15.450Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:18,152Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:18,155Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095115.449/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:18,155Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:18,158Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:18,160Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,160Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,233Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,248Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:18,250Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,250Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,372Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,383Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:18,419Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:18,421Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,421Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,564Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:18,565Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:18,582Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:18,582Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,584Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:18,592Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,599Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:18,602Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[WARN ] 2019-06-19T09:51:18,605Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:51:18,608Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:18,659Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:18,662Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095115.449/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:18,662Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:18,669Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,674Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:18,676Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:18,687Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,689Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:18,702Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:18,703Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:18,713Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,715Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:18,726Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,726Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:18,726Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:18,726Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:18,731Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095115.449/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:51:18,731Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:18,731Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:18,760Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095115.449/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:18,792Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:18,809Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:18,809Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:18,813Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:15.450Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:19,230Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:19,232Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095115.449/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:19,233Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:19,236Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:19,238Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,239Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,312Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,328Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:19,330Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,330Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,422Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,432Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:19,465Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:19,467Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,467Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,622Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:19,623Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:19,642Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:19,642Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,644Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,652Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,659Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[WARN ] 2019-06-19T09:51:19,665Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:51:19,666Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,674Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:19,720Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:19,723Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095115.449/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:19,724Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:19,733Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,737Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937876531) {}
[INFO ] 2019-06-19T09:51:19,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,750Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,752Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,763Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937877539) {}
[INFO ] 2019-06-19T09:51:19,765Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,779Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,781Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937878582) {}
[INFO ] 2019-06-19T09:51:19,794Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,808Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,809Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:19,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:19,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937879642) {}
[INFO ] 2019-06-19T09:51:19,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:19,827Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:51:19,827Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:51:19,827Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:19,827Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:19,908Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 427CC28EBF558E9FE547DE9398E123B3047A725FBE6169EC6B7B4098FF517459 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000018, flow-id=72ad6ef1-9798-4335-ab6e-877095009c78, invocation_id=3033885b-ecb2-46ff-9d37-0dd9aabd40b8, invocation_timestamp=2019-06-19T09:51:19.828Z, origin=Only For Testing, session_id=3033885b-ecb2-46ff-9d37-0dd9aabd40b8, session_timestamp=2019-06-19T09:51:19.828Z, thread-id=1202}
[INFO ] 2019-06-19T09:51:20,009Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095119.942/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:51:20,009Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:20,010Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:20,036Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:20,069Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:20,072Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:20,072Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:20,078Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:19.942Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:20,499Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:20,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095119.942/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:20,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:20,507Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:20,510Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,511Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,585Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,602Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:20,604Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,604Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,703Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,713Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:20,778Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:20,785Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,785Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,941Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:51:20,946Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:20,946Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:20,948Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:20,967Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:20,980Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:20,985Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[WARN ] 2019-06-19T09:51:20,989Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:51:20,990Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:21,040Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:21,042Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:51:21,043Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:51:21,044Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095119.942/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:21,044Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:21,050Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:21,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:21,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:21,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:21,054Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:21,059Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095119.942/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:51:21,059Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:21,059Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:21,084Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:21,116Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:21,131Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:21,131Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:21,135Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:19.942Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:21,525Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:21,527Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095119.942/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:21,527Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:21,530Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:21,532Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,532Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,598Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,612Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:21,614Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,614Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,705Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,714Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:21,747Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:21,748Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,748Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,878Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:21,879Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:21,897Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:21,897Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:21,900Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:21,908Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:21,916Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:21,919Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[WARN ] 2019-06-19T09:51:21,922Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:51:21,926Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:21,974Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:21,976Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095119.942/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:21,977Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:21,983Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:21,986Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:21,988Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:21,999Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:22,001Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:22,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:22,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:22,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:22,017Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095119.942/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:51:22,018Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:22,018Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:22,046Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:22,077Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:22,092Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:22,092Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:22,096Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:19.942Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:22,485Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:22,487Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095119.942/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:22,487Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:22,490Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:22,492Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,492Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,558Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,573Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:22,575Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,575Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,660Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,671Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:22,698Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:22,699Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,700Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,834Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:22,835Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:22,853Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:22,853Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,855Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,863Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,871Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:22,874Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[WARN ] 2019-06-19T09:51:22,876Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:51:22,878Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:22,927Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:22,930Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095119.942/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:22,931Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:22,937Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,939Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:22,941Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,951Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,952Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,965Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:22,967Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,980Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,981Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:22,995Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,995Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:22,995Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:22,995Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:23,001Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095119.942/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:51:23,001Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:51:23,001Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:23,028Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095119.942/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:51:23,060Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:51:23,077Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:51:23,077Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:51:23,080Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:51:19.942Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:51:23,462Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:51:23,463Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095119.942/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:51:23,464Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:51:23,466Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:51:23,468Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,469Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,537Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,552Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:51:23,554Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,554Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,645Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,657Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:51:23,690Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:51:23,692Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,692Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,834Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:51:23,835Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:51:23,855Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:51:23,855Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:23,857Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:23,864Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:23,874Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:51:23,878Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[WARN ] 2019-06-19T09:51:23,881Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:51:23,885Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:23,935Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:51:23,938Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095119.942/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:51:23,939Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:51:23,946Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:23,950Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560937880946) {}
[INFO ] 2019-06-19T09:51:23,951Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:23,964Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:23,966Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:23,982Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560937881897) {}
[INFO ] 2019-06-19T09:51:23,984Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:23,996Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:23,997Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:24,009Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560937882853) {}
[INFO ] 2019-06-19T09:51:24,011Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:24,022Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:24,024Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:51:24,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:24,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:24,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560937883855) {}
[INFO ] 2019-06-19T09:51:24,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:51:24,036Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:51:24,036Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:51:24,036Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:24,036Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:51:25,113Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,113Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,141Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,141Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,224Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 71C1D514B032D6854AF1D1C287D9E2FC977A535F2C9802D4AA31E29DF75EC33D to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,225Z [Mock node 3 thread] corda.flow.call - Generating spend for: 9cc9cb04-ed9c-404d-aaf4-478e9357580e {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[WARN ] 2019-06-19T09:51:25,241Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key ECD46E2ECE6863FF394E4CADB4697E9CBB9F8B22C4BB7BF5611F3217ECBB3F80, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,243Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 9cc9cb04-ed9c-404d-aaf4-478e9357580e {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,272Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=D669B31E174C28FFDB1610585B4DF75FE23A8DF5D90006443E3EF55F3583359F}
[INFO ] 2019-06-19T09:51:25,309Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,475Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,477Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,492Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,513Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,565Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,565Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,565Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=9cc9cb04-ed9c-404d-aaf4-478e9357580e, invocation_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, invocation_timestamp=2019-06-19T09:51:24.037Z, origin=Only For Testing, session_id=ac2d25b8-7e16-4e88-aadc-f1123b6bb893, session_timestamp=2019-06-19T09:51:24.037Z, thread-id=1478, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,578Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,580Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFdnDC172B2LiUG91XHQwSWzXKrsZgL3ebf6mh4A8SuJ5 {}
[INFO ] 2019-06-19T09:51:25,593Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,607Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFdnDC172B2LiUG91XHQwSWzXKrsZgL3ebf6mh4A8SuJ5 {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[WARN ] 2019-06-19T09:51:25,608Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL8f4Vn5Eaf9EEcabDPXURN8k8t6REStdKSMuefUD1vVfi) {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,609Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498, tx_id=704E5A016F703B547A16661B3A40E1703A1F14483785361EF1CF426DB112FCD6}
[INFO ] 2019-06-19T09:51:25,614Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFdnDC172B2LiUG91XHQwSWzXKrsZgL3ebf6mh4A8SuJ5 {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498}
[WARN ] 2019-06-19T09:51:25,614Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL8f4Vn5Eaf9EEcabDPXURN8k8t6REStdKSMuefUD1vVfi) {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498}
[INFO ] 2019-06-19T09:51:25,615Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyFdnDC172B2LiUG91XHQwSWzXKrsZgL3ebf6mh4A8SuJ5 {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498}
[WARN ] 2019-06-19T09:51:25,615Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL8f4Vn5Eaf9EEcabDPXURN8k8t6REStdKSMuefUD1vVfi) {fiber-id=10000021, flow-id=5e7ed126-bbec-4bb2-9a8a-cc7f3c984bf6, invocation_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, invocation_timestamp=2019-06-19T09:51:25.170Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8386d438-5fb1-4a1f-904f-3bbc0a8ce7e5, session_timestamp=2019-06-19T09:51:25.170Z, thread-id=1498}
[INFO ] 2019-06-19T09:51:25,673Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 71C1D514B032D6854AF1D1C287D9E2FC977A535F2C9802D4AA31E29DF75EC33D to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000023, flow-id=c27d2dd1-b2a9-4d26-9322-36f4ec029e56, invocation_id=dd2c066b-a7ae-47af-b093-6961e433bef5, invocation_timestamp=2019-06-19T09:51:25.581Z, origin=Only For Testing, session_id=dd2c066b-a7ae-47af-b093-6961e433bef5, session_timestamp=2019-06-19T09:51:25.581Z, thread-id=1498}
[INFO ] 2019-06-19T09:53:11,982Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095303.665/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:53:12,013Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:12,075Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:12,301Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:13,673Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:13,778Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:13,779Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:14,043Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:03.665Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:20,499Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:20,506Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095303.665/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:20,506Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:20,512Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:20,577Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:20,583Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:22,927Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:23,633Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:23,638Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:23,638Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:24,012Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:24,105Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:24,236Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:24,257Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:24,257Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:24,759Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:24,771Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:24,772Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:24,779Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:24,976Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:25,060Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:25,088Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[WARN ] 2019-06-19T09:53:25,105Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:53:25,126Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:25,205Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:25,213Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:53:25,216Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:53:25,252Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095303.665/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:25,320Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:25,786Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:25,820Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:25,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:25,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:25,822Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:25,831Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095303.665/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:53:25,831Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:25,832Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:25,873Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:25,921Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:25,951Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:25,952Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:25,959Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:03.665Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:26,773Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:26,778Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095303.665/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:26,778Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:26,784Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:26,788Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:26,788Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:26,913Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:26,942Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:26,945Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:26,946Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:27,090Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:27,109Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:27,173Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:27,177Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:27,177Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:27,395Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:27,398Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:27,431Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:27,431Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,435Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:27,447Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,462Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:27,468Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[WARN ] 2019-06-19T09:53:27,471Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:53:27,476Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:27,542Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:27,546Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095303.665/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:27,546Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:27,559Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,564Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:27,567Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:27,584Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,587Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:27,610Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095303.665/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:53:27,611Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:27,611Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:27,653Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:27,697Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:27,728Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:27,728Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:27,735Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:03.665Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:28,507Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:28,511Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095303.665/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:28,511Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:28,515Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:28,519Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,519Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,623Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,648Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:28,651Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,651Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,774Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,790Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:28,844Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:28,846Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:28,846Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:29,053Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:29,055Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:29,083Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:29,083Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,086Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:29,099Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,113Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:29,118Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[WARN ] 2019-06-19T09:53:29,123Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:53:29,126Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:29,197Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:29,201Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095303.665/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:29,201Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:29,213Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,219Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:29,222Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:29,239Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,242Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:29,260Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:29,263Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:29,281Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,283Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:29,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:29,302Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:29,303Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:29,311Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095303.665/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:53:29,311Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:29,311Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:29,346Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095303.665/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:29,386Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:29,413Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:29,413Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:29,421Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:03.665Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:30,038Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:30,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095303.665/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:30,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:30,048Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:30,051Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,052Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,138Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,161Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:30,164Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,165Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,286Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,301Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:30,354Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:30,356Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,357Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,550Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:30,552Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:30,579Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:30,579Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,582Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,594Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,606Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:30,613Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[WARN ] 2019-06-19T09:53:30,620Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:53:30,624Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:30,687Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:30,691Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095303.665/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:30,692Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:30,704Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,709Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938004771) {}
[INFO ] 2019-06-19T09:53:30,712Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,728Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,731Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,748Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938007431) {}
[INFO ] 2019-06-19T09:53:30,750Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,768Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,783Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938009083) {}
[INFO ] 2019-06-19T09:53:30,786Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,801Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,803Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:30,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:30,819Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938010579) {}
[INFO ] 2019-06-19T09:53:30,820Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:30,827Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:30,832Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:30,832Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.ShareKeyInitiator to initiate net.corda.confidential.identities.ShareKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:31,821Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 3166C1DE6E4E4F970950BD9D7CE85C97B1169DE2BA80B20CD44FFEB41873960F to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000002, flow-id=dfd6a5f5-679f-4835-ba16-c2336be8000a, invocation_id=c14f12d6-85c3-4401-8cbf-6c1e6f2a0c30, invocation_timestamp=2019-06-19T09:53:31.700Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=c14f12d6-85c3-4401-8cbf-6c1e6f2a0c30, session_timestamp=2019-06-19T09:53:31.700Z, thread-id=333}
[INFO ] 2019-06-19T09:53:32,218Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095332.125/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:53:32,219Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:32,219Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:32,251Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:32,288Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:32,293Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:32,293Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:32,301Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:32.125Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:32,908Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:32,912Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095332.125/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:32,912Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:32,916Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:32,920Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:32,920Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,007Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,029Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:33,031Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,032Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,150Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,163Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:33,245Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:33,252Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,252Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,447Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:33,454Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:33,454Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:33,457Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:33,487Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:33,504Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:33,510Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[WARN ] 2019-06-19T09:53:33,516Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:53:33,519Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:33,581Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:33,584Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:53:33,584Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:53:33,585Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095332.125/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:33,586Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:33,598Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:33,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:33,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:33,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:33,603Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:33,609Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095332.125/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:53:33,611Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:33,611Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:33,641Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:33,678Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:33,701Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:33,701Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:33,707Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:32.125Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:34,216Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:34,220Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095332.125/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:34,220Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:34,224Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:34,226Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,226Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,316Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,340Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:34,343Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,343Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,452Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,464Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:34,510Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:34,511Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,512Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,687Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:34,691Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:34,713Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:34,714Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,716Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:34,727Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,738Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:34,744Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[WARN ] 2019-06-19T09:53:34,747Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:53:34,754Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:34,814Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:34,817Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095332.125/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:34,818Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:34,828Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:34,835Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:34,850Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,852Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:34,867Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,867Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:34,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:34,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:34,874Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095332.125/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:53:34,875Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:34,875Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:34,914Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:34,951Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:34,974Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:34,975Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:34,979Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:32.125Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:35,485Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:35,488Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095332.125/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:35,488Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:35,492Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:35,494Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,495Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,582Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,600Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:35,603Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,603Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,710Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,724Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:35,763Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:35,764Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,764Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,938Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:35,940Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:35,963Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:35,963Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:35,967Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:35,979Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:35,991Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:35,996Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[WARN ] 2019-06-19T09:53:35,999Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:53:36,005Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:36,062Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:36,065Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095332.125/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:36,065Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:36,074Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:36,078Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:36,081Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:36,095Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:36,097Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:36,112Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:36,114Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:36,128Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:36,130Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:36,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:36,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:36,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:36,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:36,151Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095332.125/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:53:36,151Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:36,151Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:36,180Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095332.125/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:36,217Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:36,238Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:36,239Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:36,245Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:32.125Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:36,749Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:36,753Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095332.125/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:36,753Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:36,757Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:36,760Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:36,760Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:36,855Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:36,875Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:36,877Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:36,877Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:36,986Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:37,000Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:37,048Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:37,050Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:37,050Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:37,211Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:37,213Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:37,233Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:37,233Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,237Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,245Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,255Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:37,260Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[WARN ] 2019-06-19T09:53:37,263Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:53:37,268Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:37,324Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:37,327Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095332.125/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:37,327Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:37,338Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,342Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938013454) {}
[INFO ] 2019-06-19T09:53:37,344Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,357Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,359Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,373Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938014713) {}
[INFO ] 2019-06-19T09:53:37,375Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,390Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,392Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,405Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938015963) {}
[INFO ] 2019-06-19T09:53:37,407Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,423Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:37,436Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,436Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:37,437Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938017233) {}
[INFO ] 2019-06-19T09:53:37,437Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:37,442Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:53:37,442Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:53:37,445Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:37,446Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:53:37,551Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608}
[WARN ] 2019-06-19T09:53:37,551Z [Mock node 1 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608}
[INFO ] 2019-06-19T09:53:40,562Z [Mock node 1 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,562Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,695Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,695Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,903Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 4FCD0C37C58936240A1689A4C2B1E95291C095B88D06ABF6DA0D91899D1F41C6 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,904Z [Mock node 1 thread] corda.flow.call - Generating spend for: 0ad71311-03a1-46b1-950f-bd686fdd9481 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[WARN ] 2019-06-19T09:53:40,973Z [Mock node 1 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 1650E49B2EE74342B15D33A58CD3C9B01A0D52D5403642B60D769A666455FC09, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:40,979Z [Mock node 1 thread] corda.flow.call - Signing transaction for: 0ad71311-03a1-46b1-950f-bd686fdd9481 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:41,143Z [Mock node 1 thread] corda.flow.call - Finalising transaction for: 2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=B9E72ACD85FF9A399852AF674FA758BAAB21E59D5FF25CEE35ECA8D1E29A6114}
[INFO ] 2019-06-19T09:53:41,210Z [Mock node 1 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,576Z [Mock node 1 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,578Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,634Z [Mock node 1 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,634Z [Mock node 1 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,634Z [Mock node 1 thread] corda.flow.call - Finalised transaction for: 2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000003, flow-id=0ad71311-03a1-46b1-950f-bd686fdd9481, invocation_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, invocation_timestamp=2019-06-19T09:53:37.457Z, origin=Only For Testing, session_id=d98484c9-299e-4c48-a13f-afc8c5f42da8, session_timestamp=2019-06-19T09:53:37.457Z, thread-id=608, tx_id=2C8D570213AEC3057637475282600D7D68E4C1FCAA9B18A42B509D94C8310CB3}
[INFO ] 2019-06-19T09:53:41,660Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyMP8PcmMy3ZwKS6T1iKooNeTAxMdirNCksrwGiTMHBG4r {}
[INFO ] 2019-06-19T09:53:41,749Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyMP8PcmMy3ZwKS6T1iKooNeTAxMdirNCksrwGiTMHBG4r {fiber-id=10000007, flow-id=c075b577-8c1e-4986-afa0-b72d5616ffc9, invocation_id=9038f9e7-308f-4c2e-af0e-82fd42cdacd3, invocation_timestamp=2019-06-19T09:53:41.715Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=9038f9e7-308f-4c2e-af0e-82fd42cdacd3, session_timestamp=2019-06-19T09:53:41.715Z, thread-id=630}
[INFO ] 2019-06-19T09:53:41,844Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 4FCD0C37C58936240A1689A4C2B1E95291C095B88D06ABF6DA0D91899D1F41C6 to O=Alice Corp, L=Madrid, C=ES {fiber-id=10000007, flow-id=c075b577-8c1e-4986-afa0-b72d5616ffc9, invocation_id=9038f9e7-308f-4c2e-af0e-82fd42cdacd3, invocation_timestamp=2019-06-19T09:53:41.715Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=9038f9e7-308f-4c2e-af0e-82fd42cdacd3, session_timestamp=2019-06-19T09:53:41.715Z, thread-id=630}
[INFO ] 2019-06-19T09:53:41,964Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095341.895/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:53:41,964Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:41,964Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:41,995Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:42,030Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:42,034Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:42,035Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:42,041Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:41.895Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:42,546Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:42,549Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095341.895/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:42,549Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:42,553Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:42,555Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,555Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,635Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,653Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:42,655Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,655Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,752Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,763Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:42,840Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:42,846Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:42,846Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,009Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,013Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:43,014Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:43,016Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:43,036Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:43,048Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:43,053Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[WARN ] 2019-06-19T09:53:43,056Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:53:43,060Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:43,114Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:43,117Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:53:43,117Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:53:43,118Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095341.895/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:43,119Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:43,129Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:43,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:43,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:43,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:43,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:43,138Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095341.895/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:53:43,139Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:43,139Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:43,184Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:43,219Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:43,238Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:43,239Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:43,243Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:41.895Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:43,684Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:43,688Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095341.895/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:43,688Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:43,691Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:43,694Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,695Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,771Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,790Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:43,793Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,793Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,891Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,903Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:43,937Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:43,938Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:43,938Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,086Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,087Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:44,107Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:44,107Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,110Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:44,118Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,126Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:44,130Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[WARN ] 2019-06-19T09:53:44,134Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:53:44,137Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:44,190Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:44,193Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095341.895/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:44,194Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:44,202Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,208Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:44,210Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:44,223Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,224Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:44,237Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,238Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:44,238Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:44,238Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:44,243Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095341.895/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:53:44,243Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:44,244Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:44,271Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:44,306Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:44,326Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:44,327Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:44,331Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:41.895Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:44,750Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:44,752Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095341.895/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:44,752Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:44,755Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:44,758Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,758Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,826Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,843Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:44,844Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,845Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,935Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,945Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:44,978Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:44,979Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:44,979Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,124Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,126Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:45,146Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:45,146Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,149Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:45,158Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,167Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:45,170Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[WARN ] 2019-06-19T09:53:45,174Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:53:45,177Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:45,229Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:45,232Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095341.895/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:45,232Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:45,240Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:45,246Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:45,259Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,260Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:45,272Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:45,274Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:45,287Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,288Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:45,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:45,300Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:45,300Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:45,305Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095341.895/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:53:45,305Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:45,306Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:45,332Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095341.895/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:45,364Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:45,382Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:45,382Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:45,386Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:41.895Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:45,826Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:45,829Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095341.895/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:45,830Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:45,834Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:45,837Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,837Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,912Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,932Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:45,934Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:45,935Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:46,033Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:46,046Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:46,091Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:46,092Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:46,093Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:46,247Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:46,249Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:46,268Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:46,269Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,271Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,279Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,289Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:46,293Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[WARN ] 2019-06-19T09:53:46,296Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:53:46,300Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:46,353Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:46,357Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095341.895/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:46,357Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:46,366Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,370Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938023013) {}
[INFO ] 2019-06-19T09:53:46,372Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,386Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,388Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,401Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938024107) {}
[INFO ] 2019-06-19T09:53:46,403Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,416Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,418Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,431Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938025146) {}
[INFO ] 2019-06-19T09:53:46,432Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,445Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,446Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938026268) {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:53:46,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:53:46,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:46,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:47,576Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,576Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,608Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,608Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,708Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: FFEAECF7E49A8B71601F8B5893B1EC481810DB82E5F2782DBDF7C2630775E8A9 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,709Z [Mock node 3 thread] corda.flow.call - Generating spend for: f3cd2c47-8020-4bab-909a-a1f8a702ec5b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[WARN ] 2019-06-19T09:53:47,725Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B13E29959C613B966EFAF3418E1283F15919F48894B83D7B88C6CAD6EE0C8A93, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,729Z [Mock node 3 thread] corda.flow.call - Signing transaction for: f3cd2c47-8020-4bab-909a-a1f8a702ec5b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,762Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=A36F6535A440D57E27DDEB0689A1241BF719B3977EEF5BC8EEFA4367FAFFB61D}
[INFO ] 2019-06-19T09:53:47,807Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:47,987Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:47,989Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:48,004Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:48,004Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:48,005Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000009, flow-id=f3cd2c47-8020-4bab-909a-a1f8a702ec5b, invocation_id=25814173-428a-41fb-a99c-85a2d712b60b, invocation_timestamp=2019-06-19T09:53:46.461Z, origin=Only For Testing, session_id=25814173-428a-41fb-a99c-85a2d712b60b, session_timestamp=2019-06-19T09:53:46.461Z, thread-id=905, tx_id=6DEB85B8201FA3BB041E09FFDCD5AE11B757550B0B7CB332FA8EA211B4D3C847}
[INFO ] 2019-06-19T09:53:48,026Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: FFEAECF7E49A8B71601F8B5893B1EC481810DB82E5F2782DBDF7C2630775E8A9 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000012, flow-id=5c9f312e-9607-45a1-be68-208bc6e9db36, invocation_id=84e75e66-98df-4651-9eaf-a35c2feea6da, invocation_timestamp=2019-06-19T09:53:48.019Z, origin=Only For Testing, session_id=84e75e66-98df-4651-9eaf-a35c2feea6da, session_timestamp=2019-06-19T09:53:48.019Z, thread-id=926}
[INFO ] 2019-06-19T09:53:48,101Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: ED82F89D9E3347BCDA91C9A0CFEAE3D75CC968268EB3CEF6AC4E8EA660B6D5C6 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
[INFO ] 2019-06-19T09:53:48,102Z [Mock node 3 thread] corda.flow.call - Generating spend for: a018064f-6df9-4fc5-a61c-3a8c128efb5d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
[WARN ] 2019-06-19T09:53:48,116Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key B13E29959C613B966EFAF3418E1283F15919F48894B83D7B88C6CAD6EE0C8A93, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
[INFO ] 2019-06-19T09:53:48,120Z [Mock node 3 thread] corda.flow.call - Signing transaction for: a018064f-6df9-4fc5-a61c-3a8c128efb5d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
[INFO ] 2019-06-19T09:53:48,139Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
[INFO ] 2019-06-19T09:53:48,174Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,297Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTNqBWQVtheFEi3jmMx5i1sU4K1WguZ95VgFgs2YuAVXQ {fiber-id=10000015, flow-id=723060a7-6b44-4ea8-bf32-865f77a75c2e, invocation_id=75ca355a-af88-446a-ac50-2261bd1806ff, invocation_timestamp=2019-06-19T09:53:48.191Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=75ca355a-af88-446a-ac50-2261bd1806ff, session_timestamp=2019-06-19T09:53:48.191Z, thread-id=925}
[INFO ] 2019-06-19T09:53:48,324Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,327Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,339Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,362Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,456Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,456Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,456Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,467Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTNqBWQVtheFEi3jmMx5i1sU4K1WguZ95VgFgs2YuAVXQ {}
[INFO ] 2019-06-19T09:53:48,493Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,508Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,521Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKwCMz1bQafRSM7LJuzZdQVm2FD76ZQyC8eFDHeDxE1Xv {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[WARN ] 2019-06-19T09:53:48,521Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLGz9TSj2bRCtKxvn2CZEanD2M8faywAWci4xHEN21K2VT) {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,523Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926, tx_id=CEA0A76BBA6310BA7E5F93E181212B1235D9F8DF71D91FEB481F038096F61E1C}
[INFO ] 2019-06-19T09:53:48,528Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKwCMz1bQafRSM7LJuzZdQVm2FD76ZQyC8eFDHeDxE1Xv {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,528Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLGz9TSj2bRCtKxvn2CZEanD2M8faywAWci4xHEN21K2VT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926}
[INFO ] 2019-06-19T09:53:48,529Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKwCMz1bQafRSM7LJuzZdQVm2FD76ZQyC8eFDHeDxE1Xv {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,529Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLGz9TSj2bRCtKxvn2CZEanD2M8faywAWci4xHEN21K2VT) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000014, flow-id=80902f48-1a34-4f47-99b4-e98c8843e30e, invocation_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, invocation_timestamp=2019-06-19T09:53:48.054Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=8ac7a5ad-7efa-4982-a1cc-87247ce2a51e, session_timestamp=2019-06-19T09:53:48.054Z, thread-id=926}
[INFO ] 2019-06-19T09:53:48,588Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTNqBWQVtheFEi3jmMx5i1sU4K1WguZ95VgFgs2YuAVXQ {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[INFO ] 2019-06-19T09:53:48,589Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKwCMz1bQafRSM7LJuzZdQVm2FD76ZQyC8eFDHeDxE1Xv {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[INFO ] 2019-06-19T09:53:48,601Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyKwCMz1bQafRSM7LJuzZdQVm2FD76ZQyC8eFDHeDxE1Xv {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,642Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000013, flow-id=a018064f-6df9-4fc5-a61c-3a8c128efb5d, invocation_id=317fffa2-217d-4624-852f-e2e709f77928, invocation_timestamp=2019-06-19T09:53:48.034Z, origin=Only For Testing, session_id=317fffa2-217d-4624-852f-e2e709f77928, session_timestamp=2019-06-19T09:53:48.034Z, thread-id=905}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:53:48,660Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[INFO ] 2019-06-19T09:53:48,663Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [3c81e224-0a79-489b-a866-bf1ee330804e] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004), SessionId(toLong=-7753838093361699486)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--7753838093361699486-3070043375606917333)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))]), frozenFiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@33011064, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6) {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[INFO ] 2019-06-19T09:53:48,667Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:53:48,669Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:53:48,700Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3c81e224-0a79-489b-a866-bf1ee330804e] errored, dumping all transitions:

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.577Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=81E1F541B447E47B13BC7C1550E8A6685C641514A1CC44C9395044FB3C13E48C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef])
    SignalFlowHasStarted(flowId=[3c81e224-0a79-489b-a866-bf1ee330804e])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8308212310636953741), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5824007475331417110--5570494751197323004-0-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.578Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.586Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), maySkipCheckpoint=false, fiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=81E1F541B447E47B13BC7C1550E8A6685C641514A1CC44C9395044FB3C13E48C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.586Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.597Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}), maySkipCheckpoint=false, fiber=AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}), frozenFiber=AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A})
checkpoint.flowState.frozenFiber.hash: 
    B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5
    AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.598Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5824007475331417110--5570494751197323004-2-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.610Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), maySkipCheckpoint=false, fiber=F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
checkpoint.flowState.frozenFiber.hash: 
    AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9
    F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.610Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.614Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8308212310636953741), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.615Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.617Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.617Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3c81e224-0a79-489b-a866-bf1ee330804e], sessionId=SessionId(toLong=-7753838093361699486))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7753838093361699486): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.618Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.630Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004), SessionId(toLong=-7753838093361699486)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false), frozenFiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27
    46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.636Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-7753838093361699486), initiationEntropy=3070043375606917333, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--7753838093361699486-3070043375606917333-4-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))])
checkpoint.sessions.SessionId(toLong=-7753838093361699486): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--7753838093361699486-3070043375606917333)


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.659Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7753838093361699486), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=9066130394529865575)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7753838093361699486).rejectionError: 
    null
    FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.659Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.671Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.676Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.677Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[WARN ] 2019-06-19T09:53:48,700Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3c81e224-0a79-489b-a866-bf1ee330804e] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:53:48,703Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[INFO ] 2019-06-19T09:53:48,819Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[INFO ] 2019-06-19T09:53:48,821Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), frozenFiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@622b8ef, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[INFO ] 2019-06-19T09:53:48,822Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:53:48,822Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:53:48,834Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] errored, dumping all transitions:

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3341A951219BECC4F012B5DCDA78DA4B84C15AD6A9B65EB43AF0440D1066AB03), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec])
    SignalFlowHasStarted(flowId=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], sessionId=SessionId(toLong=5824007475331417110))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), frozenFiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=3341A951219BECC4F012B5DCDA78DA4B84C15AD6A9B65EB43AF0440D1066AB03)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), frozenFiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.561Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=5824007475331417110), initiationEntropy=-5570494751197323004, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-5824007475331417110--5570494751197323004-1-0), senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-5824007475331417110--5570494751197323004)


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.581Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8308212310636953741), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-5824007475331417110--5570494751197323004)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.581Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.599Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.599Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.612Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119}), maySkipCheckpoint=false, fiber=F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119}), frozenFiber=F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119})
checkpoint.flowState.frozenFiber.hash: 
    8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385
    F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.613Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8308212310636953741), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-5824007475331417110--5570494751197323004-2-0), senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.613Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.620Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), maySkipCheckpoint=false, fiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), frozenFiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
checkpoint.flowState.frozenFiber.hash: 
    F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237
    3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.620Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.819Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ErrorSessionMessage(flowException=null, errorId=9066130394529865575)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).errors: 
    []
    [FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.819Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,834Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:53:48,834Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,841Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3c81e224-0a79-489b-a866-bf1ee330804e] errored, dumping all transitions:

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.577Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=81E1F541B447E47B13BC7C1550E8A6685C641514A1CC44C9395044FB3C13E48C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef])
    SignalFlowHasStarted(flowId=[3c81e224-0a79-489b-a866-bf1ee330804e])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8308212310636953741), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5824007475331417110--5570494751197323004-0-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1a0587ef]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.578Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.586Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), maySkipCheckpoint=false, fiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=81E1F541B447E47B13BC7C1550E8A6685C641514A1CC44C9395044FB3C13E48C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.586Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.597Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}), maySkipCheckpoint=false, fiber=AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}), frozenFiber=AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A})
checkpoint.flowState.frozenFiber.hash: 
    B1BDDDDF399D94E65D0352ED9CCE7FA4FDAE9F7C52948D0E76EC57A479DA3AD5
    AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.598Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5824007475331417110--5570494751197323004-2-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.610Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), maySkipCheckpoint=false, fiber=F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))]), frozenFiber=F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
checkpoint.flowState.frozenFiber.hash: 
    AD2B7E822409399AF60599FE7787EB95DF678ADEB972D79E5CCD0642791ECFB9
    F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.610Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.614Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8308212310636953741), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.615Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8308212310636953741).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.617Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.617Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[3c81e224-0a79-489b-a866-bf1ee330804e], sessionId=SessionId(toLong=-7753838093361699486))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7753838093361699486): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.618Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.630Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC, )
  Actions: 
    PersistCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004), SessionId(toLong=-7753838093361699486)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false), frozenFiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-8308212310636953741))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    F482F817C3CEB1344E90EB39F2A6C882DB0C9D0747AB71C7C3C9266FD2D08A27
    46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@34c276ea]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.636Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-7753838093361699486), initiationEntropy=3070043375606917333, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--7753838093361699486-3070043375606917333-4-0), senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))=88CE931C40A609437DA65BE059A92679D5726FAE255BDE9AF5F2EEF2A839C646}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))])
checkpoint.sessions.SessionId(toLong=-7753838093361699486): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-7753838093361699486), additionalEntropy=3070043375606917333)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--7753838093361699486-3070043375606917333)


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.659Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7753838093361699486), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=9066130394529865575)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7753838093361699486).rejectionError: 
    null
    FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.659Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.660Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.671Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.676Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.677Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3c81e224-0a79-489b-a866-bf1ee330804e] ---
  Timestamp: 2019-06-19T09:53:48.825Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=9066130394529865575)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004)], senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6)
    CreateTransaction
    RemoveCheckpoint(id=[3c81e224-0a79-489b-a866-bf1ee330804e])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2])
    ReleaseSoftLocks(uuid=3c81e224-0a79-489b-a866-bf1ee330804e)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8308212310636953741), SessionId(toLong=-7753838093361699486)])
    RemoveFlow(flowId=[3c81e224-0a79-489b-a866-bf1ee330804e], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Invocation, sessionId=7a76aefd-5fba-40c9-8e1e-784173ef2187, timestamp: 2019-06-19T09:53:48.567Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-8308212310636953741)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5824007475331417110)), errors=[], deduplicationSeed=D-5824007475331417110--5570494751197323004), SessionId(toLong=-7753838093361699486)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--7753838093361699486-3070043375606917333)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-7753838093361699486))]), frozenFiber=46705886E7766327BDB2DA84F957D5E4A7B47CF45980DD95AB6853C063F91FEC), errorState=Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@33011064, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=6b7b246d-15e0-4358-8438-68ca56cd1ea6))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7d4b6bd2]
    []
isRemoved: 
    false
    true
 {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
[WARN ] 2019-06-19T09:53:48,841Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3c81e224-0a79-489b-a866-bf1ee330804e] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000017, flow-id=3c81e224-0a79-489b-a866-bf1ee330804e, invocation_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, invocation_timestamp=2019-06-19T09:53:48.567Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=7a76aefd-5fba-40c9-8e1e-784173ef2187, session_timestamp=2019-06-19T09:53:48.567Z, thread-id=927}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:53:48,847Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] errored, dumping all transitions:

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3341A951219BECC4F012B5DCDA78DA4B84C15AD6A9B65EB43AF0440D1066AB03), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec])
    SignalFlowHasStarted(flowId=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@3d564bec]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], sessionId=SessionId(toLong=5824007475331417110))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.534Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.549Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), frozenFiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=3341A951219BECC4F012B5DCDA78DA4B84C15AD6A9B65EB43AF0440D1066AB03)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false), frozenFiber=8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.561Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=5824007475331417110), initiationEntropy=-5570494751197323004, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-5824007475331417110--5570494751197323004-1-0), senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=79A9CFBCEEE31E309F5462AC514BCC0C9444EF1C9F6BD231F1D9BF5D0B38022A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=5824007475331417110), additionalEntropy=-5570494751197323004)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-5824007475331417110--5570494751197323004)


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.581Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8308212310636953741), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-5824007475331417110--5570494751197323004)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.581Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.599Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.599Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.612Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119}), maySkipCheckpoint=false, fiber=F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119}), frozenFiber=F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119})
checkpoint.flowState.frozenFiber.hash: 
    8B091C13EF370B39A79BBA0B544AE51D5B80602A7979DBE377E4EC0FF053F385
    F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1c7d31e3, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@47000f40]
    []
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.613Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8308212310636953741), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-5824007475331417110--5570494751197323004-2-0), senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.613Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.620Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), maySkipCheckpoint=false, fiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A, )
  Actions: 
    PersistCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), frozenFiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))=A931FEBF154CB6CC5CDAAD212E5967D868B9B5B20CC8BD4EEF5DBEF7D428C119})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))])
checkpoint.flowState.frozenFiber.hash: 
    F9551131DEA1FFCBD7CBD8D7BA401E1DAD854C079381208C56D3134488CC4237
    3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.620Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.819Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5824007475331417110), payload=ErrorSessionMessage(flowException=null, errorId=9066130394529865575)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5824007475331417110).errors: 
    []
    [FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a]


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.819Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.822Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] ---
  Timestamp: 2019-06-19T09:53:48.837Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=9066130394529865575)], sessions=[], senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf)
    CreateTransaction
    RemoveCheckpoint(id=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a])
    ReleaseSoftLocks(uuid=b4d11664-40df-4a91-91cd-bbc6da7a2ab1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5824007475331417110)])
    RemoveFlow(flowId=[b4d11664-40df-4a91-91cd-bbc6da7a2ab1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Invocation, sessionId=9d2761e0-74e0-4251-bb85-e1fbdd746bce, timestamp: 2019-06-19T09:53:48.468Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=5824007475331417110)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8308212310636953741)), errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-5824007475331417110--5570494751197323004)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=5824007475331417110))]), frozenFiber=3B4141AC650B285B628040189EF06E98DBC8DF5039503B449326563F7AF4979A), errorState=Errored(errors=[FlowError(errorId=9066130394529865575, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@622b8ef, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=994a8659-98a7-4434-92b2-d4b7a776ffdf))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@81ebf0a]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
[WARN ] 2019-06-19T09:53:48,847Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b4d11664-40df-4a91-91cd-bbc6da7a2ab1] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000016, flow-id=b4d11664-40df-4a91-91cd-bbc6da7a2ab1, invocation_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, invocation_timestamp=2019-06-19T09:53:48.468Z, origin=Only For Testing, session_id=9d2761e0-74e0-4251-bb85-e1fbdd746bce, session_timestamp=2019-06-19T09:53:48.468Z, thread-id=926}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:53:48,966Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095348.864/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:53:48,967Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:48,967Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:48,997Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:49,030Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:49,035Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:49,036Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:49,042Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:48.864Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:49,489Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:49,491Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095348.864/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:49,491Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:49,495Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:49,497Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,497Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,572Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,588Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:49,591Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,591Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,678Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,689Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:49,759Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:49,767Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,767Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,924Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:49,929Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:49,929Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:49,931Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:49,951Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:49,963Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:49,967Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[WARN ] 2019-06-19T09:53:49,970Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:53:49,974Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:50,025Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:50,028Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:53:50,028Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:53:50,029Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095348.864/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:50,029Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:50,037Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:50,040Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:50,040Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:50,040Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:50,041Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:50,046Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095348.864/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:53:50,047Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:50,047Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:50,074Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:50,106Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:50,126Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:50,127Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:50,130Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:48.864Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:50,553Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:50,555Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095348.864/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:50,555Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:50,558Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:50,560Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,560Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,626Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,641Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:50,643Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,643Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,728Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,738Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:50,770Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:50,772Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,772Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,916Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:50,917Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:50,936Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:50,936Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:50,938Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:50,945Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:50,953Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:50,957Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[WARN ] 2019-06-19T09:53:50,960Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:53:50,963Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:51,014Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:51,017Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095348.864/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:51,017Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:51,024Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:51,027Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:51,029Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:51,040Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:51,041Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:51,052Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:51,052Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:51,052Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:51,052Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:51,057Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095348.864/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:53:51,058Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:51,058Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:51,083Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:51,116Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:51,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:51,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:51,137Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:48.864Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:51,530Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:51,533Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095348.864/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:51,533Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:51,537Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:51,539Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,539Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,615Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,631Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:51,633Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,633Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,723Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,735Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:51,768Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:51,769Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,770Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,952Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:51,953Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:51,973Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:51,973Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:51,976Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:51,983Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:51,990Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:51,993Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[WARN ] 2019-06-19T09:53:51,995Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:53:51,998Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:52,048Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:52,050Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095348.864/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:52,051Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:52,058Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:52,061Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:52,062Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:52,073Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:52,075Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:52,087Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:52,088Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:52,099Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:52,100Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:52,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:52,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:52,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:52,111Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:52,116Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095348.864/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:53:52,117Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:52,117Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:52,147Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095348.864/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:52,181Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:52,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:52,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:52,200Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:48.864Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:52,608Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:52,610Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095348.864/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:52,611Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:52,613Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:52,615Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,616Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,685Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,700Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:52,702Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,702Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,789Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,799Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:52,832Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:52,834Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,834Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:52,982Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:53,000Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:53,000Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,003Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,009Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,016Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:53,021Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[WARN ] 2019-06-19T09:53:53,022Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:53:53,027Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:53,076Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:53,079Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095348.864/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:53,080Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:53,086Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,089Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938029929) {}
[INFO ] 2019-06-19T09:53:53,091Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,103Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,105Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,115Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938030936) {}
[INFO ] 2019-06-19T09:53:53,116Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,127Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,129Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,142Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938031973) {}
[INFO ] 2019-06-19T09:53:53,144Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,155Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,157Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:53,169Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,169Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:53,169Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938033000) {}
[INFO ] 2019-06-19T09:53:53,169Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:53,172Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:53,172Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:53,173Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:53,173Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:53,259Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 0ECB09B7B0FC3264F1787FF480DBFE6C25F1699A4506D9EC208FDDFB46030589 to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000018, flow-id=af998962-7201-459b-9582-d625c56d8d7a, invocation_id=f9548310-e50a-41e6-9722-0c98b3faa2f6, invocation_timestamp=2019-06-19T09:53:53.174Z, origin=Only For Testing, session_id=f9548310-e50a-41e6-9722-0c98b3faa2f6, session_timestamp=2019-06-19T09:53:53.174Z, thread-id=1202}
[INFO ] 2019-06-19T09:53:53,350Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095353.290/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:53:53,351Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:53,351Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:53,377Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:53,409Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:53,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:53,412Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:53,417Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:53.290Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:53,832Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:53,835Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095353.290/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:53,835Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:53,838Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:53,841Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:53,841Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:53,914Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:53,930Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:53,932Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:53,933Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,017Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,028Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:54,090Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:54,096Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,096Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,247Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,251Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:54,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:54,254Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:54,271Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:54,284Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:54,288Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[WARN ] 2019-06-19T09:53:54,291Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:53:54,294Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:54,341Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:54,343Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:53:54,344Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:53:54,345Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095353.290/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:54,345Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:54,353Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:54,356Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:54,356Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:54,356Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:54,356Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:54,363Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095353.290/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:53:54,364Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:54,364Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:54,391Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:54,423Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:54,441Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:54,441Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:54,444Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:53.290Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:54,790Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:54,792Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095353.290/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:54,792Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:54,795Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:54,797Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,797Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,864Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,879Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:54,881Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:54,881Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,008Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,021Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:55,055Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:55,056Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,056Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,188Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,189Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:55,207Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:55,207Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,209Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:55,215Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,226Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:55,229Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[WARN ] 2019-06-19T09:53:55,231Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:53:55,235Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:55,286Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:55,288Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095353.290/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:55,289Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:55,296Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:55,300Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:55,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,313Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:55,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:55,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:55,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:55,331Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095353.290/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:53:55,332Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:55,332Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:55,360Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:55,391Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:55,407Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:55,407Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:55,410Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:53.290Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:55,813Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:55,815Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095353.290/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:55,815Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:55,819Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:55,822Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,822Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,895Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,909Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:55,911Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,911Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,990Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:55,999Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:56,029Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:56,031Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,031Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,168Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,169Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:56,186Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:56,186Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,188Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:56,195Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,202Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:56,206Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[WARN ] 2019-06-19T09:53:56,208Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:53:56,211Z [MockNode-19-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:56,262Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:56,264Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095353.290/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:56,265Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:56,271Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,273Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:56,275Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:56,285Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,287Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:56,298Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:56,300Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:56,313Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,315Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:56,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:56,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:56,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:56,331Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095353.290/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:53:56,331Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:53:56,332Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:56,357Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095353.290/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:53:56,390Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:53:56,407Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:53:56,407Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:53:56,411Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:53:53.290Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:53:56,774Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:53:56,776Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095353.290/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:53:56,776Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:53:56,778Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:53:56,780Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,781Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,847Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,862Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:53:56,864Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,864Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,948Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,960Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:53:56,991Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:53:56,992Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:56,992Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:57,153Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:53:57,154Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:53:57,171Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:53:57,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,174Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,180Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,187Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:53:57,190Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[WARN ] 2019-06-19T09:53:57,193Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:53:57,196Z [MockNode-20-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:57,243Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:53:57,247Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095353.290/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:53:57,248Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:53:57,256Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,259Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938034251) {}
[INFO ] 2019-06-19T09:53:57,261Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,272Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,273Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,284Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938035207) {}
[INFO ] 2019-06-19T09:53:57,286Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,296Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,298Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,308Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938036186) {}
[INFO ] 2019-06-19T09:53:57,310Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,319Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,320Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:53:57,330Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,330Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:57,330Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938037171) {}
[INFO ] 2019-06-19T09:53:57,330Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:53:57,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:57,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyInitiator to initiate net.corda.confidential.identities.RequestKeyFlowTests$RequestKeyResponder (version 1) {}
[INFO ] 2019-06-19T09:53:57,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:57,331Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:53:58,337Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,337Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,362Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,363Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,446Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 057BE52B39F01A3C6B7DD356C26AD9778D339F720168211411C17ACFC17E280F to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,447Z [Mock node 3 thread] corda.flow.call - Generating spend for: c2d05d61-4f9f-4847-ab40-fe901f69fd1b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[WARN ] 2019-06-19T09:53:58,462Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key EFDF13CBE3FB3B92C160141570DD7EB1442894D7E7F2D9266A778CE40651B2B1, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,465Z [Mock node 3 thread] corda.flow.call - Signing transaction for: c2d05d61-4f9f-4847-ab40-fe901f69fd1b {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,495Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=3278B807578F9B51CB70FA617C93F191635BB00E89BD71F9B009FEAFAA2C9A9D}
[INFO ] 2019-06-19T09:53:58,531Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,691Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,694Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,705Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,724Z [Mock node 2 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,771Z [Mock node 3 thread] corda.flow.call - Party O=Bob Plc, L=Rome, C=IT received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,772Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,772Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000020, flow-id=c2d05d61-4f9f-4847-ab40-fe901f69fd1b, invocation_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, invocation_timestamp=2019-06-19T09:53:57.331Z, origin=Only For Testing, session_id=ff6a38a3-d4d8-4b15-a145-6808ba9a3d76, session_timestamp=2019-06-19T09:53:57.331Z, thread-id=1478, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,784Z [Mock node 2 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,785Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWahenRbuGc8vJ9fUaieMjHySaSRgp892Ki9xMz5MYViZ {}
[INFO ] 2019-06-19T09:53:58,796Z [Mock node 2 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,807Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWahenRbuGc8vJ9fUaieMjHySaSRgp892Ki9xMz5MYViZ {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[WARN ] 2019-06-19T09:53:58,807Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLNQcVrABM7gfrb99EcMyQZsfS9rjNbE1pKjQAx9CSeTY) {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,809Z [Mock node 2 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498, tx_id=C83A28CF20B9C8FBA2910409AE058E768ED19B9FFB915F6BDF2AD66CFDD729AB}
[INFO ] 2019-06-19T09:53:58,813Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWahenRbuGc8vJ9fUaieMjHySaSRgp892Ki9xMz5MYViZ {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498}
[WARN ] 2019-06-19T09:53:58,813Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLNQcVrABM7gfrb99EcMyQZsfS9rjNbE1pKjQAx9CSeTY) {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498}
[INFO ] 2019-06-19T09:53:58,814Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWahenRbuGc8vJ9fUaieMjHySaSRgp892Ki9xMz5MYViZ {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498}
[WARN ] 2019-06-19T09:53:58,814Z [Mock node 2 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLNQcVrABM7gfrb99EcMyQZsfS9rjNbE1pKjQAx9CSeTY) {fiber-id=10000021, flow-id=4af46629-031b-4df1-8780-73592d7a94d4, invocation_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, invocation_timestamp=2019-06-19T09:53:58.387Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=58b83d2a-84e7-4a19-8aae-5cfb0f77d6b0, session_timestamp=2019-06-19T09:53:58.387Z, thread-id=1498}
[INFO ] 2019-06-19T09:53:58,869Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Linking: 057BE52B39F01A3C6B7DD356C26AD9778D339F720168211411C17ACFC17E280F to O=Bob Plc, L=Rome, C=IT {actor_id=Only For Testing, actor_owning_identity=O=Bob Plc, L=Rome, C=IT, actor_store_id=TEST, fiber-id=10000023, flow-id=01fdd036-657f-4cb4-a1d2-389e59c3deaf, invocation_id=5ac42efb-b5c7-470c-9ef6-8c2b142810d3, invocation_timestamp=2019-06-19T09:53:58.786Z, origin=Only For Testing, session_id=5ac42efb-b5c7-470c-9ef6-8c2b142810d3, session_timestamp=2019-06-19T09:53:58.786Z, thread-id=1498}
[INFO ] 2019-06-19T09:56:52,324Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095645.244/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:56:52,369Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:56:52,411Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:56:52,560Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:56:53,691Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:56:53,810Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:56:53,811Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:56:54,180Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:56:45.244Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:56:59,729Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:56:59,733Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095645.244/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:56:59,733Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:56:59,737Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:56:59,810Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:56:59,817Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:01,913Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:02,629Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:57:02,633Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:02,633Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:02,884Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:02,962Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:57:03,052Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:57:03,071Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:57:03,071Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:57:03,350Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:57:03,359Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:57:03,360Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:03,365Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:03,521Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:03,587Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:57:03,609Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[WARN ] 2019-06-19T09:57:03,621Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:57:03,641Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:03,706Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:57:03,711Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:57:03,715Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:57:03,745Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095645.244/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:57:03,801Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:57:04,145Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:04,170Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:04,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:04,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:04,172Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:04,180Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095645.244/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:57:04,180Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:57:04,180Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:04,214Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:04,507Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:57:04,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:57:04,572Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:57:04,576Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:56:45.244Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:57:05,165Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:57:05,167Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095645.244/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:57:05,167Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:57:05,171Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:57:05,173Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,173Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,232Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,249Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:57:05,251Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,251Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,326Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,335Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:57:05,363Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:57:05,365Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,366Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,485Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:05,486Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:57:05,508Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:57:05,508Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,511Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:05,520Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,528Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:57:05,531Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[WARN ] 2019-06-19T09:57:05,534Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:57:05,537Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:05,593Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:57:05,595Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095645.244/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:57:05,596Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:57:05,602Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,606Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:05,608Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:05,619Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,620Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:05,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:05,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:05,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:05,639Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095645.244/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:57:05,640Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:57:05,640Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:05,672Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:05,709Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:57:05,735Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:57:05,735Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:57:05,739Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:56:45.244Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:57:06,205Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:57:06,207Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095645.244/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:57:06,207Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:57:06,210Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:57:06,212Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,212Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,267Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,284Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:57:06,285Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,286Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,362Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,371Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:57:06,405Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:57:06,406Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,406Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,522Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:06,524Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:57:06,544Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:57:06,544Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,546Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:06,553Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,562Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:57:06,565Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[WARN ] 2019-06-19T09:57:06,568Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:57:06,571Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:06,634Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:57:06,636Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095645.244/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:57:06,637Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:57:06,643Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:06,648Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:06,658Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,659Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:06,670Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:06,671Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:06,680Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,682Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:06,691Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:06,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:06,692Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:06,698Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095645.244/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:57:06,698Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:57:06,699Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:06,730Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095645.244/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:57:06,768Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:57:06,790Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:57:06,790Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:57:06,796Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:56:45.244Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:57:07,363Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:57:07,366Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095645.244/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:57:07,366Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:57:07,371Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:57:07,375Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,447Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,490Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:57:07,493Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,493Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,562Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,569Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:57:07,601Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:57:07,602Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,603Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,711Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:57:07,712Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:57:07,729Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:57:07,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,732Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,738Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,744Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:57:07,747Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[WARN ] 2019-06-19T09:57:07,749Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:57:07,753Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:07,806Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:57:07,808Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095645.244/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:57:07,808Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:57:07,815Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,818Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938223359) {}
[INFO ] 2019-06-19T09:57:07,820Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,828Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,829Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938225508) {}
[INFO ] 2019-06-19T09:57:07,840Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,849Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,850Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,859Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938226544) {}
[INFO ] 2019-06-19T09:57:07,860Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,869Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,870Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:57:07,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:07,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938227730) {}
[INFO ] 2019-06-19T09:57:07,879Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:57:07,886Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:57:07,891Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:57:07,894Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:57:07,894Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:57:08,173Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333}
[WARN ] 2019-06-19T09:57:08,173Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333}
[INFO ] 2019-06-19T09:57:09,979Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:09,979Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,081Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,081Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,357Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 9F05B7C2034DA42F906162D27B7094A51E8779F33974F055E9610E8916055BE1 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,357Z [Mock node 3 thread] corda.flow.call - Generating spend for: 3d265ed5-8b51-4435-b84c-d1b537d9885d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[WARN ] 2019-06-19T09:57:10,411Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9A64D7F170640B09B854199192D67FBF31B70EC14BDBC744CC42B678395D737B, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,416Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 3d265ed5-8b51-4435-b84c-d1b537d9885d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,522Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=D7AC4EE7D55304CA5F6126FD6AC9F23A66A3A4E8A2D9C4091F27E84245629026}
[INFO ] 2019-06-19T09:57:10,560Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:10,807Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:10,808Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:10,855Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:10,855Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:10,855Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=3d265ed5-8b51-4435-b84c-d1b537d9885d, invocation_id=65d77e37-f66d-4153-806f-80b7f7070deb, invocation_timestamp=2019-06-19T09:57:07.927Z, origin=Only For Testing, session_id=65d77e37-f66d-4153-806f-80b7f7070deb, session_timestamp=2019-06-19T09:57:07.927Z, thread-id=333, tx_id=95B4BA22FC5D58991B6304F588092E5D27537FA13A2BDC4324AE7FF05D52CA5E}
[INFO ] 2019-06-19T09:57:17,446Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: 9F05B7C2034DA42F906162D27B7094A51E8779F33974F055E9610E8916055BE1 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000004, flow-id=d62ab477-8b76-4308-8ca7-e2177b5eb307, invocation_id=7a9efa85-93be-47c6-8cca-910e6d717a4a, invocation_timestamp=2019-06-19T09:57:10.880Z, origin=Only For Testing, session_id=7a9efa85-93be-47c6-8cca-910e6d717a4a, session_timestamp=2019-06-19T09:57:10.880Z, thread-id=355}
[INFO ] 2019-06-19T09:57:23,800Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 47510E94D9CBCFD45197CA5A3D64C421F3256A0D66B2D2053FA3F876CFDBF44E to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
[INFO ] 2019-06-19T09:57:23,801Z [Mock node 3 thread] corda.flow.call - Generating spend for: 6e148d8a-6718-4459-8c0f-d6dbfe3bb059 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
[WARN ] 2019-06-19T09:57:23,815Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 9A64D7F170640B09B854199192D67FBF31B70EC14BDBC744CC42B678395D737B, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
[INFO ] 2019-06-19T09:57:23,819Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 6e148d8a-6718-4459-8c0f-d6dbfe3bb059 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
[INFO ] 2019-06-19T09:57:23,846Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
[INFO ] 2019-06-19T09:57:23,878Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:23,972Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyRn6uBdsi4Q7qcPnjg6pFbCtXfWtxCEUAGf1Bddw4AFVS {fiber-id=10000007, flow-id=3c54c1b1-6bd7-4f76-9920-54adea96aefc, invocation_id=d90d6ef4-17b0-489f-8783-5b060222ebdc, invocation_timestamp=2019-06-19T09:57:23.891Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=d90d6ef4-17b0-489f-8783-5b060222ebdc, session_timestamp=2019-06-19T09:57:23.891Z, thread-id=354}
[INFO ] 2019-06-19T09:57:24,000Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,001Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,011Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,030Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,093Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,093Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,093Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,104Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyRn6uBdsi4Q7qcPnjg6pFbCtXfWtxCEUAGf1Bddw4AFVS {}
[INFO ] 2019-06-19T09:57:24,120Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,135Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,146Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLfzDLEr5ibL7f8JTv94jRTPcwmrWC8jENjGXEkNWFaBR {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[WARN ] 2019-06-19T09:57:24,147Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5oPdkrcBugkJq6GrDGRxyFid7dKkQCvxX5ktUJP1nQoX) {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,149Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355, tx_id=8B1B6A689FC3EA97215EA57D399812000F43CFEC5FE47E29A485D72AFF6D91B1}
[INFO ] 2019-06-19T09:57:24,154Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLfzDLEr5ibL7f8JTv94jRTPcwmrWC8jENjGXEkNWFaBR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,155Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5oPdkrcBugkJq6GrDGRxyFid7dKkQCvxX5ktUJP1nQoX) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355}
[INFO ] 2019-06-19T09:57:24,155Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLfzDLEr5ibL7f8JTv94jRTPcwmrWC8jENjGXEkNWFaBR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,156Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL5oPdkrcBugkJq6GrDGRxyFid7dKkQCvxX5ktUJP1nQoX) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0ea625a2-15b2-46a2-97c9-aec990901f42, invocation_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, invocation_timestamp=2019-06-19T09:57:23.756Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=2cc4bd83-027c-4f84-96e3-aa294c98a64c, session_timestamp=2019-06-19T09:57:23.756Z, thread-id=355}
[INFO ] 2019-06-19T09:57:24,226Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyRn6uBdsi4Q7qcPnjg6pFbCtXfWtxCEUAGf1Bddw4AFVS {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[INFO ] 2019-06-19T09:57:24,227Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLfzDLEr5ibL7f8JTv94jRTPcwmrWC8jENjGXEkNWFaBR {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[INFO ] 2019-06-19T09:57:24,237Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyLfzDLEr5ibL7f8JTv94jRTPcwmrWC8jENjGXEkNWFaBR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,263Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=6e148d8a-6718-4459-8c0f-d6dbfe3bb059, invocation_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, invocation_timestamp=2019-06-19T09:57:23.728Z, origin=Only For Testing, session_id=5ca48040-07db-4a85-b77e-3ea11c6f4997, session_timestamp=2019-06-19T09:57:23.728Z, thread-id=333}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:57:24,279Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[INFO ] 2019-06-19T09:57:24,284Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668), SessionId(toLong=178169146176435877)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-178169146176435877--5728235567203490806)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))]), frozenFiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@4a05db24, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55) {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[INFO ] 2019-06-19T09:57:24,287Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:57:24,289Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:57:24,326Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] errored, dumping all transitions:

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.205Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A538861438CEFBA457281D65AC14D9685DCA463F29271301872319E647726F34), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc])
    SignalFlowHasStarted(flowId=[dc095ab2-e85f-4b4b-afbd-be082154a9d9])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4853470108098122295), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3966212659460092964-5430096693768358668-0-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.216Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.225Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), maySkipCheckpoint=false, fiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A538861438CEFBA457281D65AC14D9685DCA463F29271301872319E647726F34)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.225Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.234Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}), maySkipCheckpoint=false, fiber=35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}), frozenFiber=35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832
    35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.235Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3966212659460092964-5430096693768358668-2-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.241Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), maySkipCheckpoint=false, fiber=39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A
    39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.241Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.244Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4853470108098122295), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0]
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.244Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.245Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.246Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], sessionId=SessionId(toLong=178169146176435877))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=178169146176435877): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.246Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.253Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668), SessionId(toLong=178169146176435877)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false), frozenFiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0]
    []
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794
    13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false)
checkpoint.numberOfSuspends: 
    3
    4


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.258Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=178169146176435877), initiationEntropy=-5728235567203490806, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-178169146176435877--5728235567203490806-4-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=178169146176435877): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-178169146176435877--5728235567203490806)
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))])


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.278Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=178169146176435877), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-5124624334945235454)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616]
checkpoint.sessions.SessionId(toLong=178169146176435877).rejectionError: 
    null
    FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.292Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.296Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.298Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[WARN ] 2019-06-19T09:57:24,326Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:57:24,329Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[INFO ] 2019-06-19T09:57:24,399Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[INFO ] 2019-06-19T09:57:24,400Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), frozenFiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@2014e774, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[INFO ] 2019-06-19T09:57:24,401Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:57:24,401Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:57:24,409Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] errored, dumping all transitions:

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.160Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4E07C45FF796D942698FE1EAF7D44CFB26482B680DEDD3049216339FA6ED513A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8])
    SignalFlowHasStarted(flowId=[7f5f0f83-7174-47b7-b539-0ed74eb0a965])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.160Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], sessionId=SessionId(toLong=3966212659460092964))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.168Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.182Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), frozenFiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=4E07C45FF796D942698FE1EAF7D44CFB26482B680DEDD3049216339FA6ED513A)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), frozenFiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.192Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=3966212659460092964), initiationEntropy=5430096693768358668, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-3966212659460092964-5430096693768358668-1-0), senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-3966212659460092964-5430096693768358668)
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.209Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4853470108098122295), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d]
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-3966212659460092964-5430096693768358668)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.235Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23]
checkpoint.sessions.SessionId(toLong=3966212659460092964).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.236Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3966212659460092964).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.242Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB}), maySkipCheckpoint=false, fiber=736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB}), frozenFiber=736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23]
    []
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719
    736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.243Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4853470108098122295), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-3966212659460092964-5430096693768358668-2-0), senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.243Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.249Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), maySkipCheckpoint=false, fiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), frozenFiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2
    9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.249Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.397Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ErrorSessionMessage(flowException=null, errorId=-5124624334945235454)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee]
checkpoint.sessions.SessionId(toLong=3966212659460092964).errors: 
    []
    [FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.398Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,409Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:57:24,410Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,413Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] errored, dumping all transitions:

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.205Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=A538861438CEFBA457281D65AC14D9685DCA463F29271301872319E647726F34), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc])
    SignalFlowHasStarted(flowId=[dc095ab2-e85f-4b4b-afbd-be082154a9d9])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4853470108098122295), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3966212659460092964-5430096693768358668-0-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9fa1dfc]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.216Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.225Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), maySkipCheckpoint=false, fiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=A538861438CEFBA457281D65AC14D9685DCA463F29271301872319E647726F34)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.225Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.234Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}), maySkipCheckpoint=false, fiber=35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}), frozenFiber=35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    01A11F4371D2C5E7866DE32B8812AB997115F9022965338674483F38975B8832
    35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.235Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3966212659460092964-5430096693768358668-2-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.241Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), maySkipCheckpoint=false, fiber=39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))]), frozenFiber=39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    35237B6B3EF87B7BABD8524D6900FCADBFC6504A87D2B448806E0586CE55D16A
    39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.241Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.244Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4853470108098122295), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0]
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.244Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=4853470108098122295).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.245Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.246Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], sessionId=SessionId(toLong=178169146176435877))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=178169146176435877): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.246Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.253Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1, )
  Actions: 
    PersistCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668), SessionId(toLong=178169146176435877)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false), frozenFiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6c8699e0]
    []
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    39736A936D7B7D235CF485201ADFDB61C458C3DAF69D99B94771EE893CC37794
    13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=4853470108098122295))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false)
checkpoint.numberOfSuspends: 
    3
    4


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.258Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=178169146176435877), initiationEntropy=-5728235567203490806, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-178169146176435877--5728235567203490806-4-0), senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=178169146176435877): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=178169146176435877), additionalEntropy=-5728235567203490806)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-178169146176435877--5728235567203490806)
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))=67CABB667507583455DCD77DEC18CCA97CA5ACCAEBC152B73204F781CD421FB8}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))])


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.278Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=178169146176435877), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-5124624334945235454)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616]
checkpoint.sessions.SessionId(toLong=178169146176435877).rejectionError: 
    null
    FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.279Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.292Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.296Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.298Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] ---
  Timestamp: 2019-06-19T09:57:24.403Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5124624334945235454)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668)], senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55)
    CreateTransaction
    RemoveCheckpoint(id=[dc095ab2-e85f-4b4b-afbd-be082154a9d9])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616])
    ReleaseSoftLocks(uuid=dc095ab2-e85f-4b4b-afbd-be082154a9d9)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=4853470108098122295), SessionId(toLong=178169146176435877)])
    RemoveFlow(flowId=[dc095ab2-e85f-4b4b-afbd-be082154a9d9], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Invocation, sessionId=6314f4a8-fa55-495e-b8a3-cd3940da88f6, timestamp: 2019-06-19T09:57:24.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=4853470108098122295)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3966212659460092964)), errors=[], deduplicationSeed=D-3966212659460092964-5430096693768358668), SessionId(toLong=178169146176435877)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-178169146176435877--5728235567203490806)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=178169146176435877))]), frozenFiber=13E67B7CD730D04A7292420DFEDF431421C5006BF16C3F2E0CAA3D92A8BD38D1), errorState=Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@4a05db24, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e0924b2d-43d4-4cba-9e1a-20976527fc55))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2a60a616]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
[WARN ] 2019-06-19T09:57:24,413Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [dc095ab2-e85f-4b4b-afbd-be082154a9d9] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=dc095ab2-e85f-4b4b-afbd-be082154a9d9, invocation_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, invocation_timestamp=2019-06-19T09:57:24.197Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=6314f4a8-fa55-495e-b8a3-cd3940da88f6, session_timestamp=2019-06-19T09:57:24.197Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:57:24,421Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] errored, dumping all transitions:

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.160Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=4E07C45FF796D942698FE1EAF7D44CFB26482B680DEDD3049216339FA6ED513A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8])
    SignalFlowHasStarted(flowId=[7f5f0f83-7174-47b7-b539-0ed74eb0a965])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@ef918c8]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.160Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], sessionId=SessionId(toLong=3966212659460092964))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.168Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.182Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), frozenFiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=4E07C45FF796D942698FE1EAF7D44CFB26482B680DEDD3049216339FA6ED513A)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false), frozenFiber=B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.192Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=3966212659460092964), initiationEntropy=5430096693768358668, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-3966212659460092964-5430096693768358668-1-0), senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=3966212659460092964), additionalEntropy=5430096693768358668)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-3966212659460092964-5430096693768358668)
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=0384CA5B49C36169AFD6049FDD170547F6ABA72EE07423A7A6B5A645B9FA5A6C}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.209Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=4853470108098122295), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d]
checkpoint.sessions.SessionId(toLong=3966212659460092964): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-3966212659460092964-5430096693768358668)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.210Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.235Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23]
checkpoint.sessions.SessionId(toLong=3966212659460092964).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.236Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3966212659460092964).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.242Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB}), maySkipCheckpoint=false, fiber=736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB}), frozenFiber=736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f51497d, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5a49ac23]
    []
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    B129DAF410CD83C941A342F103408BB22C8CE4A33246ED3D0F7209801EC26719
    736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB})
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.243Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4853470108098122295), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-3966212659460092964-5430096693768358668-2-0), senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.243Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.249Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), maySkipCheckpoint=false, fiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D, )
  Actions: 
    PersistCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), frozenFiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.frozenFiber.hash: 
    736258F45C911246965B4F4EDB7F58A9FDE7DCDF980E9DD82FC68707CB2949D2
    9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))=984DB8148AB6E6591A882DEB6965D74E797CA00A61B3B5A22C7396A851CD11EB})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))])
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.249Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.397Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3966212659460092964), payload=ErrorSessionMessage(flowException=null, errorId=-5124624334945235454)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee]
checkpoint.sessions.SessionId(toLong=3966212659460092964).errors: 
    []
    [FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.398Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.401Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] ---
  Timestamp: 2019-06-19T09:57:24.412Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5124624334945235454)], sessions=[], senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de)
    CreateTransaction
    RemoveCheckpoint(id=[7f5f0f83-7174-47b7-b539-0ed74eb0a965])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee])
    ReleaseSoftLocks(uuid=7f5f0f83-7174-47b7-b539-0ed74eb0a965)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3966212659460092964)])
    RemoveFlow(flowId=[7f5f0f83-7174-47b7-b539-0ed74eb0a965], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Invocation, sessionId=a3557482-117f-4e60-9e8e-8f3572462b64, timestamp: 2019-06-19T09:57:24.118Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=3966212659460092964)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4853470108098122295)), errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R-3966212659460092964-5430096693768358668)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=3966212659460092964))]), frozenFiber=9002C5E67A0D72897769B96E120CA91221519970F78321AFDFEAA91A29D5229D), errorState=Errored(errors=[FlowError(errorId=-5124624334945235454, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@2014e774, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=d36cec07-fc51-4539-abe7-d65dd5e867de))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7ca995ee]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
[WARN ] 2019-06-19T09:57:24,421Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [7f5f0f83-7174-47b7-b539-0ed74eb0a965] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=7f5f0f83-7174-47b7-b539-0ed74eb0a965, invocation_id=a3557482-117f-4e60-9e8e-8f3572462b64, invocation_timestamp=2019-06-19T09:57:24.118Z, origin=Only For Testing, session_id=a3557482-117f-4e60-9e8e-8f3572462b64, session_timestamp=2019-06-19T09:57:24.118Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:58:11,856Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095805.017/nodes/0/cordapps] {}
[INFO ] 2019-06-19T09:58:11,883Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:58:11,921Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:12,064Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:13,094Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:58:13,170Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:58:13,171Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:58:13,376Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:58:05.017Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:58:18,279Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:58:18,284Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095805.017/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:58:18,284Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:58:18,289Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:58:18,352Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:18,358Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:20,181Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:20,856Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:58:20,860Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:20,861Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:21,118Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:21,196Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:58:21,286Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:58:21,306Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:58:21,306Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:58:21,582Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T09:58:21,593Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:58:21,593Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:21,599Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:21,761Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:21,825Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:58:21,848Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[WARN ] 2019-06-19T09:58:21,861Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T09:58:21,879Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:21,943Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:58:21,949Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T09:58:21,952Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T09:58:21,982Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095805.017/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:58:22,036Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:58:22,396Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:22,424Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:22,426Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:22,426Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:22,426Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:22,433Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095805.017/nodes/1/cordapps] {}
[INFO ] 2019-06-19T09:58:22,434Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:58:22,434Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:22,465Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:22,500Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:58:22,526Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:58:22,527Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:58:22,530Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:58:05.017Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:58:23,105Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:58:23,108Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095805.017/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:58:23,108Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:58:23,111Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:58:23,114Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,114Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,178Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,196Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:58:23,198Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,199Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,281Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,292Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:58:23,324Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:58:23,327Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,328Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,447Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:23,448Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:58:23,471Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:58:23,471Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,474Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:23,482Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,490Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:58:23,494Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[WARN ] 2019-06-19T09:58:23,496Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T09:58:23,500Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:23,558Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:58:23,560Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095805.017/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:58:23,560Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:58:23,568Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,571Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:23,573Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:23,585Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,586Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:23,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:23,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:23,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:23,602Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095805.017/nodes/2/cordapps] {}
[INFO ] 2019-06-19T09:58:23,602Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:58:23,603Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:23,633Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:23,669Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:58:23,690Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:58:23,690Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:58:23,694Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:58:05.017Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:58:24,142Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:58:24,144Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095805.017/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:58:24,144Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:58:24,147Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:58:24,150Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,151Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,205Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,220Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:58:24,223Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,223Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,294Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,302Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:58:24,332Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:58:24,334Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,334Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,449Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:24,451Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:58:24,473Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:58:24,473Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,475Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:24,484Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,493Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:58:24,496Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[WARN ] 2019-06-19T09:58:24,498Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T09:58:24,502Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:24,561Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:58:24,563Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095805.017/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:58:24,564Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:58:24,571Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,575Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:24,577Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:24,586Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,588Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:24,597Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:24,598Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:24,607Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,609Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:24,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:24,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:24,618Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:24,624Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-095805.017/nodes/3/cordapps] {}
[INFO ] 2019-06-19T09:58:24,624Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T09:58:24,624Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:24,652Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-095805.017/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T09:58:24,685Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T09:58:24,706Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T09:58:24,706Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T09:58:24,712Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T09:58:05.017Z
      epoch=1
  } {}
[INFO ] 2019-06-19T09:58:25,219Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T09:58:25,221Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-095805.017/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T09:58:25,221Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T09:58:25,224Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T09:58:25,226Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,226Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,281Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,324Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T09:58:25,326Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,327Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,393Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,401Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T09:58:25,430Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T09:58:25,432Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,432Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,542Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T09:58:25,544Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T09:58:25,562Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T09:58:25,563Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,565Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,571Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,578Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T09:58:25,581Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[WARN ] 2019-06-19T09:58:25,583Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T09:58:25,588Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:25,644Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T09:58:25,646Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-095805.017/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T09:58:25,647Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T09:58:25,653Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,657Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938301593) {}
[INFO ] 2019-06-19T09:58:25,658Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,667Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,668Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,680Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938303471) {}
[INFO ] 2019-06-19T09:58:25,681Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,689Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,690Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,698Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938304473) {}
[INFO ] 2019-06-19T09:58:25,699Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,707Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,708Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T09:58:25,716Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,716Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:25,716Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938305563) {}
[INFO ] 2019-06-19T09:58:25,716Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T09:58:25,723Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:58:25,727Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T09:58:25,731Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T09:58:25,731Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T09:58:26,046Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333}
[WARN ] 2019-06-19T09:58:26,046Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333}
[INFO ] 2019-06-19T09:58:28,001Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,001Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,092Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,093Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,340Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: B7713569FDAF9D3917BD55BA4589A164C53EDC7CB48903992FA0C71ABBF5E01F to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,341Z [Mock node 3 thread] corda.flow.call - Generating spend for: 0e957409-c0bb-4fb4-816e-cb9375e4e8f4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[WARN ] 2019-06-19T09:58:28,388Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3B258658136133904E9CBDFB1FDF48239677EDD77CBF0C4EF9C1FA421F53DF13, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,393Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 0e957409-c0bb-4fb4-816e-cb9375e4e8f4 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,492Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=59A25247A843C7331FA73D99B6BEF2DDE1382FB1B88FF552AB3B433B1E680651}
[INFO ] 2019-06-19T09:58:28,529Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:28,743Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:28,745Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:28,784Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:28,784Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:28,784Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=0e957409-c0bb-4fb4-816e-cb9375e4e8f4, invocation_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, invocation_timestamp=2019-06-19T09:58:25.769Z, origin=Only For Testing, session_id=09b257c5-2f8c-4588-b74b-20b11db2cdb6, session_timestamp=2019-06-19T09:58:25.769Z, thread-id=333, tx_id=C378A39FB5B8F7B8B0B1B4B7CCCA17C5DE406267DD9CE707497C786584E70BC9}
[INFO ] 2019-06-19T09:58:49,287Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: B7713569FDAF9D3917BD55BA4589A164C53EDC7CB48903992FA0C71ABBF5E01F to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000004, flow-id=1aacfe55-24b0-4abe-93a7-662b969c27e9, invocation_id=fa88bd3a-2bb0-4f36-9a1f-989d4c43de3b, invocation_timestamp=2019-06-19T09:58:28.804Z, origin=Only For Testing, session_id=fa88bd3a-2bb0-4f36-9a1f-989d4c43de3b, session_timestamp=2019-06-19T09:58:28.804Z, thread-id=355}
[INFO ] 2019-06-19T09:58:49,334Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 7EFB2E364C3529804CE78BB9B7E86DE4B156BAB1D842B9AF7836B891DC516F26 to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
[INFO ] 2019-06-19T09:58:49,335Z [Mock node 3 thread] corda.flow.call - Generating spend for: f1d02d23-207f-4c34-8bc0-206f6d0b4188 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
[WARN ] 2019-06-19T09:58:49,344Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 3B258658136133904E9CBDFB1FDF48239677EDD77CBF0C4EF9C1FA421F53DF13, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
[INFO ] 2019-06-19T09:58:49,346Z [Mock node 3 thread] corda.flow.call - Signing transaction for: f1d02d23-207f-4c34-8bc0-206f6d0b4188 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
[INFO ] 2019-06-19T09:58:49,360Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
[INFO ] 2019-06-19T09:58:49,378Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,439Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyMp97TLjQViSEbfedfNvA2sCf5g1iiTkcJ2XxEHswKNhk {fiber-id=10000007, flow-id=90196e11-4a68-4203-812e-3d96a03c552b, invocation_id=404b7f8a-d8df-4eec-af2e-1269f388ebe4, invocation_timestamp=2019-06-19T09:58:49.386Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=404b7f8a-d8df-4eec-af2e-1269f388ebe4, session_timestamp=2019-06-19T09:58:49.386Z, thread-id=354}
[INFO ] 2019-06-19T09:58:49,454Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,455Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,461Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,474Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,515Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,515Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,515Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,523Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyMp97TLjQViSEbfedfNvA2sCf5g1iiTkcJ2XxEHswKNhk {}
[INFO ] 2019-06-19T09:58:49,535Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,544Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,551Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQB1ew2524BYsJn2uQKVTS43bB8ga9RKbD4mCdWBJy7ja {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[WARN ] 2019-06-19T09:58:49,552Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL9YgWtGS1Yzr4PXPguhrEJbaAQkkASTdsBnmfip6EEZo3) {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,553Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355, tx_id=97C5D712479E7F4DB105FE401D553CCD5FDC8AF313AB7EFED4A7DB098DD396D6}
[INFO ] 2019-06-19T09:58:49,557Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQB1ew2524BYsJn2uQKVTS43bB8ga9RKbD4mCdWBJy7ja {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,557Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL9YgWtGS1Yzr4PXPguhrEJbaAQkkASTdsBnmfip6EEZo3) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355}
[INFO ] 2019-06-19T09:58:49,558Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQB1ew2524BYsJn2uQKVTS43bB8ga9RKbD4mCdWBJy7ja {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,558Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DL9YgWtGS1Yzr4PXPguhrEJbaAQkkASTdsBnmfip6EEZo3) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=4a1ba499-196d-49ea-b259-6030be126ee8, invocation_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, invocation_timestamp=2019-06-19T09:58:49.309Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=b7a7a87d-16c9-4109-a01e-7fa4ba45a8e9, session_timestamp=2019-06-19T09:58:49.309Z, thread-id=355}
[INFO ] 2019-06-19T09:58:49,606Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyMp97TLjQViSEbfedfNvA2sCf5g1iiTkcJ2XxEHswKNhk {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[INFO ] 2019-06-19T09:58:49,607Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQB1ew2524BYsJn2uQKVTS43bB8ga9RKbD4mCdWBJy7ja {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[INFO ] 2019-06-19T09:58:49,612Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyQB1ew2524BYsJn2uQKVTS43bB8ga9RKbD4mCdWBJy7ja {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,632Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=f1d02d23-207f-4c34-8bc0-206f6d0b4188, invocation_id=278f2038-ea2a-4892-8520-cbde392146ad, invocation_timestamp=2019-06-19T09:58:49.293Z, origin=Only For Testing, session_id=278f2038-ea2a-4892-8520-cbde392146ad, session_timestamp=2019-06-19T09:58:49.293Z, thread-id=333}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:58:49,643Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[INFO ] 2019-06-19T09:58:49,646Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879), SessionId(toLong=-4280783267840644589)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--4280783267840644589-2201907638823079680)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))]), frozenFiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@29208b61, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e) {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[INFO ] 2019-06-19T09:58:49,650Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:58:49,651Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:58:49,678Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] errored, dumping all transitions:

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D18E343B25CBB33DD49709649DC97E43AA6831E4619B0851122F8D467BC60A5B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7])
    SignalFlowHasStarted(flowId=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7020300840116864138), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3013662692252236265-6777929920943277879-0-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.600Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.605Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), maySkipCheckpoint=false, fiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D18E343B25CBB33DD49709649DC97E43AA6831E4619B0851122F8D467BC60A5B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.605Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.611Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}), maySkipCheckpoint=false, fiber=7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}), frozenFiber=7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3})
checkpoint.flowState.frozenFiber.hash: 
    4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17
    7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.611Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3013662692252236265-6777929920943277879-2-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.615Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), maySkipCheckpoint=false, fiber=B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
checkpoint.flowState.frozenFiber.hash: 
    7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999
    B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.615Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7020300840116864138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], sessionId=SessionId(toLong=-4280783267840644589))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4280783267840644589): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.624Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879), SessionId(toLong=-4280783267840644589)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false), frozenFiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679
    51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.628Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4280783267840644589), initiationEntropy=2201907638823079680, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4280783267840644589-2201907638823079680-4-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))])
checkpoint.sessions.SessionId(toLong=-4280783267840644589): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4280783267840644589-2201907638823079680)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4280783267840644589), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-5985924302863830883)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4280783267840644589).rejectionError: 
    null
    FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.653Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.657Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.658Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[WARN ] 2019-06-19T09:58:49,678Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:58:49,680Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[INFO ] 2019-06-19T09:58:49,728Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[INFO ] 2019-06-19T09:58:49,729Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), frozenFiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@116707c2, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[INFO ] 2019-06-19T09:58:49,729Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T09:58:49,730Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:58:49,736Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] errored, dumping all transitions:

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.562Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CECC2BA11B48AD36809B7C2EEBBFD864E6C11FAE7F5E5148C095AFC53BA0C688), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a])
    SignalFlowHasStarted(flowId=[d9c512db-93f2-4258-bcf0-6eab18ba1f76])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.562Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], sessionId=SessionId(toLong=-3013662692252236265))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.577Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), frozenFiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=CECC2BA11B48AD36809B7C2EEBBFD864E6C11FAE7F5E5148C095AFC53BA0C688)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), frozenFiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.583Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-3013662692252236265), initiationEntropy=6777929920943277879, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--3013662692252236265-6777929920943277879-1-0), senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--3013662692252236265-6777929920943277879)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.595Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7020300840116864138), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--3013662692252236265-6777929920943277879)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.595Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.612Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.612Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3013662692252236265).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.616Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC}), maySkipCheckpoint=false, fiber=4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC}), frozenFiber=4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC})
checkpoint.flowState.frozenFiber.hash: 
    EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669
    4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7020300840116864138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--3013662692252236265-6777929920943277879-2-0), senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.620Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), maySkipCheckpoint=false, fiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), frozenFiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
checkpoint.flowState.frozenFiber.hash: 
    4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8
    92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.620Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.728Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ErrorSessionMessage(flowException=null, errorId=-5985924302863830883)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265).errors: 
    []
    [FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.728Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.730Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.730Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.731Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,736Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:58:49,737Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,740Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] errored, dumping all transitions:

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D18E343B25CBB33DD49709649DC97E43AA6831E4619B0851122F8D467BC60A5B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7])
    SignalFlowHasStarted(flowId=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7020300840116864138), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3013662692252236265-6777929920943277879-0-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@51e7a3f7]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.600Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.605Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), maySkipCheckpoint=false, fiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D18E343B25CBB33DD49709649DC97E43AA6831E4619B0851122F8D467BC60A5B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.605Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.611Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}), maySkipCheckpoint=false, fiber=7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}), frozenFiber=7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3})
checkpoint.flowState.frozenFiber.hash: 
    4E50BFC532BA0287D5E17D11727DE8B957F98B46FB482ECF3980494972660B17
    7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.611Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3013662692252236265-6777929920943277879-2-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.615Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), maySkipCheckpoint=false, fiber=B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))]), frozenFiber=B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
checkpoint.flowState.frozenFiber.hash: 
    7C3EF73E47D220D11036A82C7A68D37358F3E09688109AF4D03D1198FAD20999
    B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.615Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7020300840116864138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=7020300840116864138).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], sessionId=SessionId(toLong=-4280783267840644589))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4280783267840644589): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.619Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.624Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648, )
  Actions: 
    PersistCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879), SessionId(toLong=-4280783267840644589)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false), frozenFiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=7020300840116864138))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    B9A759430EE5A1EF72460015C08741ED41296690AD00B6DA9E29FC7413877679
    51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@56297f96]
    []


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.628Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4280783267840644589), initiationEntropy=2201907638823079680, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4280783267840644589-2201907638823079680-4-0), senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))=B39722CF0FF3BE0360D7E71CEFABEC79C24C72AB27C237C5C54FEBEA53E1329A}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))])
checkpoint.sessions.SessionId(toLong=-4280783267840644589): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4280783267840644589), additionalEntropy=2201907638823079680)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4280783267840644589-2201907638823079680)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4280783267840644589), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=-5985924302863830883)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4280783267840644589).rejectionError: 
    null
    FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.643Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.653Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.657Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.658Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] ---
  Timestamp: 2019-06-19T09:58:49.734Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5985924302863830883)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879)], senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e)
    CreateTransaction
    RemoveCheckpoint(id=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f])
    ReleaseSoftLocks(uuid=e59c2a90-4dea-4ca8-ba72-adc1d41e292f)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7020300840116864138), SessionId(toLong=-4280783267840644589)])
    RemoveFlow(flowId=[e59c2a90-4dea-4ca8-ba72-adc1d41e292f], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Invocation, sessionId=e8845a5a-6a01-46ed-a9d8-8159154ddba0, timestamp: 2019-06-19T09:58:49.587Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=7020300840116864138)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3013662692252236265)), errors=[], deduplicationSeed=D--3013662692252236265-6777929920943277879), SessionId(toLong=-4280783267840644589)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R--4280783267840644589-2201907638823079680)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=-4280783267840644589))]), frozenFiber=51E31890101D2F37CC5CBD1CC919053AE1ED9152F9E3A34509F495FE135A2648), errorState=Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@29208b61, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3289b90e-ea8f-4b59-bf2f-96548fa8914e))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6869869f]
    []
isRemoved: 
    false
    true
 {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
[WARN ] 2019-06-19T09:58:49,740Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e59c2a90-4dea-4ca8-ba72-adc1d41e292f] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=e59c2a90-4dea-4ca8-ba72-adc1d41e292f, invocation_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, invocation_timestamp=2019-06-19T09:58:49.587Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=e8845a5a-6a01-46ed-a9d8-8159154ddba0, session_timestamp=2019-06-19T09:58:49.587Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T09:58:49,745Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] errored, dumping all transitions:

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.562Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CECC2BA11B48AD36809B7C2EEBBFD864E6C11FAE7F5E5148C095AFC53BA0C688), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a])
    SignalFlowHasStarted(flowId=[d9c512db-93f2-4258-bcf0-6eab18ba1f76])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@513ae15a]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.562Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], sessionId=SessionId(toLong=-3013662692252236265))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.568Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.577Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), frozenFiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=CECC2BA11B48AD36809B7C2EEBBFD864E6C11FAE7F5E5148C095AFC53BA0C688)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false), frozenFiber=EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.583Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-3013662692252236265), initiationEntropy=6777929920943277879, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--3013662692252236265-6777929920943277879-1-0), senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=7D72E670FDC22039B07310F077DB206A2A418AE4A4DE7B9EF580749E004D73A3}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-3013662692252236265), additionalEntropy=6777929920943277879)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--3013662692252236265-6777929920943277879)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.595Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7020300840116864138), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--3013662692252236265-6777929920943277879)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.595Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.612Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.612Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3013662692252236265).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.616Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC}), maySkipCheckpoint=false, fiber=4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC}), frozenFiber=4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC})
checkpoint.flowState.frozenFiber.hash: 
    EA358564229088ED74B73E2A7DAB5C5934CB2F50F184F8A4448F4FCB250AF669
    4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@35dd2b65, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@343683be]
    []


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7020300840116864138), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--3013662692252236265-6777929920943277879-2-0), senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.617Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.620Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), maySkipCheckpoint=false, fiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC, )
  Actions: 
    PersistCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), frozenFiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))=C0523EECBD85258E73C9CBE9D472F4238B40283333477546BD5863172647F6CC})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))])
checkpoint.flowState.frozenFiber.hash: 
    4D0401ECFD927DEC02E3610FB4DE455BF6895F5AEE604242F4311B0E1F243AB8
    92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.620Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.728Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3013662692252236265), payload=ErrorSessionMessage(flowException=null, errorId=-5985924302863830883)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3013662692252236265).errors: 
    []
    [FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810]


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.728Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.730Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.730Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.731Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] ---
  Timestamp: 2019-06-19T09:58:49.738Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5985924302863830883)], sessions=[], senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7)
    CreateTransaction
    RemoveCheckpoint(id=[d9c512db-93f2-4258-bcf0-6eab18ba1f76])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810])
    ReleaseSoftLocks(uuid=d9c512db-93f2-4258-bcf0-6eab18ba1f76)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3013662692252236265)])
    RemoveFlow(flowId=[d9c512db-93f2-4258-bcf0-6eab18ba1f76], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Invocation, sessionId=d82118e1-4175-457e-abff-a0658b64b28f, timestamp: 2019-06-19T09:58:49.532Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-3013662692252236265)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7020300840116864138)), errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--3013662692252236265-6777929920943277879)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-3013662692252236265))]), frozenFiber=92AD914860D4A7CB59859DD602E2B990C1B25721BC56B56CBFAAFA5D7A8E35EC), errorState=Errored(errors=[FlowError(errorId=-5985924302863830883, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@116707c2, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e8e9a214-8ef3-4baf-924a-7eb3921204e7))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7f791810]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
[WARN ] 2019-06-19T09:58:49,745Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d9c512db-93f2-4258-bcf0-6eab18ba1f76] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=d9c512db-93f2-4258-bcf0-6eab18ba1f76, invocation_id=d82118e1-4175-457e-abff-a0658b64b28f, invocation_timestamp=2019-06-19T09:58:49.532Z, origin=Only For Testing, session_id=d82118e1-4175-457e-abff-a0658b64b28f, session_timestamp=2019-06-19T09:58:49.532Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T10:04:28,735Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-100422.550/nodes/0/cordapps] {}
[INFO ] 2019-06-19T10:04:28,760Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T10:04:28,797Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/0/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:28,937Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/0/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:30,007Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T10:04:30,085Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T10:04:30,086Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T10:04:30,286Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T10:04:22.550Z
      epoch=1
  } {}
[INFO ] 2019-06-19T10:04:35,372Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T10:04:35,376Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-100422.550/nodes/0/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T10:04:35,376Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T10:04:35,380Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T10:04:35,433Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:35,439Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:37,308Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,052Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T10:04:38,056Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,056Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,298Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,372Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T10:04:38,461Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T10:04:38,479Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,479Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,738Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-06-19T10:04:38,748Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T10:04:38,748Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:38,753Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:38,909Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:38,968Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T10:04:38,990Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[WARN ] 2019-06-19T10:04:39,002Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Notary Service, L=Zurich, C=CH, not inserting the second time {}
[INFO ] 2019-06-19T10:04:39,022Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:39,087Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T10:04:39,093Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-06-19T10:04:39,096Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-06-19T10:04:39,123Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-100422.550/nodes/0/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T10:04:39,173Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T10:04:39,515Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:39,545Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:39,546Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:39,547Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:39,547Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:39,555Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-100422.550/nodes/1/cordapps] {}
[INFO ] 2019-06-19T10:04:39,556Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T10:04:39,556Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/1/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:39,587Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/1/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:39,624Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T10:04:39,670Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T10:04:39,671Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T10:04:39,674Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T10:04:22.550Z
      epoch=1
  } {}
[INFO ] 2019-06-19T10:04:40,179Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T10:04:40,182Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-100422.550/nodes/1/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T10:04:40,182Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T10:04:40,185Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T10:04:40,188Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,188Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,253Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,271Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T10:04:40,273Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,273Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,356Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,366Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T10:04:40,401Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T10:04:40,403Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,403Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,526Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:40,527Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T10:04:40,551Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T10:04:40,551Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,553Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:40,560Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,569Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T10:04:40,572Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[WARN ] 2019-06-19T10:04:40,574Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Alice Corp, L=Madrid, C=ES, not inserting the second time {}
[INFO ] 2019-06-19T10:04:40,577Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:40,660Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T10:04:40,663Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-100422.550/nodes/1/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T10:04:40,663Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T10:04:40,669Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,673Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:40,674Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:40,687Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,688Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:40,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:40,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:40,700Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:40,707Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-100422.550/nodes/2/cordapps] {}
[INFO ] 2019-06-19T10:04:40,707Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T10:04:40,707Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/2/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:40,763Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/2/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:40,816Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T10:04:40,857Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T10:04:40,857Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T10:04:40,861Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T10:04:22.550Z
      epoch=1
  } {}
[INFO ] 2019-06-19T10:04:41,340Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T10:04:41,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-100422.550/nodes/2/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T10:04:41,342Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T10:04:41,345Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T10:04:41,348Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,348Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,409Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,425Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T10:04:41,427Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,427Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,512Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,522Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T10:04:41,559Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T10:04:41,561Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,561Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,680Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:41,682Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T10:04:41,701Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T10:04:41,701Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,703Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:41,710Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,719Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T10:04:41,722Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[WARN ] 2019-06-19T10:04:41,725Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Bob Plc, L=Rome, C=IT, not inserting the second time {}
[INFO ] 2019-06-19T10:04:41,728Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:41,789Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T10:04:41,792Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-100422.550/nodes/2/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T10:04:41,792Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T10:04:41,799Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,803Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:41,805Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:41,816Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,817Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:41,828Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:41,829Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:41,838Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,840Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:41,849Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,849Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:41,849Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:41,849Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:41,855Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build/mock-network/20190619-100422.550/nodes/3/cordapps] {}
[INFO ] 2019-06-19T10:04:41,855Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null), RestrictedURL(url=file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar, rootPackageName=null) {}
[INFO ] 2019-06-19T10:04:41,856Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/3/cordapps/corda-finance-contracts-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:41,888Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/Users/williamhester/Desktop/Applications/confidential-identities/workflows/build/mock-network/20190619-100422.550/nodes/3/cordapps/corda-finance-workflows-5.0-SNAPSHOT-WILLH.jar {}
[INFO ] 2019-06-19T10:04:41,920Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-06-19T10:04:41,941Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashExitFlow to initiate net.corda.finance.flows.CashExitResponderFlow (version 1) {}
[INFO ] 2019-06-19T10:04:41,942Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.finance.flows.CashPaymentFlow to initiate net.corda.finance.flows.CashPaymentReceiverFlow (version 1) {}
[INFO ] 2019-06-19T10:04:41,947Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-06-19T10:04:22.550Z
      epoch=1
  } {}
[INFO ] 2019-06-19T10:04:42,385Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-06-19T10:04:42,387Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build/mock-network/20190619-100422.550/nodes/3/network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-06-19T10:04:42,387Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-06-19T10:04:42,390Z [Test worker] migration.PersistentIdentitiesMigration.execute - Migrating persistent identities with certificates table into persistent table with no certificate data. {}
[INFO ] 2019-06-19T10:04:42,392Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,392Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,442Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [PersistentIdentitiesMigrationSchemaV1(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,458Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-06-19T10:04:42,460Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,461Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,535Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,546Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-06-19T10:04:42,587Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-06-19T10:04:42,589Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,589Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,702Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), CashSchemaV1(name=net.corda.finance.schemas.CashSchema, version=1), CommercialPaperSchemaV1(name=net.corda.finance.schemas.CommercialPaperSchema, version=1)] {}
[INFO ] 2019-06-19T10:04:42,703Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-06-19T10:04:42,721Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-06-19T10:04:42,721Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,724Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,731Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,737Z [Test worker] network.NetworkMapUpdater.apply - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-06-19T10:04:42,740Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[WARN ] 2019-06-19T10:04:42,742Z [Test worker] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentityNames key O=Charlie Ltd, L=Athens, C=GR, not inserting the second time {}
[INFO ] 2019-06-19T10:04:42,746Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:42,800Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C2F26FA5BD1C5A3BAF4F109838BD28196CED189F51176C80FCD8858A5E55E45F uploader=app filename=null {}
[INFO ] 2019-06-19T10:04:42,802Z [Test worker] cordapp.CordappConfigFileProvider.getConfigByName - Found config for cordapp corda-finance-workflows-5.0-SNAPSHOT-WILLH in build/mock-network/20190619-100422.550/nodes/3/cordapps/config/corda-finance-workflows-5.0-SNAPSHOT-WILLH.conf {}
[INFO ] 2019-06-19T10:04:42,803Z [Test worker] internal.InternalMockNetwork$MockNode.installCordaService - Installed net.corda.finance.internal.ConfigHolder Corda service {}
[INFO ] 2019-06-19T10:04:42,809Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,812Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1560938678748) {}
[INFO ] 2019-06-19T10:04:42,813Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,822Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,833Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Alice Corp, L=Madrid, C=ES], platformVersion=5, serial=1560938680551) {}
[INFO ] 2019-06-19T10:04:42,834Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,842Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,843Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Bob Plc, L=Rome, C=IT], platformVersion=5, serial=1560938681701) {}
[INFO ] 2019-06-19T10:04:42,853Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,862Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,863Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-06-19T10:04:42,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:42,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Charlie Ltd, L=Athens, C=GR], platformVersion=5, serial=1560938682721) {}
[INFO ] 2019-06-19T10:04:42,872Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-06-19T10:04:42,879Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T10:04:42,883Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.SyncKeyMappingInitiator to initiate net.corda.confidential.identities.SyncKeyMappingResponse (version 1) {}
[INFO ] 2019-06-19T10:04:42,887Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[INFO ] 2019-06-19T10:04:42,887Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered net.corda.confidential.identities.RequestKeyFlowWrapper to initiate net.corda.confidential.identities.RequestKeyFlowWrapperHandler (version 1) {}
[WARN ] 2019-06-19T10:04:43,178Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333}
[WARN ] 2019-06-19T10:04:43,178Z [Mock node 3 thread] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract net.corda.finance.contracts.asset.Cash {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333}
[INFO ] 2019-06-19T10:04:44,986Z [Mock node 3 thread] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:44,987Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,083Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,083Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,342Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: E5E7BF58EBBA07CAFED97678FB7E6F560B4519CEBF4D484EDB6B09CDCA27D5B7 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,343Z [Mock node 3 thread] corda.flow.call - Generating spend for: e684f326-2b4c-4eea-be9c-74d6cf855c1c {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[WARN ] 2019-06-19T10:04:45,391Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2ECFF3A1159966CAD0FA43336291C9E39B8ADD2C96950DE161A71E0A6E6D0185, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,395Z [Mock node 3 thread] corda.flow.call - Signing transaction for: e684f326-2b4c-4eea-be9c-74d6cf855c1c {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,497Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=5575572A3EA7507A4C686C5475C10A479639D0838DED1AF986172DFB1AA0003B}
[INFO ] 2019-06-19T10:04:45,534Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,759Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,760Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,801Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,802Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,802Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00 {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000001, flow-id=e684f326-2b4c-4eea-be9c-74d6cf855c1c, invocation_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, invocation_timestamp=2019-06-19T10:04:42.926Z, origin=Only For Testing, session_id=0c5863c4-910b-4fbc-a88b-22c5cbcaf81a, session_timestamp=2019-06-19T10:04:42.926Z, thread-id=333, tx_id=0BDDEA63D598F8DDFB3448074B6FAF03D12713BD8983B5647C963985EC9BDE00}
[INFO ] 2019-06-19T10:04:45,824Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Linking: E5E7BF58EBBA07CAFED97678FB7E6F560B4519CEBF4D484EDB6B09CDCA27D5B7 to O=Charlie Ltd, L=Athens, C=GR {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000004, flow-id=892cb739-49dd-402c-9b6b-557826374b7c, invocation_id=4b0782de-1242-4ebb-a23b-aece0e6764dd, invocation_timestamp=2019-06-19T10:04:45.818Z, origin=Only For Testing, session_id=4b0782de-1242-4ebb-a23b-aece0e6764dd, session_timestamp=2019-06-19T10:04:45.818Z, thread-id=355}
[INFO ] 2019-06-19T10:04:45,870Z [Mock node 3 thread] identity.PersistentIdentityService.invoke - Linking: 9622221E378C6CEE6C0058F32409763E6F93A74C7F1D0BAAEE5F34C7CF96932F to O=Alice Corp, L=Madrid, C=ES {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
[INFO ] 2019-06-19T10:04:45,871Z [Mock node 3 thread] corda.flow.call - Generating spend for: 92b31252-fba4-4d37-9a74-8fee4cc7fb8d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
[WARN ] 2019-06-19T10:04:45,881Z [Mock node 3 thread] utilities.AppendOnlyPersistentMapBase.set - Double insert in net.corda.node.utilities.AppendOnlyPersistentMap for entity class class net.corda.node.services.identity.PersistentIdentityService$PersistentIdentity key 2ECFF3A1159966CAD0FA43336291C9E39B8ADD2C96950DE161A71E0A6E6D0185, not inserting the second time {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
[INFO ] 2019-06-19T10:04:45,883Z [Mock node 3 thread] corda.flow.call - Signing transaction for: 92b31252-fba4-4d37-9a74-8fee4cc7fb8d {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
[INFO ] 2019-06-19T10:04:45,897Z [Mock node 3 thread] corda.flow.call - Finalising transaction for: 642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
[INFO ] 2019-06-19T10:04:45,915Z [Mock node 3 thread] corda.flow.call - Sending transaction to notary: O=Notary Service, L=Zurich, C=CH. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:45,975Z [Mock node 0 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTtuPXK8hNmiW5Qyw1wPyT5eEHnWEuwBScHKiaTB8vFjW {fiber-id=10000007, flow-id=2069e0c1-5e2b-4eec-ada6-98929fee4a8c, invocation_id=5e59e3c4-c16f-41de-965a-05a85d39ebda, invocation_timestamp=2019-06-19T10:04:45.923Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=5e59e3c4-c16f-41de-965a-05a85d39ebda, session_timestamp=2019-06-19T10:04:45.923Z, thread-id=354}
[INFO ] 2019-06-19T10:04:45,990Z [Mock node 3 thread] corda.flow.call - Notary responded. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:45,991Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:45,997Z [Mock node 3 thread] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:46,010Z [Mock node 1 thread] corda.flow.call - Received transaction acknowledgement request from party O=Charlie Ltd, L=Athens, C=GR. {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:46,052Z [Mock node 3 thread] corda.flow.call - Party O=Alice Corp, L=Madrid, C=ES received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:46,052Z [Mock node 3 thread] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:46,052Z [Mock node 3 thread] corda.flow.call - Finalised transaction for: 642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:50,169Z [Mock node 1 thread] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:50,181Z [Mock node 1 thread] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:50,182Z [Test worker] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTtuPXK8hNmiW5Qyw1wPyT5eEHnWEuwBScHKiaTB8vFjW {}
[INFO ] 2019-06-19T10:04:50,209Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWXeL9N15WvE8TiPgWP5vv1tAUr25LdRqgHar7TGNGNcb {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[WARN ] 2019-06-19T10:04:50,209Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB74LrWh3jDTimhEaPJnhveydiyrZbBWEBtvkSCKPkZ5p) {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:50,218Z [Mock node 1 thread] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355, tx_id=642C2C780218CF4CCA8173930065665387BD1471BC7A57312BD86FCFC9612F3A}
[INFO ] 2019-06-19T10:04:50,230Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWXeL9N15WvE8TiPgWP5vv1tAUr25LdRqgHar7TGNGNcb {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355}
[WARN ] 2019-06-19T10:04:50,230Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB74LrWh3jDTimhEaPJnhveydiyrZbBWEBtvkSCKPkZ5p) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355}
[INFO ] 2019-06-19T10:04:50,232Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWXeL9N15WvE8TiPgWP5vv1tAUr25LdRqgHar7TGNGNcb {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355}
[WARN ] 2019-06-19T10:04:50,232Z [Mock node 1 thread] persistence.AbstractPartyToX500NameAsStringConverter.convertToDatabaseColumn - Identity service unable to resolve AbstractParty: Anonymous(DLB74LrWh3jDTimhEaPJnhveydiyrZbBWEBtvkSCKPkZ5p) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000006, flow-id=0d19ca4c-8567-40a8-97d5-c1436dc317d2, invocation_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, invocation_timestamp=2019-06-19T10:04:45.844Z, origin=O=Charlie Ltd, L=Athens, C=GR, session_id=0baf38dd-4ee0-49c1-905a-4e13d15db678, session_timestamp=2019-06-19T10:04:45.844Z, thread-id=355}
[INFO ] 2019-06-19T10:05:44,473Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyTtuPXK8hNmiW5Qyw1wPyT5eEHnWEuwBScHKiaTB8vFjW {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[INFO ] 2019-06-19T10:05:44,475Z [Mock node 2 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWXeL9N15WvE8TiPgWP5vv1tAUr25LdRqgHar7TGNGNcb {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[INFO ] 2019-06-19T10:05:45,697Z [Mock node 1 thread] identity.PersistentIdentityService.invoke - Unable to find a valid CordaX500 name from public key: GfHq2tTVk9z4eXgyWXeL9N15WvE8TiPgWP5vv1tAUr25LdRqgHar7TGNGNcb {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[WARN ] 2019-06-19T10:05:45,719Z [Mock node 3 thread] statemachine.SingleThreadedStateMachineManager.onSessionInit - Unable to initiate flow from O=Bob Plc, L=Rome, C=IT (appName=<unknown> flowVersion=1), sending to the flow hospital [errorCode=1hg9fk, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1hg9fk] {actor_id=Only For Testing, actor_owning_identity=O=Charlie Ltd, L=Athens, C=GR, actor_store_id=TEST, fiber-id=10000005, flow-id=92b31252-fba4-4d37-9a74-8fee4cc7fb8d, invocation_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, invocation_timestamp=2019-06-19T10:04:45.830Z, origin=Only For Testing, session_id=20a0ae7b-ddce-4997-b826-2eff4e3c614d, session_timestamp=2019-06-19T10:04:45.830Z, thread-id=333}
net.corda.node.services.statemachine.SessionRejectException$NotRegistered: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.getInitiatedFlowFactory(SingleThreadedStateMachineManager.kt:503) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionInit(SingleThreadedStateMachineManager.kt:467) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.onSessionMessage(SingleThreadedStateMachineManager.kt:430) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager.deliverExternalEvent(SingleThreadedStateMachineManager.kt:405) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.SingleThreadedStateMachineManager$start$3$1$1.run(SingleThreadedStateMachineManager.kt:158) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T10:05:45,730Z [Mock node 2 thread] corda.flow.run - Flow raised an error: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered. Sending it to flow hospital to be triaged. {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[INFO ] 2019-06-19T10:05:45,733Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [13718ee8-e59e-4836-b456-e8611e163e6a] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493), SessionId(toLong=8413297254922800325)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-8413297254922800325--6675878778841246879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))]), frozenFiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1), errorState=Clean, numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@29c5b384, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=83b95632-9e41-4602-9840-44a6f4610c38) {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[INFO ] 2019-06-19T10:05:45,736Z [Mock node 2 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T10:05:45,738Z [Mock node 2 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T10:05:45,765Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [13718ee8-e59e-4836-b456-e8611e163e6a] errored, dumping all transitions:

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:21.781Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E7DA57565D73F2C55153FD3654B692C94A2BE7FC5C09D3900C8CF3D799994B63), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388])
    SignalFlowHasStarted(flowId=[13718ee8-e59e-4836-b456-e8611e163e6a])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4545441079345385607), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4873336252316108106-4866209298269395493-0-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:21.841Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:38.183Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), maySkipCheckpoint=false, fiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E7DA57565D73F2C55153FD3654B692C94A2BE7FC5C09D3900C8CF3D799994B63)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:38.184Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.695Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}), maySkipCheckpoint=false, fiber=AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}), frozenFiber=AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9})
checkpoint.flowState.frozenFiber.hash: 
    AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9
    AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.695Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4873336252316108106-4866209298269395493-2-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.700Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), maySkipCheckpoint=false, fiber=4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
checkpoint.flowState.frozenFiber.hash: 
    AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482
    4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.700Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.703Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4545441079345385607), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.703Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.704Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.705Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[13718ee8-e59e-4836-b456-e8611e163e6a], sessionId=SessionId(toLong=8413297254922800325))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8413297254922800325): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.705Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.711Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493), SessionId(toLong=8413297254922800325)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false), frozenFiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664
    7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.714Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8413297254922800325), initiationEntropy=-6675878778841246879, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8413297254922800325--6675878778841246879-4-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))])
checkpoint.sessions.SessionId(toLong=8413297254922800325): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8413297254922800325--6675878778841246879)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.729Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8413297254922800325), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=4826110934388457881)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8413297254922800325).rejectionError: 
    null
    FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.740Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.744Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.746Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[WARN ] 2019-06-19T10:05:45,765Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [13718ee8-e59e-4836-b456-e8611e163e6a] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T10:05:45,768Z [Mock node 2 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[INFO ] 2019-06-19T10:05:45,818Z [Mock node 1 thread] corda.flow.run - Flow raised an error: Counter-flow errored. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[INFO ] 2019-06-19T10:05:45,818Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), frozenFiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260), errorState=Clean, numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@418fcada, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7) {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[INFO ] 2019-06-19T10:05:45,818Z [Mock node 1 thread] statemachine.StaffedFlowHospital.invoke - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[INFO ] 2019-06-19T10:05:45,819Z [Mock node 1 thread] statemachine.StaffedFlowHospital.flowErrored - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T10:05:46,133Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] errored, dumping all transitions:

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:08.479Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=97C558DA11EABDEB5CE4AF5C8B6234DF7A8E2905FFB58458311E998776DAB040), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c])
    SignalFlowHasStarted(flowId=[684d513c-8f6f-4946-8d37-10ee00ec3ddf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:13.057Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], sessionId=SessionId(toLong=-4873336252316108106))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:13.104Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.767Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), frozenFiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=97C558DA11EABDEB5CE4AF5C8B6234DF7A8E2905FFB58458311E998776DAB040)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), frozenFiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.770Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4873336252316108106), initiationEntropy=4866209298269395493, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4873336252316108106-4866209298269395493-1-0), senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4873336252316108106-4866209298269395493)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.783Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4545441079345385607), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4873336252316108106-4866209298269395493)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.783Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.696Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.696Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4873336252316108106).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED}), maySkipCheckpoint=false, fiber=16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED}), frozenFiber=16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED})
checkpoint.flowState.frozenFiber.hash: 
    359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2
    16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4545441079345385607), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4873336252316108106-4866209298269395493-2-0), senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.706Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), maySkipCheckpoint=false, fiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), frozenFiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
checkpoint.flowState.frozenFiber.hash: 
    16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859
    430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.707Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.817Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ErrorSessionMessage(flowException=null, errorId=4826110934388457881)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106).errors: 
    []
    [FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.817Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[WARN ] 2019-06-19T10:05:46,134Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T10:05:46,134Z [Mock node 1 thread] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[WARN ] 2019-06-19T10:05:46,137Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [13718ee8-e59e-4836-b456-e8611e163e6a] errored, dumping all transitions:

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:21.781Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E7DA57565D73F2C55153FD3654B692C94A2BE7FC5C09D3900C8CF3D799994B63), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388])
    SignalFlowHasStarted(flowId=[13718ee8-e59e-4836-b456-e8611e163e6a])
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4545441079345385607), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4873336252316108106-4866209298269395493-0-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607): 
    null
    Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@48005388]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:21.841Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:38.183Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), maySkipCheckpoint=false, fiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E7DA57565D73F2C55153FD3654B692C94A2BE7FC5C09D3900C8CF3D799994B63)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:38.184Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.695Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}), maySkipCheckpoint=false, fiber=AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}), frozenFiber=AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9})
checkpoint.flowState.frozenFiber.hash: 
    AF848811BC209703B83F02F7D073467CC487EC4BD58FD487E089A14F91E18BE9
    AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.695Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Alice Corp, L=Madrid, C=ES, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4873336252316108106-4866209298269395493-2-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.700Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), maySkipCheckpoint=false, fiber=4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))]), frozenFiber=4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
checkpoint.flowState.frozenFiber.hash: 
    AD7085EB3E4016C8B3AAC72E320D642320DFBDF77082479BDFD633ADDFC67482
    4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.700Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.703Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4545441079345385607), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363, sender=O=Alice Corp, L=Madrid, C=ES)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.703Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4545441079345385607).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.704Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.705Z
  Event: InitiateFlow(wellKnownParty=O=Charlie Ltd, L=Athens, C=GR, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[13718ee8-e59e-4836-b456-e8611e163e6a], sessionId=SessionId(toLong=8413297254922800325))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8413297254922800325): 
    null
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.705Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.711Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1, )
  Actions: 
    PersistCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493), SessionId(toLong=8413297254922800325)=Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false), frozenFiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1), errorState=Clean, numberOfSuspends=4), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Alice Corp, L=Madrid, C=ES, sourceSessionId=SessionId(toLong=-4545441079345385607))])
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false)
checkpoint.flowState.frozenFiber.hash: 
    4B99BAE48C7C3F1CD79B84CC8BA1AC58931CB0588B7FC59578CD152AC4ACB664
    7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1
checkpoint.numberOfSuspends: 
    3
    4
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5bd8363]
    []


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.714Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Charlie Ltd, L=Athens, C=GR, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=8413297254922800325), initiationEntropy=-6675878778841246879, initiatorFlowClassName=net.corda.confidential.identities.RequestKeyFlowWrapper, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R-8413297254922800325--6675878778841246879-4-0), senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))=558BC32BD55D0AAE23F8A8521BBA4C39B615D43CD24D2619AA823E73CF7F72CB}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))])
checkpoint.sessions.SessionId(toLong=8413297254922800325): 
    Uninitiated(party=O=Charlie Ltd, L=Athens, C=GR, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=8413297254922800325), additionalEntropy=-6675878778841246879)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R-8413297254922800325--6675878778841246879)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.729Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8413297254922800325), payload=RejectSessionMessage(message=net.corda.confidential.identities.RequestKeyFlowWrapper is not registered, errorId=4826110934388457881)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a, sender=O=Charlie Ltd, L=Athens, C=GR)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=8413297254922800325).rejectionError: 
    null
    FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.RequestKeyFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Initiating(flowClass=class net.corda.confidential.identities.RequestKeyFlowWrapper, classToInitiateWith=class net.corda.confidential.identities.RequestKeyFlowWrapper, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.730Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlowHandler, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.740Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=0, propagating=false)


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.744Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.746Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [13718ee8-e59e-4836-b456-e8611e163e6a] ---
  Timestamp: 2019-06-19T10:05:45.823Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4826110934388457881)], sessions=[Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493)], senderUUID=83b95632-9e41-4602-9840-44a6f4610c38)
    CreateTransaction
    RemoveCheckpoint(id=[13718ee8-e59e-4836-b456-e8611e163e6a])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a])
    ReleaseSoftLocks(uuid=13718ee8-e59e-4836-b456-e8611e163e6a)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4545441079345385607), SessionId(toLong=8413297254922800325)])
    RemoveFlow(flowId=[13718ee8-e59e-4836-b456-e8611e163e6a], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Alice Corp, L=Madrid, C=ES), trace=Trace(invocationId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Invocation, sessionId=4d7e7d69-675d-456c-8dd2-689d26da6c5c, timestamp: 2019-06-19T10:05:21.774Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Bob Plc, L=Rome, C=IT, sessions={SessionId(toLong=-4545441079345385607)=Initiated(peerParty=O=Alice Corp, L=Madrid, C=ES, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4873336252316108106)), errors=[], deduplicationSeed=D--4873336252316108106-4866209298269395493), SessionId(toLong=8413297254922800325)=Initiating(bufferedMessages=[], rejectionError=FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered), deduplicationSeed=R-8413297254922800325--6675878778841246879)}, subFlowStack=[Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingResponse, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Charlie Ltd, L=Athens, C=GR, sourceSessionId=SessionId(toLong=8413297254922800325))]), frozenFiber=7E5E48263A14F415E6CD030C862CBD2BF36EFAA253EBCED74CBF665DE38EECD1), errorState=Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered)], propagatedIndex=1, propagating=true), numberOfSuspends=4), flowLogic=net.corda.confidential.identities.SyncKeyMappingResponse@29c5b384, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=83b95632-9e41-4602-9840-44a6f4610c38))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3f914f3a]
    []
isRemoved: 
    false
    true
 {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
[WARN ] 2019-06-19T10:05:46,137Z [Mock node 2 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [13718ee8-e59e-4836-b456-e8611e163e6a] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/1ggjwsp] {fiber-id=10000009, flow-id=13718ee8-e59e-4836-b456-e8611e163e6a, invocation_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, invocation_timestamp=2019-06-19T10:05:21.774Z, origin=O=Alice Corp, L=Madrid, C=ES, session_id=4d7e7d69-675d-456c-8dd2-689d26da6c5c, session_timestamp=2019-06-19T10:05:21.774Z, thread-id=356}
net.corda.core.flows.UnexpectedFlowEndException: net.corda.confidential.identities.RequestKeyFlowWrapper is not registered
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:56) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.sendAndReceive(FlowSessionImpl.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:88) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlow.call(RequestKeyFlow.kt:15) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:76) ~[main/:?]
	at net.corda.confidential.identities.RequestKeyFlowWrapper.call(RequestKeyFlow.kt:73) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:91) ~[main/:?]
	at net.corda.confidential.identities.SyncKeyMappingFlowHandler.call(SyncKeyMappingFlow.kt:58) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:327) ~[corda-core-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:130) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingResponse.call(SyncKeyMappingFlowTests.kt:127) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
[WARN ] 2019-06-19T10:05:46,144Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] errored, dumping all transitions:

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:08.479Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=97C558DA11EABDEB5CE4AF5C8B6234DF7A8E2905FFB58458311E998776DAB040), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c])
    SignalFlowHasStarted(flowId=[684d513c-8f6f-4946-8d37-10ee00ec3ddf])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@57d7717c]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:13.057Z
  Event: InitiateFlow(wellKnownParty=O=Bob Plc, L=Rome, C=IT, requestedParty=null)
  Actions: 
    AddSessionBinding(flowId=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], sessionId=SessionId(toLong=-4873336252316108106))
  Continuation: Resume(result=class net.corda.node.services.statemachine.FlowSessionImpl)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    null
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:13.104Z
  Event: EnterSubFlow(subFlowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.767Z
  Event: Suspend(ioRequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), maySkipCheckpoint=false, fiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), frozenFiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Explicit, frozenFlowLogic=97C558DA11EABDEB5CE4AF5C8B6234DF7A8E2905FFB58458311E998776DAB040)
    Started(flowIORequest=SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false), frozenFiber=359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.770Z
  Event: DoRemainingWork
  Actions: 
    SendInitial(party=O=Bob Plc, L=Rome, C=IT, initialise=InitialSessionMessage(initiatorSessionId=SessionId(toLong=-4873336252316108106), initiationEntropy=4866209298269395493, initiatorFlowClassName=net.corda.confidential.identities.SyncKeyMappingInitiator, appName=<unknown>, firstPayload=class net.corda.core.serialization.SerializedBytes), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4873336252316108106-4866209298269395493-1-0), senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7))
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    SendAndReceive({FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=06DE86D1B3191A590289DE6C91A688714E71C6D62439CFAED168D2324D6085B9}, shouldRetrySend=false)
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    Uninitiated(party=O=Bob Plc, L=Rome, C=IT, initiatingSubFlow=Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), sourceSessionId=SessionId(toLong=-4873336252316108106), additionalEntropy=4866209298269395493)
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4873336252316108106-4866209298269395493)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.783Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4545441079345385607), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106): 
    Initiating(bufferedMessages=[], rejectionError=null, deduplicationSeed=R--4873336252316108106-4866209298269395493)
    Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:21.783Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.696Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106).receivedMessages: 
    []
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421]
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.696Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4873336252316108106).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED}), maySkipCheckpoint=false, fiber=16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED}), frozenFiber=16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED})
checkpoint.flowState.frozenFiber.hash: 
    359C932AE17849D31F219C5D88BC29DF218ED8B661335B4E84CE358B263523C2
    16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859
checkpoint.numberOfSuspends: 
    1
    2
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7c621421, net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6999c53]
    []


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Bob Plc, L=Rome, C=IT, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4545441079345385607), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-R--4873336252316108106-4866209298269395493-2-0), senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.702Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.confidential.identities.SyncKeyMappingFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.706Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), maySkipCheckpoint=false, fiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260, )
  Actions: 
    PersistCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), frozenFiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))=A0A4F00FF9B0293F9853347C24C68F28A447F979F670260DBD0A7E6E4C2EA9ED})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))])
checkpoint.flowState.frozenFiber.hash: 
    16ACCB4BD7A87EF541775DA3E36E4950290A49F66B638C8223BFF96C81EB1859
    430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.707Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.817Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4873336252316108106), payload=ErrorSessionMessage(flowException=null, errorId=4826110934388457881)), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b, sender=O=Bob Plc, L=Rome, C=IT)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4873336252316108106).errors: 
    []
    [FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b]


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.817Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=0, propagating=false)


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:45.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] ---
  Timestamp: 2019-06-19T10:05:46.137Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4826110934388457881)], sessions=[], senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7)
    CreateTransaction
    RemoveCheckpoint(id=[684d513c-8f6f-4946-8d37-10ee00ec3ddf])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b])
    ReleaseSoftLocks(uuid=684d513c-8f6f-4946-8d37-10ee00ec3ddf)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4873336252316108106)])
    RemoveFlow(flowId=[684d513c-8f6f-4946-8d37-10ee00ec3ddf], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES)), trace=Trace(invocationId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Invocation, sessionId=cab16cd2-2837-4939-a8b3-4b51fe06b46b, timestamp: 2019-06-19T10:05:08.476Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Alice Corp, L=Madrid, C=ES), externalTrace=null, impersonatedActor=null), ourIdentity=O=Alice Corp, L=Madrid, C=ES, sessions={SessionId(toLong=-4873336252316108106)=Initiated(peerParty=O=Bob Plc, L=Rome, C=IT, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4545441079345385607)), errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], deduplicationSeed=R--4873336252316108106-4866209298269395493)}, subFlowStack=[Initiating(flowClass=class net.corda.confidential.identities.SyncKeyMappingInitiator, classToInitiateWith=class net.corda.confidential.identities.SyncKeyMappingInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Bob Plc, L=Rome, C=IT, sourceSessionId=SessionId(toLong=-4873336252316108106))]), frozenFiber=430E59582FD6BD6B405529082E9E1EC814893597A169FA2997C3D94AC2BD3260), errorState=Errored(errors=[FlowError(errorId=4826110934388457881, exception=net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=net.corda.confidential.identities.SyncKeyMappingInitiator@418fcada, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=8152e7c8-6540-4430-ba67-f1cbc5e382d7))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2683d08b]
    []
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
[WARN ] 2019-06-19T10:05:46,145Z [Mock node 1 thread] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [684d513c-8f6f-4946-8d37-10ee00ec3ddf] error [errorCode=112u0jo, moreInformationAt=https://errors.corda.net/OS/5.0-SNAPSHOT-WILLH/112u0jo] {actor_id=Only For Testing, actor_owning_identity=O=Alice Corp, L=Madrid, C=ES, actor_store_id=TEST, fiber-id=10000008, flow-id=684d513c-8f6f-4946-8d37-10ee00ec3ddf, invocation_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, invocation_timestamp=2019-06-19T10:05:08.476Z, origin=Only For Testing, session_id=cab16cd2-2837-4939-a8b3-4b51fe06b46b, session_timestamp=2019-06-19T10:05:08.476Z, thread-id=355}
net.corda.core.flows.UnexpectedFlowEndException: Counter-flow errored
	at Received unexpected counter-flow exception from peer O=Bob Plc, L=Rome, C=IT.() ~[?:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:447) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:69) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:73) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:149) ~[test/:?]
	at net.corda.confidential.identities.SyncKeyMappingInitiator.call(SyncKeyMappingFlowTests.kt:117) ~[test/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-5.0-SNAPSHOT-WILLH.jar:?]
